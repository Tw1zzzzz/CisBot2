"""
–î–∞–Ω–Ω—ã–µ Counter-Strike 2: ELO Faceit, —Ä–æ–ª–∏, –∫–∞—Ä—Ç—ã
–°–æ–∑–¥–∞–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π Twizz_Project –¥–ª—è CIS FINDER Bot
"""

FACEIT_ELO_RANGES = [
    {"name": "1-500 ELO", "min_elo": 1, "max_elo": 500, "level": 1, "emoji": "üü´"},
    {"name": "501-750 ELO", "min_elo": 501, "max_elo": 750, "level": 2, "emoji": "üü´"},
    {"name": "751-900 ELO", "min_elo": 751, "max_elo": 900, "level": 3, "emoji": "üü§"},
    {"name": "901-1050 ELO", "min_elo": 901, "max_elo": 1050, "level": 4, "emoji": "üü§"},
    {"name": "1051-1200 ELO", "min_elo": 1051, "max_elo": 1200, "level": 5, "emoji": "üü°"},
    {"name": "1201-1350 ELO", "min_elo": 1201, "max_elo": 1350, "level": 6, "emoji": "üü°"},
    {"name": "1351-1500 ELO", "min_elo": 1351, "max_elo": 1500, "level": 7, "emoji": "üü†"},
    {"name": "1501-1650 ELO", "min_elo": 1501, "max_elo": 1650, "level": 8, "emoji": "üü†"},
    {"name": "1651-1800 ELO", "min_elo": 1651, "max_elo": 1800, "level": 9, "emoji": "üî¥"},
    {"name": "1801+ ELO", "min_elo": 1801, "max_elo": 9999, "level": 10, "emoji": "üî¥"}
]

# –ù–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã ELO –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
ELO_FILTER_RANGES = [
    {"id": "newbie", "name": "–î–æ 1999 ELO", "emoji": "üî∞", "max_elo": 1999},
    {"id": "intermediate", "name": "2000-2699 ELO", "emoji": "‚≠ê", "min_elo": 2000, "max_elo": 2699},
    {"id": "advanced", "name": "2700-3099 ELO", "emoji": "üèÜ", "min_elo": 2700, "max_elo": 3099},
    {"id": "pro", "name": "3100+ ELO", "emoji": "üíé", "min_elo": 3100},
    {"id": "top_1000", "name": "TOP 1000", "emoji": "üëë", "description": "–õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"}
]

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∫–µ—Ç
PROFILE_CATEGORIES = [
    {"id": "mm_premier", "name": "–ú–ú/–ü–†–ï–ú–¨–ï–†/–ù–ê–ü–ê–†–ù–ò–ö–ò", "emoji": "üéÆ", "description": "–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥–∞, –ø—Ä–µ–º—å–µ—Ä–∞ –∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤"},
    {"id": "faceit", "name": "Faceit", "emoji": "üéØ", "description": "–ò–≥—Ä–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Faceit"},
    {"id": "tournaments", "name": "–¢—É—Ä–Ω–∏—Ä—ã", "emoji": "üèÜ", "description": "–£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö"},
    {"id": "looking_for_team", "name": "–ò—â—É –∫–æ–º–∞–Ω–¥—É", "emoji": "üë•", "description": "–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"}
]

CS2_ROLES = [
    {"name": "IGL", "description": "–õ–∏–¥–µ—Ä –∫–æ–º–∞–Ω–¥—ã", "emoji": "üëë"},
    {"name": "Entry Fragger", "description": "–ü–µ—Ä–≤—ã–π –Ω–∞ –≤—Ö–æ–¥", "emoji": "‚ö°"},
    {"name": "Support Player", "description": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥—ã", "emoji": "üõ°Ô∏è"},
    {"name": "Lurker", "description": "–°–∫—Ä—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫", "emoji": "ü•∑"},
    {"name": "AWPer", "description": "–°–Ω–∞–π–ø–µ—Ä –∫–æ–º–∞–Ω–¥—ã", "emoji": "üéØ"}
]

CS2_MAPS = [
    {"name": "Ancient", "emoji": "üóø"},
    {"name": "Dust2", "emoji": "üèúÔ∏è"},
    {"name": "Inferno", "emoji": "üî•"},
    {"name": "Mirage", "emoji": "üèõÔ∏è"},
    {"name": "Nuke", "emoji": "‚ò¢Ô∏è"},
    {"name": "Overpass", "emoji": "üåâ"},
    {"name": "Train", "emoji": "üöÇ"}
]

PLAYTIME_OPTIONS = [
    {"name": "–£—Ç—Ä–æ–º (6-12)", "id": "morning", "start": 6, "end": 12, "emoji": "üåÖ"},
    {"name": "–î–Ω–µ–º (12-18)", "id": "day", "start": 12, "end": 18, "emoji": "‚òÄÔ∏è"},
    {"name": "–í–µ—á–µ—Ä–æ–º (18-24)", "id": "evening", "start": 18, "end": 24, "emoji": "üåÜ"},
    {"name": "–ù–æ—á—å—é (0-6)", "id": "night", "start": 0, "end": 6, "emoji": "üåô"}
]

def get_elo_range_by_elo(elo: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω ELO –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é ELO"""
    return next((elo_range for elo_range in FACEIT_ELO_RANGES 
                if elo_range["min_elo"] <= elo <= elo_range["max_elo"]), None)



def get_elo_filter_by_id(filter_id: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç ELO —Ñ–∏–ª—å—Ç—Ä –ø–æ ID"""
    return next((elo_filter for elo_filter in ELO_FILTER_RANGES if elo_filter["id"] == filter_id), None)

def check_elo_in_filter(elo: int, filter_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ ELO –≤ —Ñ–∏–ª—å—Ç—Ä"""
    if filter_id == "any":
        return True
    
    elo_filter = get_elo_filter_by_id(filter_id)
    if not elo_filter:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    min_elo = elo_filter.get("min_elo", 0)
    max_elo = elo_filter.get("max_elo", 99999)
    
    return min_elo <= elo <= max_elo

def format_elo_filter_display(filter_id: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ELO —Ñ–∏–ª—å—Ç—Ä–∞"""
    if filter_id == "any":
        return "üéØ –õ—é–±–æ–π ELO"
    
    elo_filter = get_elo_filter_by_id(filter_id)
    if elo_filter:
        return f"{elo_filter['emoji']} {elo_filter['name']}"
    
    return "üéØ –õ—é–±–æ–π ELO"

def validate_faceit_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ Faceit –ø—Ä–æ—Ñ–∏–ª—å"""
    import re
    pattern = r'https://www\.faceit\.com/[a-z]{2}/players/[a-zA-Z0-9_-]+'
    return bool(re.match(pattern, url))

def extract_faceit_nickname(url: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ Faceit - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    import re
    
    if not url:
        return ""
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ Faceit URL
    patterns = [
        r'/players/([a-zA-Z0-9_-]+)',  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: /en/players/nickname
        r'faceit\.com/([a-zA-Z0-9_-]+)/?$',  # –ü—Ä—è–º–æ–π: faceit.com/nickname
        r'/([a-zA-Z0-9_-]+)/?$'  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç URL
    ]
    
    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            nickname = match.group(1)
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
            if nickname.lower() not in ['en', 'ru', 'de', 'fr', 'es', 'players', 'profile', 'www', 'api']:
                return nickname
    
    return ""

def get_role_by_name(role_name: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ –ø–æ –∏–º–µ–Ω–∏"""
    return next((role for role in CS2_ROLES if role["name"] == role_name), None)

def get_map_by_name(map_name: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ –∏–º–µ–Ω–∏"""
    return next((map_data for map_data in CS2_MAPS if map_data["name"] == map_name), None)

def get_playtime_by_range(start: int, end: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É"""
    return next((time for time in PLAYTIME_OPTIONS if time["start"] == start and time["end"] == end), None)

def format_elo_display(elo: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ELO —Å —ç–º–æ–¥–∑–∏"""
    elo_range = get_elo_range_by_elo(elo)
    if elo_range:
        return f"{elo_range['emoji']} {elo} ELO (Level {elo_range['level']})"
    return f"‚ùì {elo} ELO"

def format_faceit_display(elo: int, faceit_url: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Faceit –ø—Ä–æ—Ñ–∏–ª—è"""
    nickname = extract_faceit_nickname(faceit_url)
    elo_display = format_elo_display(elo)
    return f"{elo_display}\nüîó [Faceit: {nickname}]({faceit_url})"

def format_faceit_elo_display(current_elo: int, min_elo: int = None, max_elo: int = None, nickname: str = None) -> str:
    """
    Formats Faceit ELO display with min/max values and comprehensive validation.
    
    Validates input types and ranges, coerces to int ‚â• 0, ensures logical consistency
    (min ‚â§ current ‚â§ max), and falls back to base display when validation fails.
    
    Args:
        current_elo: Current player ELO (required)
        min_elo: Minimum player ELO (optional, including 0)  
        max_elo: Maximum player ELO (optional, including 0)
        nickname: Player nickname for contextual logging (optional)
    
    Returns:
        str: Formatted ELO string with min/max values when valid
    
    Behavior Examples:
        # Valid scenarios
        >>> format_faceit_elo_display(2500)
        "üî¥ 2500 ELO (Level 10)"
        
        >>> format_faceit_elo_display(2500, 2200, 2800)
        "üî¥ 2500 ELO (Level 10) (–º–∏–Ω:2200 –º–∞–∫—Å:2800)"
        
        >>> format_faceit_elo_display(2500, min_elo=2200)
        "üî¥ 2500 ELO (Level 10) (–º–∏–Ω:2200)"
        
        >>> format_faceit_elo_display(1500, 0, 1600, "PlayerName")
        "üü† 1500 ELO (Level 7) (–º–∏–Ω:0 –º–∞–∫—Å:1600)"
        
        # Validation and fallback scenarios
        >>> format_faceit_elo_display("2500", "invalid", 2800)  # Type coercion
        "üî¥ 2500 ELO (Level 10) (–º–∞–∫—Å:2800)"
        
        >>> format_faceit_elo_display(2500, 2600, 2800)  # min > current, fallback
        "üî¥ 2500 ELO (Level 10)"
        
        >>> format_faceit_elo_display(2500, 2200, 2400)  # current > max, fallback  
        "üî¥ 2500 ELO (Level 10)"
        
        >>> format_faceit_elo_display(-100)  # Negative coerced to 0
        "üü´ 0 ELO (Level 1)"
    """
    import logging
    logger = logging.getLogger(__name__)
    
    player_context = f" (player: {nickname})" if nickname else ""
    
    # Helper function to coerce and validate ELO values
    def coerce_elo_value(value, value_name: str):
        if value is None:
            return None
            
        if not isinstance(value, (int, float, str)):
            logger.warning(f"format_faceit_elo_display: {value_name} invalid type: {type(value)} = {value}{player_context}")
            return None
            
        try:
            # Try to convert to int
            if isinstance(value, str):
                # Handle string numeric values
                coerced = int(float(value))  # float first to handle "2500.0"
            else:
                coerced = int(value)
            
            # Ensure >= 0
            if coerced < 0:
                logger.warning(f"format_faceit_elo_display: {value_name} negative, coercing to 0: {coerced}{player_context}")
                coerced = 0
                
            return coerced
            
        except (ValueError, TypeError, OverflowError):
            logger.warning(f"format_faceit_elo_display: {value_name} cannot be coerced to int: {value}{player_context}")
            return None
    
    # Validate and coerce current_elo (required parameter)
    current_elo = coerce_elo_value(current_elo, "current_elo")
    if current_elo is None:
        logger.error(f"format_faceit_elo_display: current_elo is invalid, using 0{player_context}")
        current_elo = 0
    
    # Validate and coerce optional min/max values
    min_elo = coerce_elo_value(min_elo, "min_elo") if min_elo is not None else None
    max_elo = coerce_elo_value(max_elo, "max_elo") if max_elo is not None else None
    
    # Check logical consistency: min <= current <= max
    should_show_minmax = True
    validation_errors = []
    
    if min_elo is not None and current_elo < min_elo:
        validation_errors.append(f"current_elo({current_elo}) < min_elo({min_elo})")
        should_show_minmax = False
        
    if max_elo is not None and current_elo > max_elo:
        validation_errors.append(f"current_elo({current_elo}) > max_elo({max_elo})")
        should_show_minmax = False
        
    if min_elo is not None and max_elo is not None and min_elo > max_elo:
        validation_errors.append(f"min_elo({min_elo}) > max_elo({max_elo})")
        should_show_minmax = False
    
    if validation_errors:
        logger.warning(f"format_faceit_elo_display: Logical inconsistencies detected, falling back to base display: {'; '.join(validation_errors)}{player_context}")
    
    # Generate base display
    base_display = format_elo_display(current_elo)
    
    # Add min/max information only if logically consistent and values are valid
    if should_show_minmax and (min_elo is not None or max_elo is not None):
        elo_parts = []
        if min_elo is not None:
            elo_parts.append(f"–º–∏–Ω:{min_elo}")
        if max_elo is not None:
            elo_parts.append(f"–º–∞–∫—Å:{max_elo}")
        
        if elo_parts:
            base_display += f" ({' '.join(elo_parts)})"
            logger.debug(f"format_faceit_elo_display: Display with min/max{player_context}: {base_display}")
    else:
        logger.debug(f"format_faceit_elo_display: Base display{player_context}: {base_display}")
    
    return base_display

def format_role_display(role_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–ª–∏ —Å —ç–º–æ–¥–∑–∏"""
    role = get_role_by_name(role_name)
    if role:
        return f"{role['emoji']} {role['name']}"
    return f"‚ùì {role_name}"

def format_map_display(map_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å —ç–º–æ–¥–∑–∏"""
    map_data = get_map_by_name(map_name)
    if map_data:
        return f"{map_data['emoji']} {map_data['name']}"
    return f"üìç {map_name}"

def format_playtime_display(start: int, end: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã"""
    time_data = get_playtime_by_range(start, end)
    if time_data:
        return f"{time_data['emoji']} {time_data['name']}"
    return f"‚è∞ {start:02d}:00 - {end:02d}:00"

def format_maps_list(maps: list, max_count: int = 3) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not maps:
        return "‚ùå –ö–∞—Ä—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    
    formatted_maps = []
    for i, map_name in enumerate(maps):
        if i >= max_count:
            break
        formatted_maps.append(format_map_display(map_name))
    
    result = ", ".join(formatted_maps)
    if len(maps) > max_count:
        result += f" –∏ –µ—â–µ {len(maps) - max_count}"
    
    return result

def get_elo_compatibility(elo1: int, elo2: int) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ELO (0.0 - 1.0)"""
    # –†–∞–∑–Ω–∏—Ü–∞ –≤ ELO
    diff = abs(elo1 - elo2)
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–∏ —Ä–∞–∑–Ω–∏—Ü–µ 0-100 ELO
    if diff <= 100:
        return 1.0
    elif diff <= 200:
        return 0.8
    elif diff <= 350:
        return 0.6
    elif diff <= 500:
        return 0.4
    else:
        return 0.2

def get_maps_compatibility(maps1: list, maps2: list) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∫–∞—Ä—Ç–∞–º (0.0 - 1.0)"""
    if not maps1 or not maps2:
        return 0.0
    
    common_maps = set(maps1) & set(maps2)
    total_maps = set(maps1) | set(maps2)
    
    if not total_maps:
        return 0.0
    
    return len(common_maps) / len(total_maps)

def get_time_compatibility(slots1: list, slots2: list) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º (0.0 - 1.0)"""
    if not slots1 or not slots2:
        return 0.0
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    common_slots = set(slots1) & set(slots2)
    total_slots = set(slots1) | set(slots2)
    
    if not total_slots:
        return 0.0
    
    return len(common_slots) / len(total_slots)

def calculate_profile_compatibility(profile1, profile2) -> dict:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    elo_compat = get_elo_compatibility(profile1.faceit_elo, profile2.faceit_elo)
    maps_compat = get_maps_compatibility(profile1.favorite_maps, profile2.favorite_maps)
    time_compat = get_time_compatibility(profile1.playtime_slots, profile2.playtime_slots)
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (—Ä–æ–ª—å –∏—Å–∫–ª—é—á–µ–Ω–∞)
    priority_multipliers = {
        'elo': 2.5,      # ELO –ø–æ–ª—É—á–∞–µ—Ç 2.5x –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        'maps': 1.0,     # –ö–∞—Ä—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
        'time': 1.0      # –í—Ä–µ–º—è —É–º–µ–Ω—å—à–µ–Ω–æ —Å 1.2 –¥–æ 1.0
    }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã –∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    weighted_elo = elo_compat * priority_multipliers['elo']
    weighted_maps = maps_compat * priority_multipliers['maps']
    weighted_time = time_compat * priority_multipliers['time']
    
    # –°—É–º–º–∏—Ä—É–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    total_weighted = weighted_elo + weighted_maps + weighted_time
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = 4.5)
    max_possible = 1.0 * (priority_multipliers['elo'] + priority_multipliers['maps'] + 
                         priority_multipliers['time'])
    total_compatibility = total_weighted / max_possible
    
    return {
        'total': round(total_compatibility * 100),
        'details': {
            'elo': round(elo_compat * 100),
            'maps': round(maps_compat * 100),
            'time': round(time_compat * 100)
        }
    }

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ===

def get_category_by_id(category_id: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID"""
    return next((category for category in PROFILE_CATEGORIES if category["id"] == category_id), None)

def format_categories_display(categories: list, max_count: int = 3) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not categories:
        return "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    
    formatted_categories = []
    for i, category_id in enumerate(categories):
        if i >= max_count:
            break
        category = get_category_by_id(category_id)
        if category:
            formatted_categories.append(f"{category['emoji']} {category['name']}")
        else:
            formatted_categories.append(f"‚ùì {category_id}")
    
    result = ", ".join(formatted_categories)
    if len(categories) > max_count:
        result += f" –∏ –µ—â–µ {len(categories) - max_count}"
    
    return result

def format_category_display(category_id: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —ç–º–æ–¥–∑–∏"""
    category = get_category_by_id(category_id)
    if category:
        return f"{category['emoji']} {category['name']}"
    return f"‚ùì {category_id}"

def validate_categories(categories: list) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    if not categories or not isinstance(categories, list):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    valid_category_ids = [cat["id"] for cat in PROFILE_CATEGORIES]
    return all(cat_id in valid_category_ids for cat_id in categories)

def get_categories_compatibility(categories1: list, categories2: list) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (0.0 - 1.0)"""
    if not categories1 or not categories2:
        return 0.0
    
    common_categories = set(categories1) & set(categories2)
    total_categories = set(categories1) | set(categories2)
    
    if not total_categories:
        return 0.0
    
    return len(common_categories) / len(total_categories) 