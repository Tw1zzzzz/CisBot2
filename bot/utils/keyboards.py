"""
Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è CIS FINDER Bot
–°–æ–∑–¥–∞–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π Twizz_Project
"""
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from .cs2_data import CS2_ROLES, CS2_MAPS, PLAYTIME_OPTIONS, ELO_FILTER_RANGES, PROFILE_CATEGORIES, format_elo_filter_display

logger = logging.getLogger(__name__)

class Keyboards:
    @staticmethod
    def _log_button_creation(button_type: str, callback_data: str, context: str = ""):
        """Helper method to log button creation with callback data"""
        logger.debug(f"üîò BUTTON CREATED: type='{button_type}', callback_data='{callback_data}', context='{context}'")
    
    @staticmethod
    def _log_keyboard_generation(keyboard_name: str, has_back_button: bool = False, 
                                back_callback: str = "", context: str = ""):
        """Enhanced logging for keyboard generation"""
        log_message = f"‚å®Ô∏è KEYBOARD GENERATED: name='{keyboard_name}', has_back={has_back_button}"
        if has_back_button and back_callback:
            log_message += f", back_callback='{back_callback}'"
        if context:
            log_message += f", context='{context}'"
        logger.debug(log_message)

    @staticmethod
    def main_menu():
        keyboard = [
            [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile_menu")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤", callback_data="search_start")],
            [InlineKeyboardButton("üíù –ú–æ–∏ —Ç–∏–º–º–µ–π—Ç—ã", callback_data="teammates_list")],
            [InlineKeyboardButton("üíå –ò—Å—Ç–æ—Ä–∏—è –ª–∞–π–∫–æ–≤", callback_data="likes_history")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_profile_mandatory():
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        keyboard = [
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def profile_menu(has_profile: bool = False, is_rejected: bool = False):
        """DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        keyboard = []
        
        if has_profile:
            keyboard.append([InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile_view")])
            
            if is_rejected:
                # –î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                keyboard.append([InlineKeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile_create")])
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                keyboard.extend([
                    [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="profile_edit")],
                    [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="profile_stats")]
                ])
        else:
            keyboard.append([InlineKeyboardButton("‚ú® –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile_create")])
        
        keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def profile_main_menu():
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="profile_edit")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="profile_stats")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def profile_rejected_menu():
        """–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        keyboard = [
            [InlineKeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile_create")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def profile_no_profile_menu():
        """–ú–µ–Ω—é –∫–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è"""
        keyboard = [
            [InlineKeyboardButton("‚ú® –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile_create")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def elo_input_menu():
        """–ú–µ–Ω—é –¥–ª—è –≤–≤–æ–¥–∞ —Ç–æ—á–Ω–æ–≥–æ ELO (–±–µ–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤)."""
        keyboard = [
            [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω–æ–µ ELO", callback_data="elo_custom")],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def role_selection():
        keyboard = []
        
        for role in CS2_ROLES:
            button_text = f"{role['emoji']} {role['name']}"
            callback_data = f"role_{role['name']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # Log back button creation
        Keyboards._log_button_creation("back", "back", "role_selection keyboard")
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
        
        Keyboards._log_keyboard_generation("role_selection", True, "back", "Role selection with back button")
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def maps_selection(selected_maps: list = None):
        if selected_maps is None:
            selected_maps = []
            
        keyboard = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(CS2_MAPS), 2):
            row = []
            for j in range(2):
                if i + j < len(CS2_MAPS):
                    map_data = CS2_MAPS[i + j]
                    map_name = map_data['name']
                    is_selected = map_name in selected_maps
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞
                    button_text = f"{'‚úÖ' if is_selected else map_data['emoji']} {map_name}"
                    callback_data = f"map_{map_name}"
                    row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_row = []
        if selected_maps:
            control_row.append(InlineKeyboardButton(f"‚úÖ –ì–æ—Ç–æ–≤–æ ({len(selected_maps)})", callback_data="maps_done"))
        
        # Log back button creation
        Keyboards._log_button_creation("back", "back", "maps_selection keyboard")
        control_row.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
        keyboard.append(control_row)
        
        Keyboards._log_keyboard_generation("maps_selection", True, "back", f"Maps selection with {len(selected_maps)} selected")
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def playtime_selection(selected_slots: list = None):
        if selected_slots is None:
            selected_slots = []
            
        keyboard = []
        
        for time_option in PLAYTIME_OPTIONS:
            is_selected = time_option['id'] in selected_slots
            button_text = f"{'‚úÖ' if is_selected else time_option['emoji']} {time_option['name']}"
            callback_data = f"time_{time_option['id']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_row = []
        if selected_slots:
            control_row.append(InlineKeyboardButton(f"‚úÖ –ì–æ—Ç–æ–≤–æ ({len(selected_slots)})", callback_data="time_done"))
        
        control_row.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
        keyboard.append(control_row)
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def categories_selection(selected_categories: list = None, edit_mode: bool = False):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        if selected_categories is None:
            selected_categories = []
            
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in PROFILE_CATEGORIES:
            is_selected = category['id'] in selected_categories
            button_text = f"{'‚úÖ' if is_selected else category['emoji']} {category['name']}"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ callback_data –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            callback_data = f"{'edit_category_' if edit_mode else 'category_'}{category['id']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_row = []
        if selected_categories:
            done_callback = "edit_categories_done" if edit_mode else "categories_done"
            control_row.append(InlineKeyboardButton(f"‚úÖ –ì–æ—Ç–æ–≤–æ ({len(selected_categories)})", callback_data=done_callback))
        
        control_row.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
        keyboard.append(control_row)
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def skip_description():
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def media_selection():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ–¥–∏–∞"""
        keyboard = [
            [InlineKeyboardButton("üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="media_photo")],
            [InlineKeyboardButton("üé• –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="media_video")],
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="media_skip")],
        ]
        
        # Log back button creation - now consistent with ConversationHandler pattern
        Keyboards._log_button_creation("back", "media_back", "media_selection keyboard - CONSISTENT CALLBACK")
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="media_back")])
        
        Keyboards._log_keyboard_generation("media_selection", True, "media_back", "Media selection with consistent media_back callback")
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def confirm_profile_creation():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="confirm_save_profile")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def profile_created():
        keyboard = [
            [InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile_view")],
            [InlineKeyboardButton("üîç –ò—Å–∫–∞—Ç—å —Ç–∏–º–º–µ–π—Ç–æ–≤", callback_data="search_start")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def profile_view_menu():
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="profile_edit")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="profile_stats")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def like_buttons():
        keyboard = [
            [
                InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data="like"),
                InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")
            ],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def profile_edit_menu():
        keyboard = [
            [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å ELO Faceit", callback_data="edit_elo")],
            [InlineKeyboardButton("üéÆ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫", callback_data="edit_nickname")],
            [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É Faceit", callback_data="edit_faceit_url")],
            [InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="edit_role")],
            [InlineKeyboardButton("üó∫Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—ã", callback_data="edit_maps")],
            [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="edit_time")],
            [InlineKeyboardButton("üéÆ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="edit_categories")],
            [InlineKeyboardButton("üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")],
            [InlineKeyboardButton("üì∑ –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data="edit_media")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_view")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def media_edit_menu(has_media: bool = False):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞"""
        keyboard = []
        
        if has_media:
            keyboard.extend([
                [InlineKeyboardButton("üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data="edit_media_replace")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞", callback_data="edit_media_remove")]
            ])
        else:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞", callback_data="edit_media_add")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_edit")])
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def confirmation(action: str):
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_{action}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"cancel_{action}")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def back_button(callback_data: str):
        # Log back button creation
        Keyboards._log_button_creation("back", callback_data, "single back button")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=callback_data)]]
        Keyboards._log_keyboard_generation("back_button", True, callback_data, f"Single back button with callback: {callback_data}")
        return InlineKeyboardMarkup(keyboard)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    @staticmethod
    def search_menu():
        keyboard = [
            [InlineKeyboardButton("üéØ –§–∏–ª—å—Ç—Ä –ø–æ ELO", callback_data="search_elo_filter")],
            [InlineKeyboardButton("üéÆ –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="search_categories_filter")],
            [InlineKeyboardButton("üë§ –ü–æ–∏—Å–∫ –ø–æ —Ä–æ–ª–∏", callback_data="search_by_role")],
            [InlineKeyboardButton("üó∫Ô∏è –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ä—Ç–∞–º", callback_data="search_by_maps")],
            [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="search_random")],
            [InlineKeyboardButton("üîç –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="search_start")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def elo_filter_menu(current_filter='any'):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ ELO —Ñ–∏–ª—å—Ç—Ä–∞"""
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–õ—é–±–æ–π ELO" –∫–∞–∫ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        any_text = "‚úÖ üéØ –õ—é–±–æ–π ELO" if current_filter == 'any' else "üéØ –õ—é–±–æ–π ELO"
        keyboard.append([InlineKeyboardButton(any_text, callback_data="elo_filter_any")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ ELO –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        for elo_range in ELO_FILTER_RANGES:
            is_selected = current_filter == elo_range['id']
            button_text = f"‚úÖ {elo_range['emoji']} {elo_range['name']}" if is_selected else f"{elo_range['emoji']} {elo_range['name']}"
            callback_data = f"elo_filter_{elo_range['id']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.extend([
            [InlineKeyboardButton("üîç –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="apply_elo_filter")],
            [InlineKeyboardButton("üîô –ö –ø–æ–∏—Å–∫—É", callback_data="search_menu")]
        ])
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def teammates_menu():
        keyboard = [
            [InlineKeyboardButton("üíå –ù–æ–≤—ã–µ —Ç–∏–º–º–µ–π—Ç—ã", callback_data="teammates_new")],
            [InlineKeyboardButton("üìã –í—Å–µ —Ç–∏–º–º–µ–π—Ç—ã", callback_data="teammates_all")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def settings_menu():
        keyboard = [
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")],
            [InlineKeyboardButton("üéØ –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞", callback_data="settings_filters")],
            [InlineKeyboardButton("üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", callback_data="settings_privacy")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def filters_settings_menu(current_filters):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
        elo_filter = current_filters.get('elo_filter', 'any')
        elo_text = format_elo_filter_display(elo_filter)
        
        keyboard = [
            [InlineKeyboardButton(f"üéØ ELO: {elo_text}", callback_data="filter_elo")],
            [InlineKeyboardButton("üë§ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Ä–æ–ª–∏", callback_data="filter_roles")],
            [InlineKeyboardButton("üó∫Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–∞—Ä—Ç", callback_data="filter_maps")],
            [InlineKeyboardButton("‚è∞ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏", callback_data="filter_time")],
            [InlineKeyboardButton("üìä –ú–∏–Ω. —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", callback_data="filter_compatibility")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="filters_reset")],
            [InlineKeyboardButton("üîô –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def filter_elo_settings_menu(current_filter='any'):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ELO —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–õ—é–±–æ–π ELO" –∫–∞–∫ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        any_text = "‚úÖ üéØ –õ—é–±–æ–π ELO" if current_filter == 'any' else "üéØ –õ—é–±–æ–π ELO"
        keyboard.append([InlineKeyboardButton(any_text, callback_data="filter_elo_any")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ ELO –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        for elo_range in ELO_FILTER_RANGES:
            is_selected = current_filter == elo_range['id']
            button_text = f"‚úÖ {elo_range['emoji']} {elo_range['name']}" if is_selected else f"{elo_range['emoji']} {elo_range['name']}"
            callback_data = f"filter_elo_{elo_range['id']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton("üîô –ö —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="settings_filters")])
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def privacy_main_menu(privacy_settings):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        visibility = privacy_settings.get('profile_visibility', 'all')
        who_can_like = privacy_settings.get('who_can_like', 'all')
        blocked_count = len(privacy_settings.get('blocked_users', []))
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        display_settings = [
            privacy_settings.get('show_elo', True),
            privacy_settings.get('show_stats', True),
            privacy_settings.get('show_matches_count', True),
            privacy_settings.get('show_activity', True),
            privacy_settings.get('show_faceit_url', True)
        ]
        shown_count = sum(display_settings)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        visibility_text = {
            'all': '–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
            'matches_only': '–¢–æ–ª—å–∫–æ —Ç–∏–º–º–µ–π—Ç–∞–º',
            'hidden': '–°–∫—Ä—ã—Ç'
        }.get(visibility, '–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
        
        likes_text = {
            'all': '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            'compatible_elo': '–°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–æ ELO',
            'common_maps': '–° –æ–±—â–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏',
            'active_users': '–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ'
        }.get(who_can_like, '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
        
        keyboard = [
            [InlineKeyboardButton(f"üëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å: {visibility_text}", callback_data="privacy_visibility")],
            [InlineKeyboardButton(f"üíå –õ–∞–π–∫–∏: {likes_text}", callback_data="privacy_likes")],
            [InlineKeyboardButton(f"üìä –î–∞–Ω–Ω—ã–µ: {shown_count}/5 –ø–æ–∫–∞–∑–∞–Ω–æ", callback_data="privacy_display")],
            [InlineKeyboardButton(f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {blocked_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="privacy_blocking")],
            [InlineKeyboardButton("üîô –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def privacy_visibility_menu(current_setting='all'):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        options = [
            ('all', 'üåç –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'),
            ('matches_only', 'üë• –¢–æ–ª—å–∫–æ –≤–∑–∞–∏–º–Ω—ã–º –ª–∞–π–∫–∞–º'),
            ('hidden', 'üîí –°–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
        ]
        
        keyboard = []
        for value, text in options:
            if value == current_setting:
                text = f"‚úÖ {text}"
            keyboard.append([InlineKeyboardButton(text, callback_data=f"visibility_{value}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="privacy_menu")])
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def privacy_likes_menu(current_setting='all'):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∞–π–∫–æ–≤"""
        options = [
            ('all', 'üåç –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'),
            ('compatible_elo', 'üéØ –°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–æ ELO (¬±2 —É—Ä–æ–≤–Ω—è)'),
            ('common_maps', 'üó∫Ô∏è –° –æ–±—â–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ (–º–∏–Ω. 2)'),
            ('active_users', 'üë• –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (–∑–∞ –Ω–µ–¥–µ–ª—é)')
        ]
        
        keyboard = []
        for value, text in options:
            if value == current_setting:
                text = f"‚úÖ {text}"
            keyboard.append([InlineKeyboardButton(text, callback_data=f"likes_{value}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="privacy_menu")])
        return InlineKeyboardMarkup(keyboard)

    @staticmethod  
    def privacy_display_menu(privacy_settings):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        display_options = [
            ('show_elo', 'üéØ ELO Faceit'),
            ('show_stats', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∞–π–∫–æ–≤'),
            ('show_matches_count', 'üíù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–º–º–µ–π—Ç–æ–≤'),
            ('show_activity', '‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'),
            ('show_faceit_url', 'üîó –°—Å—ã–ª–∫–∞ Faceit')
        ]
        
        keyboard = []
        for setting_key, label in display_options:
            is_shown = privacy_settings.get(setting_key, True)
            status = "‚úÖ" if is_shown else "‚ùå"
            action = "hide" if is_shown else "show"
            keyboard.append([
                InlineKeyboardButton(
                    f"{status} {label}", 
                    callback_data=f"toggle_{setting_key}_{action}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="privacy_menu")])
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def privacy_blocking_menu(blocked_users_info):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
        keyboard = []
        
        if blocked_users_info:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 5 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for i, (user_id, username, reason) in enumerate(blocked_users_info[:5]):
                display_name = username or f"ID: {user_id}"
                reason_text = f" ({reason})" if reason else ""
                keyboard.append([
                    InlineKeyboardButton(
                        f"üö´ {display_name}{reason_text}",
                        callback_data=f"unblock_{user_id}"
                    )
                ])
            
            if len(blocked_users_info) > 5:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ ({len(blocked_users_info)})",
                        callback_data="blocking_show_all"
                    )
                ])
        else:
            keyboard.append([
                InlineKeyboardButton("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="blocking_info")
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="privacy_menu")])
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def privacy_confirmation_menu(setting_type, old_value, new_value):
        """–ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"confirm_privacy_{setting_type}_{new_value}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_privacy_{setting_type}")],
        ]
        return InlineKeyboardMarkup(keyboard)

    # === –ú–û–î–ï–†–ê–¶–ò–Ø ===

    @staticmethod
    def main_menu_with_moderation():
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile_menu")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤", callback_data="search_start")],
            [InlineKeyboardButton("üíù –ú–æ–∏ —Ç–∏–º–º–µ–π—Ç—ã", callback_data="teammates_list")],
            [InlineKeyboardButton("üë®‚Äçüíº –ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="moderation_menu")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def moderation_main_menu(pending_count=0):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        keyboard = [
            [InlineKeyboardButton(f"‚è≥ –û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ({pending_count})", callback_data="mod_queue")],
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏", callback_data="mod_approved")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏", callback_data="mod_rejected")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="mod_stats")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def moderation_profile_actions(user_id):
        """–ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
            ],
            [InlineKeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞", callback_data="next_profile")],
            [InlineKeyboardButton("üîô –ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="moderation_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def moderation_rejection_reasons():
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
        keyboard = [
            [InlineKeyboardButton("üîû –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="reject_reason_inappropriate")],
            [InlineKeyboardButton("üîó –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ Faceit", callback_data="reject_reason_invalid_link")],
            [InlineKeyboardButton("üéÆ –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –Ω–∏–∫", callback_data="reject_reason_bad_nickname")],
            [InlineKeyboardButton("üìù –ù–µ–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="reject_reason_incomplete")],
            [InlineKeyboardButton("‚úèÔ∏è –°–≤–æ—è –ø—Ä–∏—á–∏–Ω–∞", callback_data="reject_reason_custom")],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="mod_queue")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def moderation_navigation():
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="next_profile")],
            [InlineKeyboardButton("üîô –ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="moderation_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def moderation_stats_menu():
        """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        keyboard = [
            [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="mod_stats_general")],
            [InlineKeyboardButton("üë®‚Äçüíº –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="mod_stats_moderators")],
            [InlineKeyboardButton("üìà –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="mod_stats_week")],
            [InlineKeyboardButton("üîô –ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="moderation_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def categories_filter_menu(selected_categories: list = None):
        """–ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ –ø–æ–∏—Å–∫–µ"""
        if selected_categories is None:
            selected_categories = []
            
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–õ—é–±—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" –∫–∞–∫ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        any_text = "‚úÖ üéØ –õ—é–±—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" if not selected_categories else "üéØ –õ—é–±—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        keyboard.append([InlineKeyboardButton(any_text, callback_data="categories_filter_any")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in PROFILE_CATEGORIES:
            is_selected = category['id'] in selected_categories
            button_text = f"‚úÖ {category['emoji']} {category['name']}" if is_selected else f"{category['emoji']} {category['name']}"
            callback_data = f"categories_filter_{category['id']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.extend([
            [InlineKeyboardButton("üîç –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="apply_categories_filter")],
            [InlineKeyboardButton("üîô –ö –ø–æ–∏—Å–∫—É", callback_data="search_menu")]
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    # === –õ–ê–ô–ö–ò –ò –ò–°–¢–û–†–ò–Ø ===
    
    @staticmethod
    def likes_history_menu():
        """–ú–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –ª–∞–π–∫–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("üíå –ù–æ–≤—ã–µ –ª–∞–π–∫–∏", callback_data="likes_new")],
            [InlineKeyboardButton("üìã –í—Å–µ –ª–∞–π–∫–∏", callback_data="likes_all")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def like_response_buttons(liker_id: int):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–∞–π–∫"""
        keyboard = [
            [
                InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫ –≤ –æ—Ç–≤–µ—Ç", callback_data=f"reply_like_{liker_id}"),
                InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_like_{liker_id}")
            ],
            [InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"view_profile_{liker_id}")],
            [InlineKeyboardButton("üîô –ö –∏—Å—Ç–æ—Ä–∏–∏ –ª–∞–π–∫–æ–≤", callback_data="likes_history")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def like_history_navigation(has_prev: bool = False, has_next: bool = False, page: int = 0):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ª–∞–π–∫–æ–≤"""
        keyboard = []
        nav_row = []
        if has_prev:
            nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"likes_page_{page-1}"))
        if has_next:
            nav_row.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"likes_page_{page+1}"))
        if nav_row:
            keyboard.append(nav_row)
        keyboard.append([InlineKeyboardButton("üîô –ö –∏—Å—Ç–æ—Ä–∏–∏ –ª–∞–π–∫–æ–≤", callback_data="likes_history")])
        return InlineKeyboardMarkup(keyboard) 