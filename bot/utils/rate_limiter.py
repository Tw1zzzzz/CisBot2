"""
üõ°Ô∏è Rate Limiting Middleware –¥–ª—è CIS FINDER Bot
–°–æ–∑–¥–∞–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π Twizz_Project

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ó–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞ –≤ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import asyncio
import time
import logging
from typing import Dict, Optional, Tuple, Any, List
from dataclasses import dataclass, field
from enum import Enum
from collections import defaultdict, deque
import json
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class RateLimitType(Enum):
    """–¢–∏–ø—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    COMMAND = "command"
    CALLBACK = "callback"
    MESSAGE = "message"
    API_CALL = "api_call"
    DATABASE_QUERY = "database_query"

class UserRiskLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

@dataclass
class RateLimitConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    max_requests: int
    time_window: int  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    burst_limit: int = 5  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ burst
    cooldown_time: int = 60  # –≤—Ä–µ–º—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
    escalation_factor: float = 1.5  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö

@dataclass
class UserActivity:
    """–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    request_times: deque = field(default_factory=lambda: deque(maxlen=1000))
    violation_count: int = 0
    last_violation: Optional[float] = None
    risk_level: UserRiskLevel = UserRiskLevel.LOW
    blocked_until: Optional[float] = None
    suspicious_patterns: List[str] = field(default_factory=list)
    total_requests: int = 0
    first_seen: float = field(default_factory=time.time)

@dataclass
class SecurityEvent:
    """–°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    timestamp: float
    user_id: int
    event_type: str
    severity: str
    details: Dict[str, Any]
    ip_address: Optional[str] = None

class RateLimiter:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
    DEFAULT_CONFIGS = {
        RateLimitType.COMMAND: RateLimitConfig(
            max_requests=10,  # 10 –∫–æ–º–∞–Ω–¥ –≤ –º–∏–Ω—É—Ç—É
            time_window=60,
            burst_limit=3,
            cooldown_time=120
        ),
        RateLimitType.CALLBACK: RateLimitConfig(
            max_requests=30,  # 30 callback'–æ–≤ –≤ –º–∏–Ω—É—Ç—É
            time_window=60,
            burst_limit=5,
            cooldown_time=60
        ),
        RateLimitType.MESSAGE: RateLimitConfig(
            max_requests=20,  # 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
            time_window=60,
            burst_limit=5,
            cooldown_time=90
        ),
        RateLimitType.API_CALL: RateLimitConfig(
            max_requests=100,  # 100 API –≤—ã–∑–æ–≤–æ–≤ –≤ –º–∏–Ω—É—Ç—É
            time_window=60,
            burst_limit=10,
            cooldown_time=30
        ),
        RateLimitType.DATABASE_QUERY: RateLimitConfig(
            max_requests=200,  # 200 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î –≤ –º–∏–Ω—É—Ç—É
            time_window=60,
            burst_limit=20,
            cooldown_time=15
        )
    }
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    SUSPICIOUS_PATTERNS = {
        "rapid_fire": {"threshold": 10, "window": 5},  # 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 5 —Å–µ–∫—É–Ω–¥
        "burst_attack": {"threshold": 20, "window": 10},  # 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 10 —Å–µ–∫—É–Ω–¥
        "persistent_spam": {"threshold": 50, "window": 60},  # 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –º–∏–Ω—É—Ç—É
        "automated_behavior": {"threshold": 100, "window": 300},  # 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 5 –º–∏–Ω—É—Ç
        "unusual_timing": {"threshold": 5, "window": 1}  # 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–∫—É–Ω–¥—É
    }
    
    def __init__(self):
        self.user_activities: Dict[int, UserActivity] = {}
        self.security_events: List[SecurityEvent] = []
        self.global_limits: Dict[RateLimitType, deque] = {
            limit_type: deque(maxlen=1000) for limit_type in RateLimitType
        }
        self.blocked_users: Dict[int, float] = {}  # user_id -> block_until_timestamp
        self.configs = self.DEFAULT_CONFIGS.copy()
        self._cleanup_task: Optional[asyncio.Task] = None
        self._start_cleanup_task()
        
        logger.info("üõ°Ô∏è Rate Limiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞")
    
    def _start_cleanup_task(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self._cleanup_task is None or self._cleanup_task.done():
            self._cleanup_task = asyncio.create_task(self._periodic_cleanup())
    
    async def _periodic_cleanup(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        while True:
            try:
                await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await self._cleanup_old_data()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ rate limiter: {e}")
    
    async def _cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        current_time = time.time()
        cleanup_threshold = current_time - 3600  # 1 —á–∞—Å
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_to_remove = []
        for user_id, activity in self.user_activities.items():
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
            while activity.request_times and activity.request_times[0] < cleanup_threshold:
                activity.request_times.popleft()
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            if (not activity.request_times and 
                current_time - activity.first_seen > 86400):
                users_to_remove.append(user_id)
        
        for user_id in users_to_remove:
            del self.user_activities[user_id]
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.security_events = [
            event for event in self.security_events 
            if event.timestamp > cleanup_threshold
        ]
        
        # –û—á–∏—Å—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
        for limit_type in RateLimitType:
            while (self.global_limits[limit_type] and 
                   self.global_limits[limit_type][0] < cleanup_threshold):
                self.global_limits[limit_type].popleft()
        
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        expired_blocks = [
            user_id for user_id, block_until in self.blocked_users.items()
            if block_until < current_time
        ]
        for user_id in expired_blocks:
            del self.blocked_users[user_id]
        
        if users_to_remove or expired_blocks:
            logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ rate limiter: —É–¥–∞–ª–µ–Ω–æ {len(users_to_remove)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, "
                       f"—Å–Ω—è—Ç–æ {len(expired_blocks)} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
    
    def _get_user_activity(self, user_id: int) -> UserActivity:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_activities:
            self.user_activities[user_id] = UserActivity(user_id=user_id)
        return self.user_activities[user_id]
    
    def _detect_suspicious_patterns(self, user_id: int) -> List[str]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        activity = self._get_user_activity(user_id)
        current_time = time.time()
        detected_patterns = []
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        for pattern_name, config in self.SUSPICIOUS_PATTERNS.items():
            threshold = config["threshold"]
            window = config["window"]
            
            # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–∫–Ω–µ –≤—Ä–µ–º–µ–Ω–∏
            recent_requests = [
                req_time for req_time in activity.request_times
                if current_time - req_time <= window
            ]
            
            if len(recent_requests) >= threshold:
                detected_patterns.append(pattern_name)
                if pattern_name not in activity.suspicious_patterns:
                    activity.suspicious_patterns.append(pattern_name)
        
        return detected_patterns
    
    def _update_user_risk_level(self, user_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        activity = self._get_user_activity(user_id)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if activity.violation_count >= 10 or len(activity.suspicious_patterns) >= 3:
            activity.risk_level = UserRiskLevel.CRITICAL
        elif activity.violation_count >= 5 or len(activity.suspicious_patterns) >= 2:
            activity.risk_level = UserRiskLevel.HIGH
        elif activity.violation_count >= 2 or len(activity.suspicious_patterns) >= 1:
            activity.risk_level = UserRiskLevel.MEDIUM
        else:
            activity.risk_level = UserRiskLevel.LOW
    
    def _log_security_event(self, user_id: int, event_type: str, severity: str, 
                           details: Dict[str, Any], ip_address: Optional[str] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        event = SecurityEvent(
            timestamp=time.time(),
            user_id=user_id,
            event_type=event_type,
            severity=severity,
            details=details,
            ip_address=ip_address
        )
        
        self.security_events.append(event)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        if severity == "critical":
            logger.critical(f"üö® CRITICAL SECURITY EVENT: {event_type} from user {user_id}: {details}")
        elif severity == "high":
            logger.warning(f"‚ö†Ô∏è HIGH SECURITY EVENT: {event_type} from user {user_id}: {details}")
        elif severity == "medium":
            logger.info(f"üîç MEDIUM SECURITY EVENT: {event_type} from user {user_id}: {details}")
        else:
            logger.debug(f"‚ÑπÔ∏è LOW SECURITY EVENT: {event_type} from user {user_id}: {details}")
    
    async def check_rate_limit(self, user_id: int, limit_type: RateLimitType, 
                              request_data: Optional[Dict[str, Any]] = None) -> Tuple[bool, str, Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit_type: –¢–∏–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            request_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            Tuple[bool, str, Dict]: (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
        """
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.blocked_users:
            if current_time < self.blocked_users[user_id]:
                remaining_time = int(self.blocked_users[user_id] - current_time)
                return False, f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {remaining_time} —Å–µ–∫—É–Ω–¥", {
                    "blocked_until": self.blocked_users[user_id],
                    "remaining_time": remaining_time
                }
            else:
                # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                del self.blocked_users[user_id]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        activity = self._get_user_activity(user_id)
        activity.total_requests += 1
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        config = self.configs.get(limit_type, self.DEFAULT_CONFIGS[limit_type])
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        while activity.request_times and activity.request_times[0] < current_time - config.time_window:
            activity.request_times.popleft()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if len(activity.request_times) >= config.max_requests:
            # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
            activity.violation_count += 1
            activity.last_violation = current_time
            
            # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            suspicious_patterns = self._detect_suspicious_patterns(user_id)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
            self._update_user_risk_level(user_id)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
            if activity.risk_level == UserRiskLevel.CRITICAL:
                block_duration = config.cooldown_time * 4  # 4x –≤—Ä–µ–º—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
                severity = "critical"
            elif activity.risk_level == UserRiskLevel.HIGH:
                block_duration = config.cooldown_time * 2  # 2x –≤—Ä–µ–º—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
                severity = "high"
            else:
                block_duration = config.cooldown_time
                severity = "medium"
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            self.blocked_users[user_id] = current_time + block_duration
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            self._log_security_event(
                user_id=user_id,
                event_type="rate_limit_exceeded",
                severity=severity,
                details={
                    "limit_type": limit_type.value,
                    "violation_count": activity.violation_count,
                    "risk_level": activity.risk_level.value,
                    "suspicious_patterns": suspicious_patterns,
                    "block_duration": block_duration,
                    "request_count": len(activity.request_times),
                    "max_requests": config.max_requests,
                    "time_window": config.time_window
                }
            )
            
            return False, f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ {block_duration} —Å–µ–∫—É–Ω–¥", {
                "violation_count": activity.violation_count,
                "risk_level": activity.risk_level.value,
                "block_duration": block_duration,
                "suspicious_patterns": suspicious_patterns
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ burst –ª–∏–º–∏—Ç–∞ (–±—ã—Å—Ç—Ä—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
        recent_requests = [req_time for req_time in activity.request_times 
                          if current_time - req_time <= 10]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
        
        if len(recent_requests) >= config.burst_limit:
            # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ burst –ª–∏–º–∏—Ç–∞
            activity.violation_count += 1
            
            self._log_security_event(
                user_id=user_id,
                event_type="burst_limit_exceeded",
                severity="medium",
                details={
                    "limit_type": limit_type.value,
                    "burst_count": len(recent_requests),
                    "burst_limit": config.burst_limit
                }
            )
            
            return False, "‚ö° –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.", {
                "burst_count": len(recent_requests),
                "burst_limit": config.burst_limit
            }
        
        # –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        activity.request_times.append(current_time)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        self.global_limits[limit_type].append(current_time)
        
        return True, "‚úÖ –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω", {
            "requests_remaining": config.max_requests - len(activity.request_times),
            "time_window": config.time_window,
            "risk_level": activity.risk_level.value
        }
    
    async def check_global_rate_limit(self, limit_type: RateLimitType) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        current_time = time.time()
        config = self.configs.get(limit_type, self.DEFAULT_CONFIGS[limit_type])
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        while (self.global_limits[limit_type] and 
               self.global_limits[limit_type][0] < current_time - config.time_window):
            self.global_limits[limit_type].popleft()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ (–≤ 10 —Ä–∞–∑ –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ)
        global_limit = config.max_requests * 10
        if len(self.global_limits[limit_type]) >= global_limit:
            return False, f"üö´ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç {limit_type.value} –ø—Ä–µ–≤—ã—à–µ–Ω"
        
        return True, "‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –≤ –Ω–æ—Ä–º–µ"
    
    def get_user_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_activities:
            return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        activity = self.user_activities[user_id]
        current_time = time.time()
        
        return {
            "user_id": user_id,
            "total_requests": activity.total_requests,
            "violation_count": activity.violation_count,
            "risk_level": activity.risk_level.value,
            "suspicious_patterns": activity.suspicious_patterns,
            "is_blocked": user_id in self.blocked_users,
            "blocked_until": self.blocked_users.get(user_id),
            "last_violation": activity.last_violation,
            "first_seen": activity.first_seen,
            "recent_requests_count": len([
                req_time for req_time in activity.request_times
                if current_time - req_time <= 300  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            ])
        }
    
    def get_security_events(self, limit: int = 50) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        recent_events = sorted(
            self.security_events, 
            key=lambda x: x.timestamp, 
            reverse=True
        )[:limit]
        
        return [
            {
                "timestamp": event.timestamp,
                "datetime": datetime.fromtimestamp(event.timestamp).isoformat(),
                "user_id": event.user_id,
                "event_type": event.event_type,
                "severity": event.severity,
                "details": event.details,
                "ip_address": event.ip_address
            }
            for event in recent_events
        ]
    
    def get_system_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        current_time = time.time()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        user_stats = {
            "total_users": len(self.user_activities),
            "blocked_users": len(self.blocked_users),
            "risk_levels": defaultdict(int)
        }
        
        for activity in self.user_activities.values():
            user_stats["risk_levels"][activity.risk_level.value] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
        request_stats = {}
        for limit_type in RateLimitType:
            recent_requests = [
                req_time for req_time in self.global_limits[limit_type]
                if current_time - req_time <= 300  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            ]
            request_stats[limit_type.value] = len(recent_requests)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_stats = {
            "total_events": len(self.security_events),
            "events_by_severity": defaultdict(int),
            "recent_events": len([
                event for event in self.security_events
                if current_time - event.timestamp <= 3600  # –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            ])
        }
        
        for event in self.security_events:
            security_stats["events_by_severity"][event.severity] += 1
        
        return {
            "user_stats": dict(user_stats),
            "request_stats": request_stats,
            "security_stats": dict(security_stats),
            "system_uptime": current_time - min(
                (activity.first_seen for activity in self.user_activities.values()),
                default=current_time
            )
        }
    
    def update_config(self, limit_type: RateLimitType, config: RateLimitConfig):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        self.configs[limit_type] = config
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è rate limit –¥–ª—è {limit_type.value}")
    
    def unblock_user(self, user_id: int) -> bool:
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.blocked_users:
            del self.blocked_users[user_id]
            logger.info(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return True
        return False
    
    def reset_user_violations(self, user_id: int) -> bool:
        """–°–±—Ä–æ—Å –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_activities:
            activity = self.user_activities[user_id]
            activity.violation_count = 0
            activity.suspicious_patterns.clear()
            activity.risk_level = UserRiskLevel.LOW
            logger.info(f"üîÑ –°–±—Ä–æ—à–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        return False
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        if self._cleanup_task and not self._cleanup_task.done():
            self._cleanup_task.cancel()
            try:
                await self._cleanup_task
            except asyncio.CancelledError:
                pass
        
        logger.info("üõ°Ô∏è Rate Limiter –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä rate limiter
rate_limiter = RateLimiter()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def rate_limit(limit_type: RateLimitType, custom_config: Optional[RateLimitConfig] = None):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π"""
    def decorator(func):
        async def wrapper(*args, **kwargs):
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            user_id = None
            if args and hasattr(args[0], 'effective_user'):
                user_id = args[0].effective_user.id
            elif 'update' in kwargs and hasattr(kwargs['update'], 'effective_user'):
                user_id = kwargs['update'].effective_user.id
            
            if user_id is None:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id –¥–ª—è rate limiting")
                return await func(*args, **kwargs)
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if custom_config:
                rate_limiter.update_config(limit_type, custom_config)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
            allowed, message, metadata = await rate_limiter.check_rate_limit(
                user_id, limit_type
            )
            
            if not allowed:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                if args and hasattr(args[0], 'message'):
                    await args[0].message.reply_text(message)
                elif args and hasattr(args[0], 'callback_query'):
                    await args[0].callback_query.answer(message, show_alert=True)
                
                return None
            
            return await func(*args, **kwargs)
        return wrapper
    return decorator

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def check_user_rate_limit(user_id: int, limit_type: RateLimitType) -> Tuple[bool, str, Dict[str, Any]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await rate_limiter.check_rate_limit(user_id, limit_type)

async def check_global_rate_limit(limit_type: RateLimitType) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    return await rate_limiter.check_global_rate_limit(limit_type)

def get_user_security_stats(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return rate_limiter.get_user_stats(user_id)

def get_system_security_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    return rate_limiter.get_system_stats()

def get_recent_security_events(limit: int = 50) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    return rate_limiter.get_security_events(limit)
