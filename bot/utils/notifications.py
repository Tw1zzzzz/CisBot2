"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è CIS FINDER Bot
–°–æ–∑–¥–∞–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π Twizz_Project
"""
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from telegram import Bot, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.error import TelegramError
from bot.database.operations import DatabaseManager

logger = logging.getLogger(__name__)

class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def __init__(self, bot: Bot, db_manager: DatabaseManager):
        self.bot = bot
        self.db = db_manager
        self.last_notification_cache = {}  # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
    
    async def send_like_notification(self, liked_user_id: int, liker_user_id: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–∞–π–∫–µ
        
        Args:
            liked_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –ª–∞–π–∫–Ω—É–ª–∏
            liker_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            if not await self._should_send_notification(liked_user_id, 'new_like'):
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –¥–ª—è {liked_user_id} –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º (–Ω–µ –±–æ–ª–µ–µ 1 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Å)
            cache_key = f"like_{liked_user_id}_{liker_user_id}"
            if await self._is_spam_protection_active(cache_key, timedelta(hours=1)):
                logger.info(f"–°–ø–∞–º-–∑–∞—â–∏—Ç–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ {cache_key} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            liker_profile = await self.db.get_profile(liker_user_id)
            if not liker_profile:
                logger.error(f"–ü—Ä–æ—Ñ–∏–ª—å –ª–∞–π–∫–µ—Ä–∞ {liker_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"‚ù§Ô∏è <b>–ù–æ–≤—ã–π –ª–∞–π–∫!</b>\n\n"
                f"–í–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫: <b>{liker_profile.game_nickname}</b>\n"
                f"–†–∞–Ω–≥: {liker_profile.faceit_elo} ELO\n"
                f"–†–æ–ª—å: {liker_profile.role}\n\n"
                f"üí° –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ª–∞–π–∫ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [
                    InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫ –≤ –æ—Ç–≤–µ—Ç", callback_data=f"reply_like_{liker_user_id}"),
                    InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_like_{liker_user_id}")
                ],
                [InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"view_profile_{liker_user_id}")],
                [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –ª–∞–π–∫–æ–≤", callback_data="likes_history")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=liked_user_id,
                text=message,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
            self.last_notification_cache[cache_key] = datetime.now()
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {liked_user_id} –æ—Ç {liker_user_id}")
            return True
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ {liked_user_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ {liked_user_id}: {e}")
            return False
    
    async def send_match_notification(self, user1_id: int, user2_id: int) -> tuple[bool, bool]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ
        
        Args:
            user1_id: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user2_id: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            tuple[bool, bool]: (—É—Å–ø–µ—Ö_–¥–ª—è_user1, —É—Å–ø–µ—Ö_–¥–ª—è_user2)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            profile1 = await self.db.get_profile(user1_id)
            profile2 = await self.db.get_profile(user2_id)
            
            if not profile1 or not profile2:
                logger.error(f"–ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {user1_id}={bool(profile1)}, {user2_id}={bool(profile2)}")
                return False, False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            success1 = await self._send_match_notification_to_user(
                user1_id, profile2, user2_id
            )
            success2 = await self._send_match_notification_to_user(
                user2_id, profile1, user1_id
            )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {user1_id}={success1}, {user2_id}={success2}")
            return success1, success2
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–∞—Ç—á–µ {user1_id}<->{user2_id}: {e}")
            return False, False
    
    async def _send_match_notification_to_user(self, recipient_id: int, partner_profile, partner_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if not await self._should_send_notification(recipient_id, 'new_match'):
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ –¥–ª—è {recipient_id} –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∞–º-–∑–∞—â–∏—Ç—É (–Ω–µ –±–æ–ª–µ–µ 1 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ –≤ 10 –º–∏–Ω—É—Ç)
            cache_key = f"match_{recipient_id}_{partner_id}"
            if await self._is_spam_protection_active(cache_key, timedelta(minutes=10)):
                logger.info(f"–°–ø–∞–º-–∑–∞—â–∏—Ç–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ {cache_key} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üéâ <b>–ù–û–í–´–ô –¢–ò–ú–ú–ï–ô–¢!</b>\n\n"
                f"–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å –∏–≥—Ä–æ–∫–æ–º:\n"
                f"<b>{partner_profile.game_nickname}</b>\n\n"
                f"üéØ –†–∞–Ω–≥: {partner_profile.faceit_elo} ELO\n"
                f"üéÆ –†–æ–ª—å: {partner_profile.role}\n"
                f"üó∫Ô∏è –ö–∞—Ä—Ç—ã: {', '.join(partner_profile.favorite_maps[:3])}\n\n"
                f"üí¨ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º!\n"
                f"üë• –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª '–¢–∏–º–º–µ–π—Ç—ã' –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=recipient_id,
                text=message,
                parse_mode='HTML'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.last_notification_cache[cache_key] = datetime.now()
            
            return True
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ {recipient_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ {recipient_id}: {e}")
            return False
    
    async def _should_send_notification(self, user_id: int, notification_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ('new_like', 'new_match', etc.)
            
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_settings = await self.db.get_user_settings(user_id)
            if not user_settings:
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —Å–æ–∑–¥–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                await self.db.update_user_settings(user_id)
                user_settings = await self.db.get_user_settings(user_id)
            
            if not user_settings:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {user_id}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if not user_settings.notifications_enabled:
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notification_settings = user_settings.get_notification_settings()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if not notification_settings.get(notification_type, False):
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ {notification_type} –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è {user_id}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
            if await self._is_quiet_hours(user_id, notification_settings):
                logger.info(f"–¢–∏—Ö–∏–µ —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {user_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            return notification_type in ['new_like', 'new_match']
    
    async def _is_quiet_hours(self, user_id: int, notification_settings: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω—ã –ª–∏ —Ç–∏—Ö–∏–µ —á–∞—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not notification_settings.get('quiet_hours_enabled', False):
                return False
            
            now = datetime.now()
            timezone_offset = notification_settings.get('timezone_offset', 3)  # UTC+3 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_time = now + timedelta(hours=timezone_offset - 3)  # –°–µ—Ä–≤–µ—Ä –≤ –ú–°–ö (UTC+3)
            user_hour = user_time.hour
            
            quiet_start = notification_settings.get('quiet_hours_start', 23)
            quiet_end = notification_settings.get('quiet_hours_end', 8)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã (–º–æ–≥—É—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å)
            if quiet_start <= quiet_end:
                # –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π: 23:00 - 8:00
                return quiet_start <= user_hour <= quiet_end
            else:
                # –ß–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å: 8:00 - 23:00 (–∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É)
                return not (quiet_end < user_hour < quiet_start)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤ –¥–ª—è {user_id}: {e}")
            return False
    
    async def _is_spam_protection_active(self, cache_key: str, cooldown: timedelta) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        last_time = self.last_notification_cache.get(cache_key)
        if not last_time:
            return False
        
        return datetime.now() - last_time < cooldown
    
    def clear_spam_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à —Å–ø–∞–º-–∑–∞—â–∏—Ç—ã (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏)"""
        cutoff = datetime.now() - timedelta(hours=24)
        expired_keys = [
            key for key, timestamp in self.last_notification_cache.items()
            if timestamp < cutoff
        ]
        for key in expired_keys:
            del self.last_notification_cache[key]
        
        if expired_keys:
            logger.info(f"–û—á–∏—â–µ–Ω–æ {len(expired_keys)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
