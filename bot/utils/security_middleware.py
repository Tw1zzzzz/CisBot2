"""
üõ°Ô∏è Security Middleware –¥–ª—è CIS FINDER Bot
–°–æ–∑–¥–∞–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π Twizz_Project

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é rate limiting —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
- –ó–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞ –≤ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import asyncio
import logging
import time
from typing import Dict, Any, Optional, Callable, Awaitable
from telegram import Update, CallbackQuery, Message
from telegram.ext import ContextTypes
from telegram.error import TelegramError

from .rate_limiter import (
    rate_limiter, RateLimitType, check_user_rate_limit, 
    get_user_security_stats, get_recent_security_events
)

logger = logging.getLogger(__name__)

class SecurityMiddleware:
    """Middleware –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    def __init__(self):
        self.suspicious_activities: Dict[int, Dict[str, Any]] = {}
        self.blocked_patterns: Dict[str, float] = {}  # pattern -> block_until
        self.security_logger = logging.getLogger('bot.security')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self._setup_security_logging()
        
        logger.info("üõ°Ô∏è Security Middleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_security_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        import os
        os.makedirs('logs', exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π handler –¥–ª—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_handler = logging.FileHandler('logs/security.log', encoding='utf-8')
        security_formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        security_handler.setFormatter(security_formatter)
        self.security_logger.addHandler(security_handler)
        self.security_logger.setLevel(logging.INFO)
    
    async def protect_command(self, handler_func: Callable) -> Callable:
        """–ó–∞—â–∏—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç —Å–ø–∞–º–∞ –∏ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π"""
        async def protected_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            command = update.message.text.split()[0] if update.message else "unknown"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –∫–æ–º–∞–Ω–¥
            allowed, message, metadata = await check_user_rate_limit(
                user_id, RateLimitType.COMMAND
            )
            
            if not allowed:
                self.security_logger.warning(
                    f"üö´ Command rate limit exceeded: user {user_id}, command {command}, "
                    f"violations: {metadata.get('violation_count', 0)}, "
                    f"risk_level: {metadata.get('risk_level', 'unknown')}"
                )
                
                await update.message.reply_text(
                    f"üö´ {message}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞.",
                    parse_mode='HTML'
                )
                return
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if await self._check_suspicious_command_activity(user_id, command, update):
                return
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            try:
                return await handler_func(update, context)
            except Exception as e:
                self.security_logger.error(
                    f"‚ùå Error in protected command {command} for user {user_id}: {e}"
                )
                raise
        
        return protected_handler
    
    async def protect_callback(self, handler_func: Callable) -> Callable:
        """–ó–∞—â–∏—Ç–∞ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ç —Å–ø–∞–º–∞"""
        async def protected_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
            query = update.callback_query
            user_id = query.from_user.id
            callback_data = query.data
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è callback'–æ–≤
            allowed, message, metadata = await check_user_rate_limit(
                user_id, RateLimitType.CALLBACK
            )
            
            if not allowed:
                self.security_logger.warning(
                    f"üö´ Callback rate limit exceeded: user {user_id}, "
                    f"callback: {callback_data}, violations: {metadata.get('violation_count', 0)}"
                )
                
                await query.answer(
                    f"üö´ {message}",
                    show_alert=True
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ callback –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if await self._check_suspicious_callback_activity(user_id, callback_data, query):
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è callback'—ã
            if await self._check_duplicate_callback(user_id, callback_data, query):
                return
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            try:
                return await handler_func(update, context)
            except Exception as e:
                self.security_logger.error(
                    f"‚ùå Error in protected callback {callback_data} for user {user_id}: {e}"
                )
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                try:
                    await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
                except:
                    pass
                raise
        
        return protected_callback
    
    async def protect_message(self, handler_func: Callable) -> Callable:
        """–ó–∞—â–∏—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        async def protected_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            message_text = update.message.text if update.message else ""
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
            allowed, message, metadata = await check_user_rate_limit(
                user_id, RateLimitType.MESSAGE
            )
            
            if not allowed:
                self.security_logger.warning(
                    f"üö´ Message rate limit exceeded: user {user_id}, "
                    f"message length: {len(message_text)}"
                )
                
                await update.message.reply_text(
                    f"üö´ {message}\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.",
                    parse_mode='HTML'
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if await self._check_suspicious_message_content(user_id, message_text, update.message):
                return
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            try:
                return await handler_func(update, context)
            except Exception as e:
                self.security_logger.error(
                    f"‚ùå Error in protected message handler for user {user_id}: {e}"
                )
                raise
        
        return protected_message
    
    async def _check_suspicious_command_activity(self, user_id: int, command: str, 
                                               update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥"""
        current_time = time.time()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.suspicious_activities:
            self.suspicious_activities[user_id] = {
                'commands': [],
                'last_command_time': 0,
                'command_frequency': 0,
                'suspicious_score': 0
            }
        
        user_data = self.suspicious_activities[user_id]
        
        # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã –∫–æ–º–∞–Ω–¥
        time_since_last = current_time - user_data['last_command_time']
        if time_since_last < 1:  # –ú–µ–Ω–µ–µ —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
            user_data['suspicious_score'] += 10
            user_data['command_frequency'] += 1
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥
        recent_commands = [
            cmd for cmd, timestamp in user_data['commands']
            if current_time - timestamp <= 60  # –ø–æ—Å–ª–µ–¥–Ω—è—è –º–∏–Ω—É—Ç–∞
        ]
        
        if len(recent_commands) >= 5:  # 5+ –∫–æ–º–∞–Ω–¥ –∑–∞ –º–∏–Ω—É—Ç—É
            user_data['suspicious_score'] += 15
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        if user_data['suspicious_score'] >= 25:
            self.security_logger.warning(
                f"ü§ñ Suspicious automated behavior detected: user {user_id}, "
                f"score: {user_data['suspicious_score']}, command: {command}"
            )
            
            await update.message.reply_text(
                "ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É—é.",
                parse_mode='HTML'
            )
            return True
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        user_data['commands'].append((command, current_time))
        user_data['last_command_time'] = current_time
        user_data['commands'] = user_data['commands'][-20:]  # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
        
        return False
    
    async def _check_suspicious_callback_activity(self, user_id: int, callback_data: str, 
                                                query: CallbackQuery) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å callback'–æ–≤"""
        current_time = time.time()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.suspicious_activities:
            self.suspicious_activities[user_id] = {
                'callbacks': [],
                'last_callback_time': 0,
                'callback_frequency': 0,
                'suspicious_score': 0
            }
        
        user_data = self.suspicious_activities[user_id]
        
        # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã callback'–æ–≤
        time_since_last = current_time - user_data['last_callback_time']
        if time_since_last < 0.5:  # –ú–µ–Ω–µ–µ 0.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É callback'–∞–º–∏
            user_data['suspicious_score'] += 15
            user_data['callback_frequency'] += 1
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è callback'–æ–≤
        recent_callbacks = [
            cb for cb, timestamp in user_data['callbacks']
            if current_time - timestamp <= 30  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
        ]
        
        if len(recent_callbacks) >= 10:  # 10+ callback'–æ–≤ –∑–∞ 30 —Å–µ–∫—É–Ω–¥
            user_data['suspicious_score'] += 20
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        if user_data['suspicious_score'] >= 30:
            self.security_logger.warning(
                f"ü§ñ Suspicious callback behavior detected: user {user_id}, "
                f"score: {user_data['suspicious_score']}, callback: {callback_data}"
            )
            
            await query.answer(
                "ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É—é.",
                show_alert=True
            )
            return True
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        user_data['callbacks'].append((callback_data, current_time))
        user_data['last_callback_time'] = current_time
        user_data['callbacks'] = user_data['callbacks'][-50:]  # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50
        
        return False
    
    async def _check_duplicate_callback(self, user_id: int, callback_data: str, 
                                      query: CallbackQuery) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è callback'—ã"""
        current_time = time.time()
        
        if user_id not in self.suspicious_activities:
            self.suspicious_activities[user_id] = {
                'recent_callbacks': [],
                'duplicate_count': 0
            }
        
        user_data = self.suspicious_activities[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è callback'—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
        recent_duplicates = [
            cb for cb, timestamp in user_data.get('recent_callbacks', [])
            if cb == callback_data and current_time - timestamp <= 5
        ]
        
        if len(recent_duplicates) >= 3:  # 3+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö callback'–∞ –∑–∞ 5 —Å–µ–∫—É–Ω–¥
            user_data['duplicate_count'] += 1
            
            self.security_logger.warning(
                f"üîÑ Duplicate callback detected: user {user_id}, "
                f"callback: {callback_data}, duplicates: {len(recent_duplicates)}"
            )
            
            await query.answer(
                "üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∑–∞–ø—Ä–æ—Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ.",
                show_alert=True
            )
            return True
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö callback'–æ–≤
        if 'recent_callbacks' not in user_data:
            user_data['recent_callbacks'] = []
        
        user_data['recent_callbacks'].append((callback_data, current_time))
        user_data['recent_callbacks'] = [
            (cb, ts) for cb, ts in user_data['recent_callbacks']
            if current_time - ts <= 10  # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
        ]
        
        return False
    
    async def _check_suspicious_message_content(self, user_id: int, message_text: str, 
                                              message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not message_text:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã
        spam_patterns = [
            r'(.)\1{10,}',  # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
            r'[^\w\s]{20,}',  # –ú–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            r'http[s]?://[^\s]{50,}',  # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ URL
        ]
        
        import re
        for pattern in spam_patterns:
            if re.search(pattern, message_text):
                self.security_logger.warning(
                    f"üìß Suspicious message content detected: user {user_id}, "
                    f"pattern: {pattern}, message length: {len(message_text)}"
                )
                
                await message.reply_text(
                    "üìß –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    parse_mode='HTML'
                )
                return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message_text) > 2000:
            self.security_logger.warning(
                f"üìè Oversized message detected: user {user_id}, "
                f"length: {len(message_text)}"
            )
            
            await message.reply_text(
                "üìè –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤.",
                parse_mode='HTML'
            )
            return True
        
        return False
    
    def get_user_security_report(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ rate limiter
        rate_limiter_stats = get_user_security_stats(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ middleware
        middleware_data = self.suspicious_activities.get(user_id, {})
        
        return {
            "user_id": user_id,
            "rate_limiter_stats": rate_limiter_stats,
            "middleware_data": middleware_data,
            "timestamp": time.time()
        }
    
    def get_security_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return {
            "monitored_users": len(self.suspicious_activities),
            "blocked_patterns": len(self.blocked_patterns),
            "recent_security_events": get_recent_security_events(20),
            "timestamp": time.time()
        }
    
    def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        current_time = time.time()
        cleanup_threshold = current_time - 3600  # 1 —á–∞—Å
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_to_remove = []
        for user_id, data in self.suspicious_activities.items():
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
            if 'commands' in data:
                data['commands'] = [
                    (cmd, ts) for cmd, ts in data['commands']
                    if ts > cleanup_threshold
                ]
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö callback'–æ–≤
            if 'callbacks' in data:
                data['callbacks'] = [
                    (cb, ts) for cb, ts in data['callbacks']
                    if ts > cleanup_threshold
                ]
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö callback'–æ–≤
            if 'recent_callbacks' in data:
                data['recent_callbacks'] = [
                    (cb, ts) for cb, ts in data['recent_callbacks']
                    if ts > cleanup_threshold
                ]
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (not data.get('commands') and 
                not data.get('callbacks') and 
                not data.get('recent_callbacks')):
                users_to_remove.append(user_id)
        
        for user_id in users_to_remove:
            del self.suspicious_activities[user_id]
        
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        expired_patterns = [
            pattern for pattern, block_until in self.blocked_patterns.items()
            if block_until < current_time
        ]
        for pattern in expired_patterns:
            del self.blocked_patterns[pattern]
        
        if users_to_remove or expired_patterns:
            logger.info(
                f"üßπ Security middleware cleanup: removed {len(users_to_remove)} users, "
                f"expired {len(expired_patterns)} pattern blocks"
            )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä security middleware
security_middleware = SecurityMiddleware()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def protect_command(handler_func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–æ–º–∞–Ω–¥"""
    return security_middleware.protect_command(handler_func)

def protect_callback(handler_func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã callback'–æ–≤"""
    return security_middleware.protect_callback(handler_func)

def protect_message(handler_func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return security_middleware.protect_message(handler_func)

def get_user_security_report(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return security_middleware.get_user_security_report(user_id)

def get_security_summary() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    return security_middleware.get_security_summary()
