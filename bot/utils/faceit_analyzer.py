"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Faceit Analyser API –¥–ª—è CIS FINDER Bot
–°–æ–∑–¥–∞–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π Twizz_Project
"""
import aiohttp
import asyncio
import json
import logging
from typing import Optional, Dict, Any, Tuple
from datetime import datetime, timedelta
import re
import io
import base64

from bot.config import Config
from bot.utils.cs2_data import extract_faceit_nickname

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º logger –¥–æ –∏–º–ø–æ—Ä—Ç–æ–≤
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
# –ò–º–ø–æ—Ä—Ç—ã –¥–∏–∞–≥—Ä–∞–º–º –æ—Ç–∫–ª—é—á–µ–Ω—ã

try:
    # Scipy –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏–∫–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤
    from scipy.signal import find_peaks
    from scipy import stats
    SCIPY_AVAILABLE = True
    
except ImportError:
    SCIPY_AVAILABLE = False
    logger.warning("scipy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

try:
    # Pandas –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    import pandas as pd
    PANDAS_AVAILABLE = True
    
except ImportError:
    PANDAS_AVAILABLE = False
    logger.warning("pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

class FaceitAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Faceit Analyser API"""
    
    def __init__(self):
        self.api_key = Config.FACEIT_ANALYSER_API_KEY
        self.base_url = Config.FACEIT_ANALYSER_BASE_URL
        self.cache_ttl = Config.FACEIT_ANALYSER_CACHE_TTL
        self.cache = {}  # –ü—Ä–æ—Å—Ç–æ–π –∫–µ—à –≤ –ø–∞–º—è—Ç–∏
        
        if not self.api_key:
            logger.warning("FACEIT_ANALYSER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    def _is_cache_valid(self, cache_entry: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not cache_entry or 'timestamp' not in cache_entry:
            return False
        
        cache_time = cache_entry['timestamp']
        return datetime.now() - cache_time < timedelta(seconds=self.cache_ttl)
    
    def _get_player_id_from_faceit_url(self, faceit_url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç player ID –∏–∑ Faceit URL"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∏–∑ URL
            nickname = extract_faceit_nickname(faceit_url)
            if not nickname:
                logger.debug(f"URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º Faceit: {faceit_url}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∏–∫–Ω–µ–π–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–º/–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
            if nickname.lower() in ['bottest', 'test', 'example', 'demo']:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞: {nickname}")
                return None
            
            # –í Faceit Analyser API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è nickname –∫–∞–∫ player ID
            return nickname
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è player ID –∏–∑ {faceit_url}: {e}")
            return None
    
    async def _make_api_request(self, endpoint: str, player_id: str) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Faceit Analyser API"""
        if not self.api_key:
            logger.warning("API –∫–ª—é—á Faceit Analyser –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None
        
        url = f"{self.base_url}{endpoint}/{player_id}"
        params = {"key": self.api_key}
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        logger.debug(f"–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ {endpoint} –¥–ª—è {player_id}")
                        return data
                    elif response.status == 404:
                        logger.warning(f"–ò–≥—Ä–æ–∫ {player_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Faceit Analyser")
                        return None
                    elif response.status == 401:
                        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –¥–ª—è Faceit Analyser")
                        return None
                    elif response.status == 429:
                        logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Faceit Analyser API")
                        return None
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ API Faceit Analyser: {response.status}")
                        return None
                        
        except asyncio.TimeoutError:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Faceit Analyser –¥–ª—è {player_id}")
            return None
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Faceit Analyser –¥–ª—è {player_id}: {e}")
            return None
    
    async def get_player_overview(self, faceit_url: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ"""
        player_id = self._get_player_id_from_faceit_url(faceit_url)
        if not player_id:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cache_key = f"overview_{player_id}"
        if cache_key in self.cache and self._is_cache_valid(self.cache[cache_key]):
            logger.debug(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º cached overview –¥–ª—è {player_id}")
            return self.cache[cache_key]['data']
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await self._make_api_request("overview", player_id)
        if data:
            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.cache[cache_key] = {
                'data': data,
                'timestamp': datetime.now()
            }
        
        return data
    
    async def get_player_stats(self, faceit_url: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞"""
        player_id = self._get_player_id_from_faceit_url(faceit_url)
        if not player_id:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cache_key = f"stats_{player_id}"
        if cache_key in self.cache and self._is_cache_valid(self.cache[cache_key]):
            logger.debug(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º cached stats –¥–ª—è {player_id}")
            return self.cache[cache_key]['data']
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await self._make_api_request("stats", player_id)
        if data:
            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.cache[cache_key] = {
                'data': data,
                'timestamp': datetime.now()
            }
        
        return data
    
    # get_player_graphs —É–¥–∞–ª–µ–Ω–∞ - –¥–∏–∞–≥—Ä–∞–º–º—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
    
    def create_elo_diagram(self, graph_data: Dict[str, Any]) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º –æ—Ç–∫–ª—é—á–µ–Ω–æ"""
        return None
    
    def _old_create_elo_diagram_disabled(self, graph_data: Dict[str, Any]) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É ELO –∏–∑ –¥–∞–Ω–Ω—ã—Ö API"""
        try:
            if not graph_data or 'graph_data' not in graph_data:
                return None
            
            elo_data = graph_data['graph_data'].get('elo')
            if not elo_data or 'values' not in elo_data:
                return None
            
            values = elo_data['values']
            dates = elo_data.get('dates', [])
            
            if not values or len(values) == 0:
                return None
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
            recent_values = values[-8:] if len(values) >= 8 else values
            recent_dates = dates[-8:] if dates and len(dates) >= 8 else []
            
            if not recent_values:
                return None
            
            # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            min_elo = min(recent_values)
            max_elo = max(recent_values)
            current_elo = recent_values[-1]
            
            # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
            if max_elo - min_elo < 100:
                padding = 50
                min_elo -= padding
                max_elo += padding
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            diagram_lines = []
            diagram_lines.append("üìä <b>–ì—Ä–∞—Ñ–∏–∫ ELO (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏):</b>")
            diagram_lines.append("")
            
            # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
            height = 8  # –í—ã—Å–æ—Ç–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
            width = len(recent_values)
            
            # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã
            grid = []
            for _ in range(height + 2):  # +2 –¥–ª—è –æ—Å–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏–π
                grid.append([" "] * (width * 3 + 5))  # *3 –¥–ª—è —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
            for i, elo in enumerate(recent_values):
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç–æ–ª–±—Ü–∞ (0-height)
                if max_elo > min_elo:
                    bar_height = int(((elo - min_elo) / (max_elo - min_elo)) * height)
                else:
                    bar_height = height // 2
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç/—Å–∏–º–≤–æ–ª —Å—Ç–æ–ª–±—Ü–∞
                if i == len(recent_values) - 1:  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    bar_char = "üü¶"  # –°–∏–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ
                elif i > 0:
                    if recent_values[i] > recent_values[i-1]:
                        bar_char = "üü©"  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–æ—Å—Ç–∞
                    elif recent_values[i] < recent_values[i-1]:
                        bar_char = "üü•"  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–∞–¥–µ–Ω–∏—è
                    else:
                        bar_char = "‚¨ú"  # –ë–µ–ª—ã–π –¥–ª—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                else:
                    bar_char = "‚¨ú"
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
                col_pos = i * 3 + 2
                for row in range(max(0, height - bar_height), height):
                    if row < len(grid) - 2:
                        grid[row][col_pos] = bar_char
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ ELO –ø–æ–¥ —Å—Ç–æ–ª–±—Ü–æ–º
                elo_str = str(elo)
                for j, char in enumerate(elo_str):
                    if col_pos + j < len(grid[height]):
                        grid[height][col_pos + j] = char
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –º–∞—Ç—á–∞
                match_num = f"#{i+1}"
                for j, char in enumerate(match_num):
                    if col_pos + j < len(grid[height + 1]):
                        grid[height + 1][col_pos + j] = char
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ—Ç–∫—É –≤ —Å—Ç—Ä–æ–∫–∏
            for row in grid:
                line = "".join(row).rstrip()
                if line.strip():  # –¢–æ–ª—å–∫–æ –Ω–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    diagram_lines.append(f"<code>{line}</code>")
            
            diagram_lines.append("")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            diagram_lines.append(f"üéØ <b>–¢–µ–∫—É—â–∏–π ELO:</b> {current_elo}")
            
            # –ü–∏–∫ –∏ –º–∏–Ω–∏–º—É–º
            peak_elo = max(values)
            lowest_elo = min(values)
            diagram_lines.append(f"üìà <b>–ü–∏–∫:</b> {peak_elo} | üìâ <b>–ú–∏–Ω–∏–º—É–º:</b> {lowest_elo}")
            
            # –¢—Ä–µ–Ω–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏
            if len(recent_values) >= 2:
                trend = recent_values[-1] - recent_values[0]
                if trend > 0:
                    trend_emoji = "üöÄ"
                    trend_text = f"+{trend}"
                    trend_desc = "–†–∞—Å—Ç–µ—Ç"
                elif trend < 0:
                    trend_emoji = "üìâ"
                    trend_text = str(trend)
                    trend_desc = "–ü–∞–¥–∞–µ—Ç"
                else:
                    trend_emoji = "‚û°Ô∏è"
                    trend_text = "¬±0"
                    trend_desc = "–°—Ç–∞–±–∏–ª–µ–Ω"
                
                diagram_lines.append(f"{trend_emoji} <b>–¢—Ä–µ–Ω–¥:</b> {trend_text} ({trend_desc})")
            
            # –°—Ä–µ–¥–Ω–∏–π ELO –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏
            avg_elo = sum(recent_values) // len(recent_values)
            diagram_lines.append(f"üìä <b>–°—Ä–µ–¥–Ω–∏–π ELO:</b> {avg_elo}")
            
            return "\n".join(diagram_lines)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ELO –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
            return None
    
    def create_interactive_elo_graph(self, graph_data: Dict[str, Any]) -> Optional[io.BytesIO]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º –æ—Ç–∫–ª—é—á–µ–Ω–æ"""
        return None
    
    def _old_create_interactive_elo_graph_disabled(self, graph_data: Dict[str, Any]) -> Optional[io.BytesIO]:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É ELO —Å Plotly - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        if not PLOTLY_AVAILABLE:
            logger.warning("Plotly –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º")
            return self.create_elo_graph_image(graph_data)  # Fallback –∫ matplotlib
        
        try:
            if not graph_data or 'graph_data' not in graph_data:
                return None
            
            elo_data = graph_data['graph_data'].get('elo')
            if not elo_data or 'values' not in elo_data:
                return None
            
            values = elo_data['values']
            dates = elo_data.get('dates', [])
            
            if not values or len(values) == 0:
                return None
            
            # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–¥–æ 30 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π)
            recent_values = values[-30:] if len(values) >= 30 else values
            recent_dates = dates[-30:] if dates and len(dates) >= 30 else []
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if PANDAS_AVAILABLE and recent_dates:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                try:
                    df = pd.DataFrame({
                        'match': range(1, len(recent_values) + 1),
                        'elo': recent_values,
                        'date': pd.to_datetime(recent_dates) if recent_dates else None
                    })
                    x_values = df['date'] if recent_dates else df['match']
                    x_title = "–î–∞—Ç–∞ –º–∞—Ç—á–∞" if recent_dates else "–ù–æ–º–µ—Ä –º–∞—Ç—á–∞"
                except:
                    # Fallback –µ—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
                    df = pd.DataFrame({
                        'match': range(1, len(recent_values) + 1),
                        'elo': recent_values
                    })
                    x_values = df['match']
                    x_title = "–ù–æ–º–µ—Ä –º–∞—Ç—á–∞"
            else:
                # –ë–µ–∑ pandas - –ø—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
                x_values = list(range(1, len(recent_values) + 1))
                x_title = "–ù–æ–º–µ—Ä –º–∞—Ç—á–∞"
            
            # –°–æ–∑–¥–∞–µ–º figure
            fig = go.Figure()
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –¥–µ—Ç–µ–∫—Ü–∏—è –ø–∏–∫–æ–≤
            peaks_indices = []
            valleys_indices = []
            
            if SCIPY_AVAILABLE and len(recent_values) >= 5:
                # –î–µ—Ç–µ–∫—Ü–∏—è –ø–∏–∫–æ–≤ (–≤—ã—Å–æ–∫–∏–µ —Ç–æ—á–∫–∏)
                peaks, _ = find_peaks(recent_values, distance=2)
                # –î–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–æ–≤ (–Ω–∏–∑–∫–∏–µ —Ç–æ—á–∫–∏)
                valleys, _ = find_peaks([-x for x in recent_values], distance=2)
                
                peaks_indices = peaks.tolist()
                valleys_indices = valleys.tolist()
            
            # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
            if PANDAS_AVAILABLE and len(recent_values) >= 5:
                df = pd.DataFrame({'elo': recent_values})
                rolling_mean = df['elo'].rolling(window=min(5, len(recent_values)//2), center=True).mean()
            else:
                # –ü—Ä–æ—Å—Ç–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –±–µ–∑ pandas
                window = min(5, len(recent_values)//2)
                rolling_mean = []
                for i in range(len(recent_values)):
                    start_idx = max(0, i - window//2)
                    end_idx = min(len(recent_values), i + window//2 + 1)
                    rolling_mean.append(sum(recent_values[start_idx:end_idx]) / (end_idx - start_idx))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–æ—á–µ–∫
            colors = []
            for i, elo in enumerate(recent_values):
                if i in peaks_indices:
                    colors.append('#FFD700')  # –ó–æ–ª–æ—Ç–æ–π –¥–ª—è –ø–∏–∫–æ–≤
                elif i in valleys_indices:
                    colors.append('#FF4444')  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø—Ä–æ–≤–∞–ª–æ–≤
                elif i == len(recent_values) - 1:
                    colors.append('#00E5FF')  # –Ø—Ä–∫–∏–π –≥–æ–ª—É–±–æ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ
                elif i > 0:
                    if recent_values[i] > recent_values[i-1]:
                        colors.append('#4CAF50')  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–æ—Å—Ç–∞
                    elif recent_values[i] < recent_values[i-1]:
                        colors.append('#F44336')  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–∞–¥–µ–Ω–∏—è
                    else:
                        colors.append('#9E9E9E')  # –°–µ—Ä—ã–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                else:
                    colors.append('#9E9E9E')
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è ELO
            fig.add_trace(go.Scatter(
                x=x_values,
                y=recent_values,
                mode='lines+markers',
                name='ELO',
                line=dict(color='#81C784', width=3),
                marker=dict(
                    color=colors,
                    size=10,
                    line=dict(color='white', width=2)
                ),
                text=[f"–ú–∞—Ç—á {i+1}<br>ELO: {elo}<br>{'–ü–∏–∫!' if i in peaks_indices else '–ü—Ä–æ–≤–∞–ª!' if i in valleys_indices else '–†–æ—Å—Ç' if i > 0 and recent_values[i] > recent_values[i-1] else '–ü–∞–¥–µ–Ω–∏–µ' if i > 0 and recent_values[i] < recent_values[i-1] else '–ù–∞—á–∞–ª–æ'}" for i, elo in enumerate(recent_values)],
                hovertemplate='<b>%{text}</b><br>%{x}<extra></extra>',
                connectgaps=True
            ))
            
            # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
            fig.add_trace(go.Scatter(
                x=x_values,
                y=rolling_mean,
                mode='lines',
                name='–¢—Ä–µ–Ω–¥ (—Å—Ä–µ–¥–Ω–µ–µ)',
                line=dict(color='#FF9800', width=2, dash='dash'),
                opacity=0.8,
                hovertemplate='<b>–¢—Ä–µ–Ω–¥</b><br>ELO: %{y:.0f}<extra></extra>'
            ))
            
            # –ó–∞–ª–∏–≤–∫–∞ –æ–±–ª–∞—Å—Ç–∏
            min_y = min(recent_values)
            fig.add_trace(go.Scatter(
                x=x_values + x_values[::-1],
                y=recent_values + [min_y] * len(recent_values),
                fill='toself',
                fillcolor='rgba(76, 175, 80, 0.1)',
                line=dict(color='rgba(255,255,255,0)'),
                name='–û–±–ª–∞—Å—Ç—å ELO',
                showlegend=False,
                hoverinfo='skip'
            ))
            
            # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ç–æ—á–µ–∫
            current_elo = recent_values[-1]
            max_elo = max(values)  # –ü–∏–∫ –∑–∞ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
            min_elo = min(values)  # –ú–∏–Ω–∏–º—É–º –∑–∞ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
            
            # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ ELO
            fig.add_annotation(
                x=x_values[-1],
                y=current_elo,
                text=f"<b>–°–µ–π—á–∞—Å: {current_elo}</b>",
                showarrow=True,
                arrowhead=2,
                arrowcolor="#00E5FF",
                arrowwidth=2,
                bgcolor="#00E5FF",
                bordercolor="white",
                font=dict(color="white", size=12)
            )
            
            # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –ø–∏–∫–æ–≤
            for peak_idx in peaks_indices[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –ø–∏–∫–∞
                if peak_idx < len(recent_values):
                    fig.add_annotation(
                        x=x_values[peak_idx],
                        y=recent_values[peak_idx],
                        text=f"üìà {recent_values[peak_idx]}",
                        showarrow=True,
                        arrowhead=1,
                        arrowcolor="#FFD700",
                        bgcolor="#FFD700",
                        font=dict(color="black", size=10),
                        yshift=15
                    )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout
            trend = recent_values[-1] - recent_values[0] if len(recent_values) > 1 else 0
            trend_symbol = "üìà" if trend > 0 else "üìâ" if trend < 0 else "‚û°Ô∏è"
            
            fig.update_layout(
                title=dict(
                    text=f'<b>Faceit ELO –ê–Ω–∞–ª–∏–∑ {trend_symbol}</b><br><sub>–¢–µ–∫—É—â–∏–π: {current_elo} | –¢—Ä–µ–Ω–¥: {int(trend):+d} | –ü–∏–∫: {max_elo}</sub>',
                    x=0.5,
                    font=dict(size=18, color='white')
                ),
                paper_bgcolor='#1a1a1a',
                plot_bgcolor='#1a1a1a',
                font=dict(color='white', family='Arial, sans-serif'),
                
                xaxis=dict(
                    title=dict(text=x_title, font=dict(size=14)),
                    gridcolor='rgba(255,255,255,0.1)',
                    showgrid=True,
                    zeroline=False,
                    color='white',
                    # Range selector –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                    rangeslider=dict(visible=True, bgcolor='#2a2a2a'),
                    rangeselector=dict(
                        buttons=list([
                            dict(count=5, label="5M", step="all", stepmode="backward"),
                            dict(count=10, label="10M", step="all", stepmode="backward"),
                            dict(count=15, label="15M", step="all", stepmode="backward"),
                            dict(step="all", label="–í–°–ï")
                        ]),
                        bgcolor='#2a2a2a',
                        font=dict(color='white')
                    )
                ),
                
                yaxis=dict(
                    title=dict(text='ELO Rating', font=dict(size=14)),
                    gridcolor='rgba(255,255,255,0.1)',
                    showgrid=True,
                    zeroline=False,
                    color='white'
                ),
                
                legend=dict(
                    bgcolor='rgba(0,0,0,0.5)',
                    font=dict(color='white'),
                    orientation='h',
                    yanchor='bottom',
                    y=1.02,
                    xanchor='right',
                    x=1
                ),
                
                hovermode='x unified',
                
                annotations=[
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —É–≥–ª—É
                    dict(
                        xref='paper', yref='paper',
                        x=0.02, y=0.98,
                        text=f'''<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b><br>
–ú–∞—Ç—á–µ–π: {len(recent_values)}<br>
–ú–∞–∫—Å: {max_elo}<br>
–ú–∏–Ω: {min_elo}<br>
–°—Ä–µ–¥–Ω–∏–π: {sum(recent_values)//len(recent_values)}<br>
–ü–∏–∫–æ–≤: {len(peaks_indices)}<br>
–ü—Ä–æ–≤–∞–ª–æ–≤: {len(valleys_indices)}''',
                        showarrow=False,
                        bgcolor='rgba(0,0,0,0.7)',
                        font=dict(color='white', size=10),
                        align='left',
                        valign='top'
                    )
                ],
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                autosize=True,
                width=1200,
                height=800,
                margin=dict(l=60, r=60, t=100, b=80)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_buffer = io.BytesIO()
            fig.write_image(img_buffer, format='PNG', width=1200, height=800, scale=2)
            img_buffer.seek(0)
            
            logger.debug("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è Plotly –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return img_buffer
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π Plotly –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
            # Fallback –∫ matplotlib –≤–µ—Ä—Å–∏–∏
            return self.create_elo_graph_image(graph_data)
    
    def create_elo_graph_image(self, graph_data: Dict[str, Any]) -> Optional[io.BytesIO]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º –æ—Ç–∫–ª—é—á–µ–Ω–æ"""
        return None
    
    def _old_create_elo_graph_image_disabled(self, graph_data: Dict[str, Any]) -> Optional[io.BytesIO]:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –¥–∏–∞–≥—Ä–∞–º–º—É ELO –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        if not MATPLOTLIB_AVAILABLE:
            logger.warning("matplotlib –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∏–∞–≥—Ä–∞–º–º")
            return None
        
        try:
            if not graph_data or 'graph_data' not in graph_data:
                return None
            
            elo_data = graph_data['graph_data'].get('elo')
            if not elo_data or 'values' not in elo_data:
                return None
            
            values = elo_data['values']
            dates = elo_data.get('dates', [])
            
            if not values or len(values) == 0:
                return None
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∞—Ç—á–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            recent_values = values[-15:] if len(values) >= 15 else values
            
            # –°–æ–∑–¥–∞–µ–º figure —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
            plt.style.use('dark_background')
            fig, ax = plt.subplots(figsize=(12, 8), facecolor='#1a1a1a')
            ax.set_facecolor('#1a1a1a')
            
            # –°–æ–∑–¥–∞–µ–º x-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–æ–º–µ—Ä–∞ –º–∞—Ç—á–µ–π)
            x = list(range(1, len(recent_values) + 1))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–æ—á–µ–∫
            colors = []
            for i, elo in enumerate(recent_values):
                if i == len(recent_values) - 1:  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    colors.append('#4FC3F7')  # –ì–æ–ª—É–±–æ–π
                elif i > 0:
                    if recent_values[i] > recent_values[i-1]:
                        colors.append('#66BB6A')  # –ó–µ–ª–µ–Ω—ã–π
                    elif recent_values[i] < recent_values[i-1]:
                        colors.append('#EF5350')  # –ö—Ä–∞—Å–Ω—ã–π
                    else:
                        colors.append('#9E9E9E')  # –°–µ—Ä—ã–π
                else:
                    colors.append('#9E9E9E')
            
            # –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∞
            ax.plot(x, recent_values, color='#81C784', linewidth=3, alpha=0.8, zorder=2)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
            ax.scatter(x, recent_values, c=colors, s=100, alpha=0.9, zorder=3, edgecolors='white', linewidth=2)
            
            # –ó–∞–ª–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
            ax.fill_between(x, recent_values, alpha=0.3, color='#4CAF50', zorder=1)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
            ax.set_xlabel('–ú–∞—Ç—á', fontsize=14, color='white', fontweight='bold')
            ax.set_ylabel('ELO Rating', fontsize=14, color='white', fontweight='bold')
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            current_elo = recent_values[-1]
            trend = recent_values[-1] - recent_values[0] if len(recent_values) > 1 else 0
            trend_symbol = "‚ÜóÔ∏è" if trend > 0 else "‚ÜòÔ∏è" if trend < 0 else "‚Üí"
            
            ax.set_title(f'Faceit ELO –ì—Ä–∞—Ñ–∏–∫ {trend_symbol} –¢–µ–∫—É—â–∏–π: {current_elo} ({int(trend):+d})', 
                        fontsize=16, color='white', fontweight='bold', pad=20)
            
            # –°–µ—Ç–∫–∞
            ax.grid(True, alpha=0.3, color='white', linestyle='-', linewidth=0.5)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–∞ –æ—Å–µ–π –∏ –¥–µ–ª–µ–Ω–∏–π
            ax.tick_params(colors='white', which='both', labelsize=12)
            ax.spines['bottom'].set_color('white')
            ax.spines['top'].set_color('white') 
            ax.spines['right'].set_color('white')
            ax.spines['left'].set_color('white')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ ELO
            max_elo = max(recent_values)
            max_idx = recent_values.index(max_elo) + 1
            
            # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è –ø–∏–∫–∞
            ax.annotate(f'–ü–∏–∫: {max_elo}', 
                       xy=(max_idx, max_elo), 
                       xytext=(max_idx, max_elo + 50),
                       arrowprops=dict(arrowstyle='->', color='#FFD54F', lw=2),
                       fontsize=12, color='#FFD54F', fontweight='bold',
                       ha='center')
            
            # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ ELO
            current_idx = len(recent_values)
            ax.annotate(f'–°–µ–π—á–∞—Å: {current_elo}', 
                       xy=(current_idx, current_elo), 
                       xytext=(current_idx + 0.5, current_elo + 30),
                       arrowprops=dict(arrowstyle='->', color='#4FC3F7', lw=2),
                       fontsize=12, color='#4FC3F7', fontweight='bold',
                       ha='center')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
            stats_text = f"""–ú–∞—Ç—á–µ–π: {len(recent_values)}
–ü–∏–∫: {max(values)}
–ú–∏–Ω–∏–º—É–º: {min(values)}
–¢—Ä–µ–Ω–¥: {int(trend):+d}"""
            
            ax.text(0.98, 0.02, stats_text, transform=ax.transAxes, 
                   fontsize=11, color='white', ha='right', va='bottom',
                   bbox=dict(boxstyle='round,pad=0.5', facecolor='black', alpha=0.7))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–µ–ª—ã –æ—Å–µ–π
            padding = (max(recent_values) - min(recent_values)) * 0.1
            ax.set_ylim(min(recent_values) - padding, max(recent_values) + padding + 50)
            ax.set_xlim(0.5, len(recent_values) + 0.5)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
            img_buffer = io.BytesIO()
            plt.tight_layout()
            plt.savefig(img_buffer, format='PNG', facecolor='#1a1a1a', 
                       bbox_inches='tight', dpi=150)
            plt.close(fig)  # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
            
            img_buffer.seek(0)
            return img_buffer
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π ELO –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
            if 'fig' in locals():
                plt.close(fig)  # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return None
    
    async def get_elo_stats_by_nickname(self, nickname: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ELO –ø–æ –∏–≥—Ä–æ–≤–æ–º—É –Ω–∏–∫–Ω–µ–π–º—É"""
        if not nickname or not nickname.strip():
            logger.debug("–ü—É—Å—Ç–æ–π –Ω–∏–∫–Ω–µ–π–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å")
            return None
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∫–Ω–µ–π–º –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ player_id –¥–ª—è Faceit Analyser API
            player_id = nickname.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            cache_key = f"elo_stats_{player_id}"
            if cache_key in self.cache and self._is_cache_valid(self.cache[cache_key]):
                logger.debug(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º cached elo stats –¥–ª—è {player_id}")
                return self.cache[cache_key]['data']
            
            # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
            logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∏–≥—Ä–æ–∫–∞: {player_id}")
            logger.info(f"üîë API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.api_key is not None}")
            logger.info(f"üåê Base URL: {self.base_url}")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self._make_api_request("stats", player_id)
            
            if not stats:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–∞: {nickname}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
                return {
                    'nickname': nickname,
                    'current_elo': 0,
                    'highest_elo': 0,
                    'lowest_elo': 0,
                    'matches': 0,
                    'api_error': True
                }
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ API –¥–ª—è {nickname}: {list(stats.keys())}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ELO –¥–∞–Ω–Ω—ã–µ —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            current_elo = stats.get('_current_elo', 0)
            highest_elo = stats.get('_highest_elo', 0) 
            lowest_elo = stats.get('_lowest_elo', 0)
            matches = stats.get('_m', 0)
            
            logger.info(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ ELO –¥–∞–Ω–Ω—ã–µ –¥–ª—è {nickname}:")
            logger.info(f"   –¢–µ–∫—É—â–∏–π ELO: {current_elo}")
            logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ELO: {highest_elo}")
            logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ELO: {lowest_elo}")
            logger.info(f"   –ú–∞—Ç—á–∏: {matches}")
            
            result = {
                'nickname': nickname,
                'current_elo': current_elo,
                'highest_elo': highest_elo,
                'lowest_elo': lowest_elo,
                'matches': matches
            }
            
            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.cache[cache_key] = {
                'data': result,
                'timestamp': datetime.now()
            }
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {nickname}: –ú–∏–Ω:{result['lowest_elo']} –ú–∞–∫—Å:{result['highest_elo']}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {nickname}: {e}", exc_info=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–æ–π
            return {
                'nickname': nickname,
                'current_elo': 0,
                'highest_elo': 0,
                'lowest_elo': 0,
                'matches': 0,
                'error': str(e)
            }

    async def get_enhanced_profile_info(self, faceit_url: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è –∞–Ω–∫–µ—Ç—ã"""
        try:
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
            player_id = self._get_player_id_from_faceit_url(faceit_url)
            if not player_id:
                logger.debug(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π Faceit URL, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {faceit_url}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            overview_task = self.get_player_overview(faceit_url)
            stats_task = self.get_player_stats(faceit_url)
            
            overview, stats = await asyncio.gather(
                overview_task, stats_task,
                return_exceptions=True
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if isinstance(overview, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è overview: {overview}")
                overview = None
            if isinstance(stats, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è stats: {stats}")
                stats = None
            
            if not any([overview, stats]):
                return None
            
            result = {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if stats:
                result['stats'] = {
                    'matches': stats.get('_m', 0),
                    'wins': stats.get('_w', 0),
                    'kills': stats.get('_k', 0),
                    'deaths': stats.get('_d', 0),
                    'kdr': stats.get('_kdr', 0),
                    'hltv_rating': stats.get('_hltv', 0),
                    'current_elo': stats.get('_current_elo', 0),
                    'highest_elo': stats.get('_highest_elo', 0),
                    'lowest_elo': stats.get('_lowest_elo', 0)
                }
            
            # –î–∏–∞–≥—Ä–∞–º–º—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
            return result if result else None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return None
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫–µ—à"""
        self.cache.clear()
        logger.info("–ö–µ—à Faceit Analyser –æ—á–∏—â–µ–Ω")
    
    def get_cache_stats(self) -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞"""
        total = len(self.cache)
        valid = sum(1 for entry in self.cache.values() if self._is_cache_valid(entry))
        return {
            'total_entries': total,
            'valid_entries': valid,
            'expired_entries': total - valid
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
faceit_analyzer = FaceitAnalyzer()
