"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–º–º–µ–π—Ç–∞–º–∏
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes
from bot.utils.keyboards import Keyboards
from bot.utils.cs2_data import format_elo_display, format_role_display, extract_faceit_nickname
from bot.database.operations import DatabaseManager

logger = logging.getLogger(__name__)

class TeammatesHandler:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager

    async def teammates_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /teammates - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∏–º–º–µ–π—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
        has_profile = await self.db.has_profile(user_id)
        if not has_profile:
            await update.message.reply_text(
                "‚ùå <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–º–º–µ–π—Ç–æ–≤ –Ω—É–∂–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å!</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
                reply_markup=Keyboards.profile_menu(False),
                parse_mode='HTML'
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–º–º–µ–π—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        teammates = await self.db.get_user_matches(user_id)
        
        if not teammates:
            await update.message.reply_text(
                "üíî <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–º–º–µ–π—Ç–æ–≤</b>\n\n"
                "–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤ "
                "—Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å!",
                reply_markup=Keyboards.teammates_menu(),
                parse_mode='HTML'
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏–º–º–µ–π—Ç–æ–≤
        await self.show_teammates_overview(update, teammates)

    async def show_teammates_overview(self, update, teammates):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–∑–æ—Ä —Ç–∏–º–º–µ–π—Ç–æ–≤"""
        total_teammates = len(teammates)
        new_teammates = len([m for m in teammates if m.is_active])
        
        text = (
            f"üíù <b>–í–∞—à–∏ —Ç–∏–º–º–µ–π—Ç—ã ({total_teammates})</b>\n\n"
            f"üÜï <b>–ù–æ–≤—ã–µ —Ç–∏–º–º–µ–π—Ç—ã:</b> {new_teammates}\n"
            f"üìã <b>–í—Å–µ–≥–æ —Ç–∏–º–º–µ–π—Ç–æ–≤:</b> {total_teammates}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await update.message.reply_text(
            text,
            reply_markup=Keyboards.teammates_menu(),
            parse_mode='HTML'
        )

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã —Ç–∏–º–º–µ–π—Ç–æ–≤"""
        query = update.callback_query
        data = query.data
        user_id = query.from_user.id

        if data == "teammates_list":
            await self.show_teammates_list(update, context)
        elif data == "teammates_new":
            await self.show_new_teammates(update, context)
        elif data == "teammates_all":
            await self.show_all_teammates(update, context)

    async def show_teammates_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤"""
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()
        
        teammates = await self.db.get_user_matches(user_id)
        
        if not teammates:
            await query.edit_message_text(
                "üíî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–º–º–µ–π—Ç–æ–≤",
                reply_markup=Keyboards.back_button("back_to_main")
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5 —Ç–∏–º–º–µ–π—Ç–æ–≤
        await self.show_teammates_page(query, teammates[:5], 0, len(teammates))

    async def show_new_teammates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã—Ö —Ç–∏–º–º–µ–π—Ç–æ–≤"""
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()
        
        teammates = await self.db.get_user_matches(user_id, active_only=True)
        
        if not teammates:
            await query.edit_message_text(
                "üì≠ <b>–ù–æ–≤—ã—Ö —Ç–∏–º–º–µ–π—Ç–æ–≤ –Ω–µ—Ç</b>\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤!",
                reply_markup=Keyboards.back_button("back_to_main"),
                parse_mode='HTML'
            )
            return
        
        await self.show_teammates_page(query, teammates, 0, len(teammates), "–ù–æ–≤—ã–µ")



    async def show_all_teammates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö —Ç–∏–º–º–µ–π—Ç–æ–≤"""
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()
        
        teammates = await self.db.get_user_matches(user_id, active_only=False)
        
        if not teammates:
            await query.edit_message_text(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Ç–∏–º–º–µ–π—Ç–æ–≤",
                reply_markup=Keyboards.back_button("back_to_main")
            )
            return
        
        await self.show_teammates_page(query, teammates, 0, len(teammates), "–í—Å–µ")

    async def show_teammates_page(self, query, teammates, page, total, title=""):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–∏–º–º–µ–π—Ç–æ–≤"""
        text = f"üíù <b>{title} —Ç–∏–º–º–µ–π—Ç—ã</b> ({total})\n\n"
        
        for i, match in enumerate(teammates, 1):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner_id = match.user2_id if match.user1_id == query.from_user.id else match.user1_id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner = await self.db.get_user(partner_id)
            partner_profile = await self.db.get_profile(partner_id)
            
            if partner and partner_profile:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –≤–º–µ—Å—Ç–æ telegram –¥–∞–Ω–Ω—ã—Ö
                name = partner_profile.game_nickname
                telegram_contact = f"@{partner.username}" if partner.username else partner.first_name
                
                # –ü–æ–ª—É—á–∞–µ–º ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ Faceit API
                elo_stats = None
                try:
                    if partner_profile.game_nickname and partner_profile.game_nickname.strip():
                        from bot.utils.faceit_analyzer import faceit_analyzer
                        elo_stats = await faceit_analyzer.get_elo_stats_by_nickname(partner_profile.game_nickname)
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {partner_profile.game_nickname}: {e}")
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ELO —Å –º–∏–Ω/–º–∞–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ (–ú–Ø–ì–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê TEAMMATES)
                if elo_stats and (elo_stats.get('lowest_elo', 0) > 0 or elo_stats.get('highest_elo', 0) > 0):
                    from bot.utils.cs2_data import format_faceit_elo_display
                    logger.info(f"üî• TEAMMATES: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ELO —Å –º–∏–Ω/–º–∞–∫—Å –¥–ª—è {partner_profile.game_nickname}: –º–∏–Ω={elo_stats.get('lowest_elo', 0)} –º–∞–∫—Å={elo_stats.get('highest_elo', 0)}")
                    elo_display = format_faceit_elo_display(partner_profile.faceit_elo, elo_stats.get('lowest_elo'), elo_stats.get('highest_elo'))
                else:
                    if elo_stats:
                        logger.warning(f"‚ö†Ô∏è TEAMMATES: ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –º–∏–Ω/–º–∞–∫—Å –Ω–µ –≤–∞–ª–∏–¥–Ω—ã: {elo_stats}")
                    elo_display = format_elo_display(partner_profile.faceit_elo)
                
                role = format_role_display(partner_profile.role)
                nickname = extract_faceit_nickname(partner_profile.faceit_url)
                
                # –°—Ç–∞—Ç—É—Å —Ç–∏–º–º–µ–π—Ç–∞
                status = "üü¢ –ù–æ–≤—ã–π" if match.is_active else "‚ö™ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω"
                
                text += f"{i}. <b>{name}</b> (Faceit: {nickname})\n"
                text += f"   {elo_display} ‚Ä¢ {role}\n"
                text += f"   {status} ‚Ä¢ {match.created_at.strftime('%d.%m.%Y')}\n"
                text += f"   üí¨ Telegram: {telegram_contact}\n\n"
            else:
                text += f"{i}. <b>–¢–∏–º–º–µ–π—Ç #{partner_id}</b>\n"
                text += f"   –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) > 3500:
            text = text[:3500] + "...\n\n(–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ —Ç–∏–º–º–µ–π—Ç—ã)"
        
        text += "\nüí° <b>–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è:</b>\n"
        text += "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤ Telegram –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É\n"
        text += "‚Ä¢ –î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ–± –∏–≥—Ä–µ!"
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.teammates_menu(),
            parse_mode='HTML'
        )