"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–º–º–µ–π—Ç–∞–º–∏
"""
import logging
import asyncio
from telegram import Update
from telegram.ext import ContextTypes
from bot.utils.keyboards import Keyboards
from bot.utils.cs2_data import format_elo_display, format_role_display, extract_faceit_nickname
from bot.utils.background_processor import TaskPriority
from bot.utils.progressive_loader import get_progressive_loader
from bot.database.operations import DatabaseManager

logger = logging.getLogger(__name__)

class TeammatesHandler:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager

    async def teammates_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /teammates - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∏–º–º–µ–π—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
        has_profile = await self.db.has_profile(user_id)
        if not has_profile:
            await update.message.reply_text(
                "‚ùå <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–º–º–µ–π—Ç–æ–≤ –Ω—É–∂–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å!</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
                reply_markup=Keyboards.profile_menu(False),
                parse_mode='HTML'
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–º–º–µ–π—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        teammates = await self.db.get_user_matches(user_id)
        
        if not teammates:
            await update.message.reply_text(
                "üíî <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–º–º–µ–π—Ç–æ–≤</b>\n\n"
                "–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤ "
                "—Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å!",
                reply_markup=Keyboards.teammates_menu(),
                parse_mode='HTML'
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏–º–º–µ–π—Ç–æ–≤
        await self.show_teammates_overview(update, teammates)

    async def show_teammates_overview(self, update, teammates):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–∑–æ—Ä —Ç–∏–º–º–µ–π—Ç–æ–≤"""
        total_teammates = len(teammates)
        new_teammates = len([m for m in teammates if m.is_active])
        
        text = (
            f"üíù <b>–í–∞—à–∏ —Ç–∏–º–º–µ–π—Ç—ã ({total_teammates})</b>\n\n"
            f"üÜï <b>–ù–æ–≤—ã–µ —Ç–∏–º–º–µ–π—Ç—ã:</b> {new_teammates}\n"
            f"üìã <b>–í—Å–µ–≥–æ —Ç–∏–º–º–µ–π—Ç–æ–≤:</b> {total_teammates}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await update.message.reply_text(
            text,
            reply_markup=Keyboards.teammates_menu(),
            parse_mode='HTML'
        )

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã —Ç–∏–º–º–µ–π—Ç–æ–≤"""
        query = update.callback_query
        data = query.data
        user_id = query.from_user.id

        if data == "teammates_list":
            await self.show_teammates_list(update, context)
        elif data == "teammates_new":
            await self.show_new_teammates(update, context)
        elif data == "teammates_all":
            await self.show_all_teammates(update, context)

    async def show_teammates_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤"""
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()
        
        teammates = await self.db.get_user_matches(user_id)
        
        if not teammates:
            await query.edit_message_text(
                "üíî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–º–º–µ–π—Ç–æ–≤",
                reply_markup=Keyboards.back_button("back_to_main")
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5 —Ç–∏–º–º–µ–π—Ç–æ–≤
        await self.show_teammates_page(query, teammates[:5], 0, len(teammates))

    async def show_new_teammates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã—Ö —Ç–∏–º–º–µ–π—Ç–æ–≤"""
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()
        
        teammates = await self.db.get_user_matches(user_id, active_only=True)
        
        if not teammates:
            await query.edit_message_text(
                "üì≠ <b>–ù–æ–≤—ã—Ö —Ç–∏–º–º–µ–π—Ç–æ–≤ –Ω–µ—Ç</b>\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤!",
                reply_markup=Keyboards.back_button("back_to_main"),
                parse_mode='HTML'
            )
            return
        
        await self.show_teammates_page(query, teammates, 0, len(teammates), "–ù–æ–≤—ã–µ")



    async def show_all_teammates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö —Ç–∏–º–º–µ–π—Ç–æ–≤"""
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()
        
        teammates = await self.db.get_user_matches(user_id, active_only=False)
        
        if not teammates:
            await query.edit_message_text(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Ç–∏–º–º–µ–π—Ç–æ–≤",
                reply_markup=Keyboards.back_button("back_to_main")
            )
            return
        
        await self.show_teammates_page(query, teammates, 0, len(teammates), "–í—Å–µ")

    async def show_teammates_page(self, query, teammates, page, total, title=""):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–∏–º–º–µ–π—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π"""
        text = f"üíù <b>{title} —Ç–∏–º–º–µ–π—Ç—ã</b> ({total})\n\n"
        
        # –§–∞–∑–∞ 1: –°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏ –Ω–∏–∫–Ω–µ–π–º–æ–≤
        teammate_data = []
        nicknames_to_fetch = []
        
        for i, match in enumerate(teammates, 1):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner_id = match.user2_id if match.user1_id == query.from_user.id else match.user1_id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner = await self.db.get_user(partner_id)
            partner_profile = await self.db.get_profile(partner_id)
            
            teammate_info = {
                'index': i,
                'match': match,
                'partner_id': partner_id,
                'partner': partner,
                'partner_profile': partner_profile
            }
            
            teammate_data.append(teammate_info)
            
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–∏–∫–Ω–µ–π–º—ã –¥–ª—è –±–∞—Ç—á-–∑–∞–ø—Ä–æ—Å–æ–≤
            if partner_profile and partner_profile.game_nickname and partner_profile.game_nickname.strip():
                nicknames_to_fetch.append(partner_profile.game_nickname)
            else:
                nicknames_to_fetch.append(None)  # Placeholder –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
        
        # –§–∞–∑–∞ 2: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ç—á-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
        from bot.utils.faceit_analyzer import faceit_analyzer
        futures = []
        
        for nickname in nicknames_to_fetch:
            if nickname:
                try:
                    # Use NORMAL priority –¥–ª—è teammates batch loading
                    elo_future = await faceit_analyzer.get_elo_stats_by_nickname_priority(nickname, TaskPriority.NORMAL)
                    futures.append(elo_future)
                except Exception as e:
                    logger.debug(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è future –¥–ª—è {nickname}: {e}")
                    # Create a failed future
                    failed_future = asyncio.get_event_loop().create_future()
                    failed_future.set_result(None)
                    futures.append(failed_future)
            else:
                # Create None future for teammates without nicknames
                none_future = asyncio.get_event_loop().create_future()
                none_future.set_result(None)
                futures.append(none_future)
        
        # –§–∞–∑–∞ 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        basic_text = text  # Save header
        
        # Show basic teammate info immediately with loading placeholders  
        for i, teammate_info in enumerate(teammate_data):
            match = teammate_info['match']
            partner = teammate_info['partner']
            partner_profile = teammate_info['partner_profile']
            partner_id = teammate_info['partner_id']
            index = teammate_info['index']
            
            if partner and partner_profile:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –≤–º–µ—Å—Ç–æ telegram –¥–∞–Ω–Ω—ã—Ö
                name = partner_profile.game_nickname
                telegram_contact = f"@{partner.username}" if partner.username else partner.first_name
                role = format_role_display(partner_profile.role)
                nickname = extract_faceit_nickname(partner_profile.faceit_url)
                
                # –°—Ç–∞—Ç—É—Å —Ç–∏–º–º–µ–π—Ç–∞
                status = "üü¢ –ù–æ–≤—ã–π" if match.is_active else "‚ö™ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω"
                
                # Show loading placeholder for ELO while batch processing
                elo_display = Keyboards.elo_loading_placeholder()
                
                basic_text += f"{index}. <b>{name}</b> (Faceit: {nickname})\n"
                basic_text += f"   üéØ ELO: {elo_display} ‚Ä¢ {role}\n"
                basic_text += f"   {status} ‚Ä¢ {match.created_at.strftime('%d.%m.%Y')}\n"
                basic_text += f"   üí¨ Telegram: {telegram_contact}\n\n"
            else:
                basic_text += f"{index}. <b>–¢–∏–º–º–µ–π—Ç #{partner_id}</b>\n"
                basic_text += f"   –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(basic_text) > 3500:
            basic_text = basic_text[:3500] + "...\n\n(–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ —Ç–∏–º–º–µ–π—Ç—ã)"
            
        basic_text += "\nüí° <b>–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è:</b>\n"
        basic_text += "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤ Telegram –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É\n"
        basic_text += "‚Ä¢ –î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ–± –∏–≥—Ä–µ!"
        
        # Send basic teammate list immediately
        sent_message = await query.edit_message_text(
            basic_text,
            reply_markup=Keyboards.teammates_menu(),
            parse_mode='HTML'
        )
        
        # –§–∞–∑–∞ 4: –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ELO –¥–∞–Ω–Ω—ã—Ö
        if futures:
            # Create background task for ELO updates
            async def update_with_elo():
                try:
                    # Batch processing with timeout per request and exception handling
                    elo_results = await asyncio.gather(
                        *[asyncio.wait_for(f, timeout=4.0) for f in futures], 
                        return_exceptions=True
                    )
                    logger.debug(f"‚úÖ –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {len(futures)} teammates")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∏ ELO –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
                    elo_results = [None] * len(futures)
                
                # Compose final text with ELO data
                await self._update_teammates_with_elo(query, text, teammate_data, elo_results)
            
            # Start background ELO update task
            asyncio.create_task(update_with_elo())
        
    async def _update_teammates_with_elo(self, query, header_text, teammate_data, elo_results):
        """Update teammates message with ELO data"""
        try:
            final_text = header_text  # Reset to header
            
            for i, teammate_info in enumerate(teammate_data):
                match = teammate_info['match']
                partner = teammate_info['partner']
                partner_profile = teammate_info['partner_profile']
                partner_id = teammate_info['partner_id']
                index = teammate_info['index']
                
                if partner and partner_profile:
                    name = partner_profile.game_nickname
                    telegram_contact = f"@{partner.username}" if partner.username else partner.first_name
                    
                    # –ü–æ–ª—É—á–∞–µ–º ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞—Ç—á-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    elo_stats = None
                    if i < len(elo_results):
                        result = elo_results[i]
                        if isinstance(result, Exception):
                            if isinstance(result, asyncio.TimeoutError):
                                logger.debug(f"‚è∞ –¢–∞–π–º–∞—É—Ç –±–∞—Ç—á-–∑–∞–ø—Ä–æ—Å–∞ ELO –¥–ª—è teammate {partner_profile.game_nickname}")
                            else:
                                logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è teammate {partner_profile.game_nickname}: {result}")
                            elo_stats = None
                            # Enhanced fallback with progressive loader integration
                            try:
                                from bot.utils.faceit_analyzer import faceit_analyzer
                                elo_stats = await faceit_analyzer.get_elo_stats_by_nickname(partner_profile.game_nickname)
                            except Exception:
                                elo_stats = None
                        else:
                            elo_stats = result
                            if elo_stats:
                                logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –±–∞—Ç—á–∞ –¥–ª—è teammate {partner_profile.game_nickname}")
                    
                    # Enhanced ELO display with better error handling
                    if elo_stats:
                        from bot.utils.cs2_data import format_faceit_elo_display
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ ELO –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                        lowest_elo = elo_stats.get('lowest_elo', 0)
                        highest_elo = elo_stats.get('highest_elo', 0)
                        
                        # Enhanced ELO validation for teammates
                        try:
                            if isinstance(lowest_elo, (int, float)) and isinstance(highest_elo, (int, float)):
                                lowest_elo = int(lowest_elo) if lowest_elo >= 0 else 0
                                highest_elo = int(highest_elo) if highest_elo >= 0 else 0
                                current_elo = partner_profile.faceit_elo
                                
                                if lowest_elo > 0 or highest_elo > 0:
                                    if lowest_elo <= current_elo <= highest_elo or (lowest_elo == 0 and highest_elo == 0):
                                        elo_display = format_faceit_elo_display(current_elo, lowest_elo, highest_elo, partner_profile.game_nickname)
                                    else:
                                        logger.warning(f"‚ö†Ô∏è TEAMMATES: ELO logic error for {partner_profile.game_nickname}")
                                        elo_display = format_elo_display(current_elo)
                                else:
                                    elo_display = format_elo_display(current_elo)
                            else:
                                logger.warning(f"‚ö†Ô∏è TEAMMATES: Invalid ELO types for {partner_profile.game_nickname}")
                                elo_display = format_elo_display(partner_profile.faceit_elo)
                        except Exception as elo_validation_error:
                            logger.error(f"ELO validation error in teammates for {partner_profile.game_nickname}: {elo_validation_error}")
                            elo_display = format_elo_display(partner_profile.faceit_elo)
                    else:
                        # Improved fallback display
                        elo_display = format_elo_display(partner_profile.faceit_elo)
                    
                    role = format_role_display(partner_profile.role)
                    nickname = extract_faceit_nickname(partner_profile.faceit_url)
                    status = "üü¢ –ù–æ–≤—ã–π" if match.is_active else "‚ö™ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω"
                    
                    final_text += f"{index}. <b>{name}</b> (Faceit: {nickname})\n"
                    final_text += f"   {elo_display} ‚Ä¢ {role}\n"
                    final_text += f"   {status} ‚Ä¢ {match.created_at.strftime('%d.%m.%Y')}\n"
                    final_text += f"   üí¨ Telegram: {telegram_contact}\n\n"
                else:
                    final_text += f"{index}. <b>–¢–∏–º–º–µ–π—Ç #{partner_id}</b>\n"
                    final_text += f"   –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
                    
            # Update the message with final ELO data
            if len(final_text) > 3500:
                final_text = final_text[:3500] + "...\n\n(–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ —Ç–∏–º–º–µ–π—Ç—ã)"
                
            final_text += "\nüí° <b>–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è:</b>\n"
            final_text += "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤ Telegram –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É\n"
            final_text += "‚Ä¢ –î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ–± –∏–≥—Ä–µ!"
            
            try:
                # Progressive update with ELO data (6 second timeout for teammates)
                await asyncio.wait_for(
                    query.edit_message_text(
                        final_text,
                        reply_markup=Keyboards.teammates_menu(),
                        parse_mode='HTML'
                    ),
                    timeout=6.0
                )
                logger.debug(f"‚úÖ Teammates list updated with ELO data for {len(teammate_data)} teammates")
            except asyncio.TimeoutError:
                logger.warning("‚è∞ Timeout updating teammates message with ELO data - keeping basic display")
            except Exception as update_error:
                logger.error(f"‚ùå Error updating teammates message: {update_error}")
                # Keep basic display on error
                
        except Exception as e:
            logger.error(f"Error in _update_teammates_with_elo: {e}", exc_info=True)