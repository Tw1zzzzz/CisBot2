"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ /start –∏ /help
"""
import logging
import json
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from bot.utils.keyboards import Keyboards
from bot.database.operations import DatabaseManager
from bot.utils.callback_security import (
    safe_parse_user_id, safe_parse_numeric_value, safe_parse_string_value, 
    sanitize_text_input, validate_callback_data
)
from bot.utils.enhanced_callback_security import validate_secure_callback, CallbackValidationResult

logger = logging.getLogger(__name__)

class StartHandler:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = update.effective_user
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await self.db.create_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_any_profile = await self.db.has_profile(user.id)
        has_approved_profile = await self.db.has_approved_profile(user.id)
        
        if not has_any_profile:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
            welcome_text = (
                f"üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CIS FINDER, {user.first_name}!</b>\n\n"
                "üá∑üá∫ –ù–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ç–∏–º–º–µ–π—Ç–æ–≤ –¥–ª—è Counter-Strike 2 –≤ –°–ù–ì —Ä–µ–≥–∏–æ–Ω–µ!\n"
                "–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–º <b>Twizz_Project</b>\n\n"
                "üìù <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.</b>\n"
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –Ω–∞–π—Ç–∏ –≤–∞—Å –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç!\n\n"
                "üåê <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å:</b>\n"
                "‚Ä¢ <a href='https://vk.com/cisfinder'>VK CIS FINDER</a> | <a href='https://t.me/cisfinder'>TG CIS FINDER</a> | <a href='https://t.me/tw1zzV'>Twizz_Project</a>\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å:"
            )
            
            keyboard = Keyboards.create_profile_mandatory()
            await update.message.reply_text(
                welcome_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        elif has_any_profile and not has_approved_profile:
            # –ï—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –Ω–æ –æ–Ω –Ω–µ –æ–¥–æ–±—Ä–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            profile = await self.db.get_profile(user.id)
            
            if profile and profile.moderation_status == 'pending':
                welcome_text = (
                    f"üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.first_name}!</b>\n\n"
                    "‚è≥ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n"
                    "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n"
                    "–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!\n\n"
                    "üá∑üá∫ –ù–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ç–∏–º–º–µ–π—Ç–æ–≤ –¥–ª—è Counter-Strike 2 –≤ –°–ù–ì —Ä–µ–≥–∏–æ–Ω–µ!\n"
                    "–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–º <b>Twizz_Project</b>\n\n"
                    "üåê <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å:</b>\n"
                    "‚Ä¢ <a href='https://vk.com/cisfinder'>VK CIS FINDER</a> | <a href='https://t.me/cisfinder'>TG CIS FINDER</a> | <a href='https://t.me/tw1zzV'>Twizz_Project</a>\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
                )
            elif profile and profile.moderation_status == 'rejected':
                welcome_text = (
                    f"üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.first_name}!</b>\n\n"
                    "‚ùå <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n\n"
                    "üá∑üá∫ –ù–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ç–∏–º–º–µ–π—Ç–æ–≤ –¥–ª—è Counter-Strike 2 –≤ –°–ù–ì —Ä–µ–≥–∏–æ–Ω–µ!\n"
                    "–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–º <b>Twizz_Project</b>\n\n"
                    "üåê <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å:</b>\n"
                    "‚Ä¢ <a href='https://vk.com/cisfinder'>VK CIS FINDER</a> | <a href='https://t.me/cisfinder'>TG CIS FINDER</a> | <a href='https://t.me/tw1zzV'>Twizz_Project</a>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
            else:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                welcome_text = (
                    f"üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.first_name}!</b>\n\n"
                    "üá∑üá∫ –ù–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ç–∏–º–º–µ–π—Ç–æ–≤ –¥–ª—è Counter-Strike 2 –≤ –°–ù–ì —Ä–µ–≥–∏–æ–Ω–µ!\n"
                    "–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–º <b>Twizz_Project</b>\n\n"
                    "üåê <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å:</b>\n"
                    "‚Ä¢ <a href='https://vk.com/cisfinder'>VK CIS FINDER</a> | <a href='https://t.me/cisfinder'>TG CIS FINDER</a> | <a href='https://t.me/tw1zzV'>Twizz_Project</a>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            is_moderator = await self.db.is_moderator(user.id)
            keyboard = Keyboards.main_menu_with_moderation() if is_moderator else Keyboards.main_menu()
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            welcome_text = (
                f"üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CIS FINDER, {user.first_name}!</b>\n\n"
                "üá∑üá∫ –ù–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ç–∏–º–º–µ–π—Ç–æ–≤ –¥–ª—è Counter-Strike 2 –≤ –°–ù–ì —Ä–µ–≥–∏–æ–Ω–µ!\n"
                "–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–º <b>Twizz_Project</b>\n\n"
                "<b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>\n"
                "‚Ä¢ üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å ELO Faceit –∏ —Å—Å—ã–ª–∫–æ–π\n"
                "‚Ä¢ üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ ELO, —Ä–æ–ª–∏ –∏ –∫–∞—Ä—Ç–∞–º\n"
                "‚Ä¢ ‚ù§Ô∏è –°–∏—Å—Ç–µ–º–∞ –ª–∞–π–∫–æ–≤ –∏ —Ç–∏–º–º–µ–π—Ç–æ–≤\n"
                "‚Ä¢ ü§ù –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤\n"
                "‚Ä¢ ‚è∞ –ì–∏–±–∫–∏–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã\n\n"
                "üåê <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å:</b>\n"
                "‚Ä¢ <a href='https://vk.com/cisfinder'>VK CIS FINDER</a> | <a href='https://t.me/cisfinder'>TG CIS FINDER</a> | <a href='https://t.me/tw1zzV'>Twizz_Project</a>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            is_moderator = await self.db.is_moderator(user.id)
            keyboard = Keyboards.main_menu_with_moderation() if is_moderator else Keyboards.main_menu()
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        help_text = (
            "üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ CIS FINDER Bot</b>\n"
            "–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–º <b>Twizz_Project</b>\n\n"
            "üåê <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å:</b>\n"
            "‚Ä¢ <a href='https://vk.com/cisfinder'>VK CIS FINDER</a> | <a href='https://t.me/cisfinder'>TG CIS FINDER</a> | <a href='https://t.me/tw1zzV'>Twizz_Project</a>\n\n"
            
            "<b>üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/profile - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º\n"
            "/search - –ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤\n"
            "/teammates - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–º–º–µ–π—Ç–æ–≤\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            
            "<b>üéØ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å ELO Faceit –∏ —Å—Å—ã–ª–∫–æ–π\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏ –ª—é–±–∏–º—ã–µ –∫–∞—Ä—Ç—ã\n"
            "3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã\n"
            "4Ô∏è‚É£ –ò—â–∏—Ç–µ —Ç–∏–º–º–µ–π—Ç–æ–≤ –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n"
            "5Ô∏è‚É£ –°—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ —Ç–∏–º–º–µ–π—Ç–æ–≤!\n\n"
            
            "<b>üéÆ –°–∏—Å—Ç–µ–º–∞ ELO Faceit:</b>\n"
            "–û—Ç 1 ELO –¥–æ 3000+ ELO\n"
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º Faceit\n\n"
            
            "<b>üë• –†–æ–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ:</b>\n"
            "üëë IGL - –õ–∏–¥–µ—Ä –∫–æ–º–∞–Ω–¥—ã\n"
            "‚ö° Entry Fragger - –ü–µ—Ä–≤—ã–π –Ω–∞ –≤—Ö–æ–¥\n"
            "üõ°Ô∏è Support Player - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥—ã\n"
            "ü•∑ Lurker - –°–∫—Ä—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫\n"
            "üéØ AWPer - –°–Ω–∞–π–ø–µ—Ä –∫–æ–º–∞–Ω–¥—ã\n\n"
            
            "<b>‚è∞ –í—Ä–µ–º—è –∏–≥—Ä—ã:</b>\n"
            "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤:\n"
            "üåÖ –£—Ç—Ä–æ–º (6-12) / ‚òÄÔ∏è –î–Ω–µ–º (12-18)\n"
            "üåÜ –í–µ—á–µ—Ä–æ–º (18-24) / üåô –ù–æ—á—å—é (0-6)\n\n"
            
            "<b>‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @twizz_project"
        )
        
        await update.message.reply_text(
            help_text,
            reply_markup=Keyboards.back_button("back_to_main"),
            parse_mode='HTML'
        )

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        query = update.callback_query
        data = query.data
        user_id = query.from_user.id
        
        # DEBUG: –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ callbacks –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"StartHandler received callback: {data} from user {user_id}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback
        secure_validation = validate_secure_callback(data, user_id)
        if secure_validation.is_valid:
            await self._handle_secure_callback(query, secure_validation, context)
            return
        
        # –ï—Å–ª–∏ –Ω–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        await self._handle_legacy_callback(query, data, user_id, context)
    
    async def _handle_secure_callback(self, query, validation: CallbackValidationResult, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö callback'–æ–≤ —Å CSRF —Ç–æ–∫–µ–Ω–∞–º–∏"""
        action = validation.action
        user_id = validation.user_id
        parsed_data = validation.parsed_data or {}
        
        logger.info(f"Processing secure callback: {action} for user {user_id}")
        
        try:
            if action == "back_to_main":
                await self.show_main_menu(query)
            elif action == "help":
                await self.show_help(query)
            elif action == "settings_menu":
                await self.show_settings_menu(query)
            elif action == "likes_history":
                await self.show_likes_history(query)
            elif action == "reply_like":
                target_user_id = parsed_data.get("target_user_id")
                if target_user_id:
                    await self.handle_like_response(query, target_user_id, "reply")
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            elif action == "skip_like":
                target_user_id = parsed_data.get("target_user_id")
                if target_user_id:
                    await self.handle_like_response(query, target_user_id, "skip")
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            elif action == "view_profile":
                target_user_id = parsed_data.get("target_user_id")
                if target_user_id:
                    await self.show_user_profile(query, target_user_id)
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            elif action == "unblock_user":
                target_user_id = parsed_data.get("target_user_id")
                if target_user_id:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_settings = await self.db.get_user_settings(user_id)
                    privacy_settings = user_settings.privacy_settings if user_settings and user_settings.privacy_settings else {}
                    await self.handle_unblock_user(query, f"unblock_{target_user_id}", privacy_settings)
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            else:
                logger.warning(f"Unknown secure callback action: {action}")
                await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            logger.error(f"Error handling secure callback {action}: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
    
    async def _handle_legacy_callback(self, query, data, user_id, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ legacy callback'–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        if data == "back_to_main":
            await self.show_main_menu(query)
        elif data == "help":
            await self.show_help(query)
        elif data == "settings_menu":
            await self.show_settings_menu(query)
        elif data.startswith("settings_"):
            await self.handle_settings_option(query, data)
        elif data == "settings_filters":
            await self.show_search_filters_menu(query)
        elif data == "settings_notifications":
            await self.show_notifications_menu(query)
        elif data.startswith("filter_elo_"):
            await self.handle_elo_filter_update(query, data)
        elif data == "filters_reset":  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è filters_reset
            logger.info(f"Processing filters_reset for user {user_id}")
            await self.reset_search_filters(query)
        elif data.startswith("filter_"):
            await self.handle_filter_option(query, data)
        elif data.startswith("set_") or data.startswith("toggle_") or data.startswith("clear_"):
            await self.handle_filter_update(query, data)
        elif data.startswith("notify_"):
            await self.handle_notification_update(query, data)
        elif data.startswith("privacy_") or data.startswith("visibility_") or data.startswith("unblock_") or data.startswith("confirm_privacy_") or data.startswith("cancel_privacy_"):
            await self.handle_privacy_option(query, data)
        elif data == "likes_history":
            await self.show_likes_history(query)
        elif data == "likes_new":
            await self.show_likes_list(query, new_only=True)
        elif data == "likes_all":
            await self.show_likes_list(query, new_only=False)
        elif data.startswith("likes_page_"):
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_result = safe_parse_numeric_value(data, "likes_page_", (0, 1000))
            if not page_result.is_valid:
                logger.error(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data –≤ likes_page: {data} - {page_result.error_message}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            page = page_result.parsed_data['value']
            await self.show_likes_list(query, page=page)
        elif data.startswith("reply_like_"):
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ user_id –¥–ª—è –ª–∞–π–∫–∞
            liker_id_result = safe_parse_user_id(data, "reply_like_")
            if not liker_id_result.is_valid:
                logger.error(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data –≤ reply_like: {data} - {liker_id_result.error_message}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            liker_id = liker_id_result.parsed_data['user_id']
            await self.handle_like_response(query, liker_id, "reply")
        elif data.startswith("skip_like_"):
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ user_id –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ª–∞–π–∫–∞
            liker_id_result = safe_parse_user_id(data, "skip_like_")
            if not liker_id_result.is_valid:
                logger.error(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data –≤ skip_like: {data} - {liker_id_result.error_message}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            liker_id = liker_id_result.parsed_data['user_id']
            await self.handle_like_response(query, liker_id, "skip")
        elif data.startswith("view_profile_"):
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ user_id –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
            profile_user_id_result = safe_parse_user_id(data, "view_profile_")
            if not profile_user_id_result.is_valid:
                logger.error(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data –≤ view_profile: {data} - {profile_user_id_result.error_message}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            profile_user_id = profile_user_id_result.parsed_data['user_id']
            logger.info(f"StartHandler: Processing view_profile_ callback for user {profile_user_id} from user {query.from_user.id}")
            await self.show_user_profile(query, profile_user_id)
    
    async def safe_edit_or_send_message(self, query, text: str, reply_markup=None, parse_mode='HTML'):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"""
        try:
            message = query.message
            if message and (message.photo or message.video):
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.message.reply_text(
                    text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            else:
                # –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                await query.edit_message_text(
                    text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –§–æ–ª–ª–±—ç–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )

    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await query.answer()
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º —Å–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ ELO –¥–∞–Ω–Ω—ã—Ö
        await self._warm_user_network(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_any_profile = await self.db.has_profile(user_id)
        has_approved_profile = await self.db.has_approved_profile(user_id)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –Ω–æ –æ–Ω –Ω–µ –æ–¥–æ–±—Ä–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        if has_any_profile and not has_approved_profile:
            profile = await self.db.get_profile(user_id)
            if profile:
                if profile.moderation_status == 'pending':
                    menu_text = (
                        "üéÆ <b>CIS FINDER - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
                        "–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–º <b>Twizz_Project</b>\n\n"
                        "‚è≥ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n"
                        "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n"
                        "–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!\n\n"
                        "üåê <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å:</b>\n"
                        "‚Ä¢ <a href='https://vk.com/cisfinder'>VK CIS FINDER</a> | <a href='https://t.me/cisfinder'>TG CIS FINDER</a> | <a href='https://t.me/tw1zzV'>Twizz_Project</a>\n\n"
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
                    )
                elif profile.moderation_status == 'rejected':
                    menu_text = (
                        "üéÆ <b>CIS FINDER - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
                        "–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–º <b>Twizz_Project</b>\n\n"
                        "‚ùå <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n"
                        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n\n"
                        "üåê <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å:</b>\n"
                        "‚Ä¢ <a href='https://vk.com/cisfinder'>VK CIS FINDER</a> | <a href='https://t.me/cisfinder'>TG CIS FINDER</a> | <a href='https://t.me/tw1zzV'>Twizz_Project</a>\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                    )
                else:
                    # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                    menu_text = (
                        "üéÆ <b>CIS FINDER - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
                        "–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–º <b>Twizz_Project</b>\n\n"
                        "üåê <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å:</b>\n"
                        "‚Ä¢ <a href='https://vk.com/cisfinder'>VK CIS FINDER</a> | <a href='https://t.me/cisfinder'>TG CIS FINDER</a> | <a href='https://t.me/tw1zzV'>Twizz_Project</a>\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                    )
            else:
                # –ü—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ has_profile, –Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è - –æ—à–∏–±–∫–∞ –ë–î
                menu_text = (
                    "üéÆ <b>CIS FINDER - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
                    "–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–º <b>Twizz_Project</b>\n\n"
                    "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @twizz_project\n\n"
                    "üåê <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å:</b>\n"
                    "‚Ä¢ <a href='https://vk.com/cisfinder'>VK CIS FINDER</a> | <a href='https://t.me/cisfinder'>TG CIS FINDER</a> | <a href='https://t.me/tw1zzV'>Twizz_Project</a>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
        else:
            # –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∏–ª–∏ –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è
            menu_text = (
                "üéÆ <b>CIS FINDER - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
                "–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–º <b>Twizz_Project</b>\n\n"
                "üåê <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å:</b>\n"
                "‚Ä¢ <a href='https://vk.com/cisfinder'>VK CIS FINDER</a> | <a href='https://t.me/cisfinder'>TG CIS FINDER</a> | <a href='https://t.me/tw1zzV'>Twizz_Project</a>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        is_moderator = await self.db.is_moderator(user_id)
        
        keyboard = Keyboards.main_menu_with_moderation() if is_moderator else Keyboards.main_menu()
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–∏–∞)
        await self.safe_edit_or_send_message(
            query,
            menu_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    async def show_help(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –∏–∑ callback"""
        await query.answer()
        
        help_text = (
            "üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
            "üåê <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å:</b>\n"
            "‚Ä¢ <a href='https://vk.com/cisfinder'>VK CIS FINDER</a> | <a href='https://t.me/cisfinder'>TG CIS FINDER</a> | <a href='https://t.me/tw1zzV'>Twizz_Project</a>\n\n"
            "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
            "1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n"
            "2. –£–∫–∞–∂–∏—Ç–µ —Ä–∞–Ω–≥, —Ä–æ–ª—å –∏ –ª—é–±–∏–º—ã–µ –∫–∞—Ä—Ç—ã\n"
            "3. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤\n"
            "4. –°—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫–∏ –∏–≥—Ä–æ–∫–∞–º\n"
            "5. –ü—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ - —É –≤–∞—Å —Ç–∏–º–º–µ–π—Ç!\n\n"
            "<b>–£–¥–∞—á–Ω—ã—Ö –∏–≥—Ä!</b> üöÄ"
        )
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–∏–∞)
        await self.safe_edit_or_send_message(
            query,
            help_text,
            reply_markup=Keyboards.back_button("back_to_main"),
            parse_mode='HTML'
        )

    async def show_settings_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await query.answer()
        
        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
        )
        
        await query.edit_message_text(
            settings_text,
            reply_markup=Keyboards.settings_menu(),
            parse_mode='HTML'
        )

    async def handle_settings_option(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await query.answer()
        
        option_name = data.replace("settings_", "")
        
        # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
        if option_name == "filters":
            await self.show_search_filters_menu(query)
            return
            
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if option_name == "notifications":
            await self.show_notifications_menu(query)
            return
            
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
        if option_name == "privacy":
            await self.show_privacy_menu(query)
            return
            
        # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_info = {}
        
        if option_name in settings_info:
            info = settings_info[option_name]
            text = (
                f"{info['title']}\n\n"
                f"{info['text']}\n\n"
                "<i>üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>"
            )
        else:
            text = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.back_button("settings_menu"),
            parse_mode='HTML'
        )
    
    # === –§–ò–õ–¨–¢–†–´ –ü–û–ò–°–ö–ê ===
    
    async def show_search_filters_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await self.db.get_user_settings(user_id)
        if not settings:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await self.db.update_user_settings(user_id)
            settings = await self.db.get_user_settings(user_id)
        
        filters = settings.get_search_filters()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        text = (
            "üéØ <b>–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
            "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        from bot.utils.cs2_data import format_elo_filter_display
        elo_text = format_elo_filter_display(filters['elo_filter'])
        text += f"üéØ <b>ELO –¥–∏–∞–ø–∞–∑–æ–Ω:</b> {elo_text}\n"
        
        roles_count = len(filters.get('preferred_roles', []))
        if roles_count == 0:
            text += "üë• <b>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ä–æ–ª—è–º:</b> –õ—é–±—ã–µ —Ä–æ–ª–∏\n"
        else:
            text += f"üë• <b>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ä–æ–ª—è–º:</b> {roles_count} –≤—ã–±—Ä–∞–Ω–æ\n"
        
        maps_labels = {
            'any': 'üåç –õ—é–±—ã–µ –∫–∞—Ä—Ç—ã',
            'soft': 'üéØ –ú–∏–Ω. 1 –æ–±—â–∞—è',
            'moderate': 'üéØ –ú–∏–Ω. 2 –æ–±—â–∏–µ',
            'strict': 'üó∫Ô∏è –¢–æ–ª—å–∫–æ –æ–±—â–∏–µ'
        }
        unknown_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        text += f"üó∫Ô∏è <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–∞—Ä—Ç:</b> {maps_labels.get(filters['maps_compatibility'], unknown_text)}\n"
        
        time_labels = {
            'any': 'üåç –õ—é–±–æ–µ –≤—Ä–µ–º—è',
            'soft': 'üïê –ú–∏–Ω. 1 –æ–±—â–∏–π —Å–ª–æ—Ç',
            'strict': '‚è∞ –¢–æ–ª—å–∫–æ –æ–±—â–µ–µ –≤—Ä–µ–º—è'
        }
        text += f"‚è∞ <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏:</b> {time_labels.get(filters['time_compatibility'], unknown_text)}\n"
        
        text += f"üìä <b>–ú–∏–Ω. —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b> {filters['min_compatibility']}%\n"
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.filters_settings_menu(filters),
            parse_mode='HTML'
        )
    
    async def handle_filter_option(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        await query.answer()
        
        if data == "filter_elo":
            await self.show_elo_filter_options(query)
        elif data == "filter_roles":
            await self.show_roles_filter_options(query)
        elif data == "filter_maps":
            await self.show_maps_filter_options(query)
        elif data == "filter_time":
            await self.show_time_filter_options(query)
        elif data == "filter_compatibility":
            await self.show_compatibility_filter_options(query)
        elif data == "filters_reset":
            await self.reset_search_filters(query)
        else:
            await self.show_search_filters_menu(query)
            
    async def show_elo_filter_options(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ ELO —Å –Ω–æ–≤—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏"""
        user_id = query.from_user.id
        settings = await self.db.get_user_settings(user_id)
        current_filter = settings.get_search_filters()['elo_filter'] if settings else 'any'
        
        text = (
            "üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ELO –¥–∏–∞–ø–∞–∑–æ–Ω–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω ELO –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
            "üî∞ <b>–î–æ 1999 ELO</b>\n"
            "‚≠ê <b>2000-2699 ELO</b>\n"
            "üèÜ <b>2700-3099 ELO</b>\n"
            "üíé <b>3100+ ELO</b>\n"
            "üëë <b>TOP 1000</b>"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.filter_elo_settings_menu(current_filter),
            parse_mode='HTML'
        )
    
    async def show_roles_filter_options(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Ä–æ–ª–µ–π"""
        user_id = query.from_user.id
        settings = await self.db.get_user_settings(user_id)
        preferred_roles = settings.get_search_filters()['preferred_roles'] if settings else []
        
        text = (
            "üë• <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ —Ä–æ–ª—è–º</b>\n\n"
            f"–í—ã–±—Ä–∞–Ω–æ: {len(preferred_roles)} —Ä–æ–ª–µ–π\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ:"
        )
        
        from bot.utils.cs2_data import CS2_ROLES
        
        keyboard = []
        for role in CS2_ROLES:
            is_selected = role['name'] in preferred_roles
            prefix = '‚úÖ ' if is_selected else ''
            keyboard.append([InlineKeyboardButton(
                f"{prefix}{role['emoji']} {role['name']}",
                callback_data=f"toggle_role_{role['name']}"
            )])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_buttons = []
        if preferred_roles:
            control_buttons.append(InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_roles"))
        
        control_buttons.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_filters"))
        keyboard.append(control_buttons)
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def show_maps_filter_options(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ä—Ç"""
        user_id = query.from_user.id
        settings = await self.db.get_user_settings(user_id)
        current_filter = settings.get_search_filters()['maps_compatibility'] if settings else 'any'
        
        text = (
            "üó∫Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–∞—Ä—Ç</b>\n\n"
            "–ö–∞–∫ —Å—Ç—Ä–æ–≥–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ª—é–±–∏–º—ã–µ –∫–∞—Ä—Ç—ã:"
        )
        
        options = [
            ('any', 'üåç –õ—é–±—ã–µ –∫–∞—Ä—Ç—ã', '–ù–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—ã'),
            ('soft', 'üéØ –ú–∏–Ω. 1 –æ–±—â–∞—è', '–ú–∏–Ω–∏–º—É–º 1 –æ–±—â–∞—è –∫–∞—Ä—Ç–∞'),
            ('moderate', 'üéØ –ú–∏–Ω. 2 –æ–±—â–∏–µ', '–ú–∏–Ω–∏–º—É–º 2 –æ–±—â–∏–µ –∫–∞—Ä—Ç—ã'),
            ('strict', 'üó∫Ô∏è –¢–æ–ª—å–∫–æ –æ–±—â–∏–µ', '–¢–æ–ª—å–∫–æ —Å –æ–±—â–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏')
        ]
        
        keyboard = []
        for value, label, desc in options:
            prefix = '‚úÖ ' if current_filter == value else ''
            keyboard.append([InlineKeyboardButton(
                f"{prefix}{label}", 
                callback_data=f"set_maps_filter_{value}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_filters")])
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def show_time_filter_options(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        user_id = query.from_user.id
        settings = await self.db.get_user_settings(user_id)
        current_filter = settings.get_search_filters()['time_compatibility'] if settings else 'any'
        
        text = (
            "‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
            "–ö–∞–∫ —Å—Ç—Ä–æ–≥–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –∏–≥—Ä—ã:"
        )
        
        options = [
            ('any', 'üåç –õ—é–±–æ–µ –≤—Ä–µ–º—è', '–ù–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤—Ä–µ–º—è'),
            ('soft', 'üïê –ú–∏–Ω. 1 –æ–±—â–∏–π —Å–ª–æ—Ç', '–ú–∏–Ω–∏–º—É–º 1 –æ–±—â–∏–π —Å–ª–æ—Ç'),
            ('strict', '‚è∞ –¢–æ–ª—å–∫–æ –æ–±—â–µ–µ', '–¢–æ–ª—å–∫–æ —Å –æ–±—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º')
        ]
        
        keyboard = []
        for value, label, desc in options:
            prefix = '‚úÖ ' if current_filter == value else ''
            keyboard.append([InlineKeyboardButton(
                f"{prefix}{label}", 
                callback_data=f"set_time_filter_{value}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_filters")])
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def show_compatibility_filter_options(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        user_id = query.from_user.id
        settings = await self.db.get_user_settings(user_id)
        current_threshold = settings.get_search_filters()['min_compatibility'] if settings else 30
        
        text = (
            "üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: {current_threshold}%\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:"
        )
        
        thresholds = [0, 30, 50, 70, 90]
        
        keyboard = []
        for threshold in thresholds:
            if threshold == 0:
                label = "üåç –õ—é–±–∞—è (0%)"
                desc = "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤"
            elif threshold == 30:
                label = "üìâ –ù–∏–∑–∫–∞—è (30%)"
                desc = "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            elif threshold == 50:
                label = "‚öñÔ∏è –°—Ä–µ–¥–Ω—è—è (50%)"
                desc = "–£–º–µ—Ä–µ–Ω–Ω—ã–π –æ—Ç–±–æ—Ä"
            elif threshold == 70:
                label = "üî• –í—ã—Å–æ–∫–∞—è (70%)"
                desc = "–°—Ç—Ä–æ–≥–∏–π –æ—Ç–±–æ—Ä"
            else:
                label = "üèÜ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (90%)"
                desc = "–¢–æ–ª—å–∫–æ –∏–¥–µ–∞–ª—å–Ω—ã–µ —Ç–∏–º–º–µ–π—Ç—ã"
            
            prefix = '‚úÖ ' if current_threshold == threshold else ''
            keyboard.append([InlineKeyboardButton(
                f"{prefix}{label}",
                callback_data=f"set_compatibility_{threshold}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_filters")])
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def reset_search_filters(self, query):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞"""
        user_id = query.from_user.id
        
        logger.info(f"üîÑ Resetting filters for user {user_id}")
        
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            default_filters = {
                'elo_filter': 'any',
                'preferred_roles': [],
                'maps_compatibility': 'any',
                'time_compatibility': 'any',
                'min_compatibility': 30,
                'max_candidates': 20
            }
            
            logger.info(f"üîÑ Default filters: {default_filters}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await self.db.update_user_settings(user_id, search_filters=default_filters)
            
            if success:
                logger.info(f"‚úÖ Filters reset successfully for user {user_id}")
                await query.answer("‚úÖ –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã!", show_alert=True)
                await self.show_search_filters_menu(query)
            else:
                logger.error(f"‚ùå Failed to reset filters for user {user_id}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤", show_alert=True)
                
        except Exception as e:
            logger.error(f"‚ùå Exception in reset_search_filters for user {user_id}: {e}", exc_info=True)
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def handle_elo_filter_update(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ELO —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤)"""
        await query.answer()
        user_id = query.from_user.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ callback data
        filter_id = data.replace("filter_elo_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await self.db.get_user_settings(user_id)
        if settings:
            filters = settings.get_search_filters()
            filters['elo_filter'] = filter_id
            await self.db.update_user_settings(user_id, search_filters=filters)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self.db.update_user_settings(user_id, search_filters={'elo_filter': filter_id})
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from bot.utils.cs2_data import format_elo_filter_display
        filter_text = format_elo_filter_display(filter_id)
        await query.answer(f"‚úÖ ELO —Ñ–∏–ª—å—Ç—Ä: {filter_text}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—â–µ–º—É –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
        await self.show_search_filters_menu(query)

    async def handle_filter_update(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        await query.answer()
        user_id = query.from_user.id
        
        if data.startswith("toggle_role_"):
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏–º–µ–Ω–∏ —Ä–æ–ª–∏
            role_result = safe_parse_string_value(data, "toggle_role_")
            if not role_result.is_valid:
                logger.error(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data –≤ toggle_role: {data} - {role_result.error_message}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            role_name = role_result.parsed_data['value']
            settings = await self.db.get_user_settings(user_id)
            filters = settings.get_search_filters() if settings else {}
            preferred_roles = filters.get('preferred_roles', [])
            
            if role_name in preferred_roles:
                preferred_roles.remove(role_name)
            else:
                preferred_roles.append(role_name)
            
            filters['preferred_roles'] = preferred_roles
            await self.db.update_user_settings(user_id, search_filters=filters)
            await self.show_roles_filter_options(query)
            
        elif data == "clear_roles":
            # –û—á–∏—â–∞–µ–º —Ä–æ–ª–∏
            settings = await self.db.get_user_settings(user_id)
            filters = settings.get_search_filters() if settings else {}
            filters['preferred_roles'] = []
            await self.db.update_user_settings(user_id, search_filters=filters)
            await self.show_roles_filter_options(query)
            
        elif data.startswith("set_maps_filter_"):
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ä—Ç
            value_result = safe_parse_string_value(data, "set_maps_filter_")
            if not value_result.is_valid:
                logger.error(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data –≤ set_maps_filter: {data} - {value_result.error_message}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            value = value_result.parsed_data['value']
            settings = await self.db.get_user_settings(user_id)
            filters = settings.get_search_filters() if settings else {}
            filters['maps_compatibility'] = value
            await self.db.update_user_settings(user_id, search_filters=filters)
            await self.show_search_filters_menu(query)
            
        elif data.startswith("set_time_filter_"):
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
            value_result = safe_parse_string_value(data, "set_time_filter_")
            if not value_result.is_valid:
                logger.error(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data –≤ set_time_filter: {data} - {value_result.error_message}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            value = value_result.parsed_data['value']
            settings = await self.db.get_user_settings(user_id)
            filters = settings.get_search_filters() if settings else {}
            filters['time_compatibility'] = value
            await self.db.update_user_settings(user_id, search_filters=filters)
            await self.show_search_filters_menu(query)
            
        elif data.startswith("set_compatibility_"):
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            value_result = safe_parse_numeric_value(data, "set_compatibility_", (0, 100))
            if not value_result.is_valid:
                logger.error(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data –≤ set_compatibility: {data} - {value_result.error_message}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            value = value_result.parsed_data['value']
            settings = await self.db.get_user_settings(user_id)
            filters = settings.get_search_filters() if settings else {}
            filters['min_compatibility'] = value
            await self.db.update_user_settings(user_id, search_filters=filters)
            await self.show_search_filters_menu(query)
        
        else:
            # –ù–µ–∑–Ω–∞–∫–æ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
            await self.show_search_filters_menu(query)
    
    # === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
    
    async def show_notifications_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await self.db.get_user_settings(user_id)
        if not settings:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await self.db.update_user_settings(user_id)
            settings = await self.db.get_user_settings(user_id)
        
        notifications = settings.get_notification_settings()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        text = (
            "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n\n"
        )
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ
        text += "<b>üì¢ –í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        match_status = "‚úÖ" if notifications['new_match'] else "‚ùå"
        like_status = "‚úÖ" if notifications['new_like'] else "‚ùå"
        text += f"{match_status} –ù–æ–≤—ã–µ —Ç–∏–º–º–µ–π—Ç—ã\n"
        text += f"{like_status} –ù–æ–≤—ã–µ –ª–∞–π–∫–∏\n\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
        text += "<b>üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:</b>\n"
        candidates_status = "‚úÖ" if notifications['new_candidates'] else "‚ùå"
        stats_status = "‚úÖ" if notifications['weekly_stats'] else "‚ùå"
        text += f"{candidates_status} –ù–æ–≤—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã\n"
        text += f"{stats_status} –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ
        text += "<b>üí° –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ:</b>\n"
        tips_status = "‚úÖ" if notifications['profile_tips'] else "‚ùå"
        reminders_status = "‚úÖ" if notifications['return_reminders'] else "‚ùå"
        text += f"{tips_status} –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ—Ñ–∏–ª—é\n"
        text += f"{reminders_status} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏\n\n"
        
        # –¢–∏—Ö–∏–µ —á–∞—Å—ã
        quiet_status = "‚úÖ" if notifications['quiet_hours_enabled'] else "‚ùå"
        if notifications['quiet_hours_enabled']:
            text += f"{quiet_status} –¢–∏—Ö–∏–µ —á–∞—Å—ã: {notifications['quiet_hours_start']}:00 - {notifications['quiet_hours_end']}:00"
        else:
            text += f"{quiet_status} –¢–∏—Ö–∏–µ —á–∞—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üéâ –ù–æ–≤—ã–µ —Ç–∏–º–º–µ–π—Ç—ã", callback_data="notify_toggle_new_match")],
            [InlineKeyboardButton("‚ù§Ô∏è –ù–æ–≤—ã–µ –ª–∞–π–∫–∏", callback_data="notify_toggle_new_like")],
            [InlineKeyboardButton("üîç –ù–æ–≤—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã", callback_data="notify_toggle_new_candidates")],
            [InlineKeyboardButton("üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="notify_toggle_weekly_stats")],
            [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="notify_toggle_profile_tips")],
            [InlineKeyboardButton("üéÆ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏", callback_data="notify_toggle_return_reminders")],
            [InlineKeyboardButton("üò¥ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∏—Ö–∏–µ —á–∞—Å—ã", callback_data="notify_quiet_hours")],
            [
                InlineKeyboardButton("üîÑ –í—Å–µ –≤–∫–ª", callback_data="notify_enable_all"),
                InlineKeyboardButton("‚ùå –í—Å–µ –≤—ã–∫–ª", callback_data="notify_disable_all")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")]
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def show_quiet_hours_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤"""
        user_id = query.from_user.id
        settings = await self.db.get_user_settings(user_id)
        notifications = settings.get_notification_settings()
        
        enabled = notifications['quiet_hours_enabled']
        start_hour = notifications['quiet_hours_start']
        end_hour = notifications['quiet_hours_end']
        
        text = (
            "üò¥ <b>–¢–∏—Ö–∏–µ —á–∞—Å—ã</b>\n\n"
            "–í —ç—Ç–æ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–µ –±—É–¥—É—Ç\n\n"
        )
        
        if enabled:
            text += f"<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –í–∫–ª—é—á–µ–Ω—ã\n"
            text += f"<b>–í—Ä–µ–º—è:</b> —Å {start_hour}:00 –¥–æ {end_hour}:00\n\n"
            text += "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤:"
        else:
            text += "<b>–°—Ç–∞—Ç—É—Å:</b> ‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã\n\n"
            text += "–í–∫–ª—é—á–∏—Ç–µ —Ç–∏—Ö–∏–µ —á–∞—Å—ã –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ —Å–Ω–∞:"
        
        # –ö–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
        keyboard = []
        
        if enabled:
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —Ç–∏—Ö–∏–µ —á–∞—Å—ã", callback_data="notify_quiet_disable")])
        else:
            keyboard.append([InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å —Ç–∏—Ö–∏–µ —á–∞—Å—ã", callback_data="notify_quiet_enable")])
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
        time_options = [
            ("üåô 23:00 - 8:00 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)", "notify_quiet_set_23_8"),
            ("üò¥ 22:00 - 9:00 (—Ä–∞–Ω–Ω–∏–π —Å–æ–Ω)", "notify_quiet_set_22_9"),
            ("ü¶â 1:00 - 10:00 (—Å–æ–≤–∞)", "notify_quiet_set_1_10"),
            ("üì± –¢–æ–ª—å–∫–æ –Ω–æ—á—å—é (0:00 - 6:00)", "notify_quiet_set_0_6")
        ]
        
        for label, callback in time_options:
            current = (start_hour == int(callback.split('_')[-2]) and 
                      end_hour == int(callback.split('_')[-1]))
            prefix = "‚úÖ " if enabled and current else ""
            keyboard.append([InlineKeyboardButton(f"{prefix}{label}", callback_data=callback)])
        
        keyboard.append([InlineKeyboardButton("üîô –ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º", callback_data="settings_notifications")])
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def handle_notification_update(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        await query.answer()
        user_id = query.from_user.id
        
        if data.startswith("notify_toggle_"):
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_type = data.replace("notify_toggle_", "")
            settings = await self.db.get_user_settings(user_id)
            if not settings:
                await self.db.update_user_settings(user_id)
                settings = await self.db.get_user_settings(user_id)
                
            notifications = settings.get_notification_settings()
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            current_value = notifications.get(notification_type, False)
            new_value = not current_value
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if notification_type in ['new_match', 'new_like'] and new_value:
                # –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤–∫–ª—é—á–∞–µ–º –æ–±—â–∏–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
                settings.notifications_enabled = True
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            settings.update_notification_settings(**{notification_type: new_value})
            await self.db.update_user_settings(
                user_id, 
                notifications_enabled=settings.notifications_enabled,
                privacy_settings=json.dumps(settings.privacy_settings)
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
            await self.show_notifications_menu(query)
            
        elif data == "notify_enable_all":
            # –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            settings = await self.db.get_user_settings(user_id)
            if not settings:
                await self.db.update_user_settings(user_id)
                settings = await self.db.get_user_settings(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ –º–µ–Ω—è—Ç—å
            current_notifications = settings.get_notification_settings()
            if settings.notifications_enabled and all([
                current_notifications.get('new_match', False),
                current_notifications.get('new_like', False),
                current_notifications.get('new_candidates', False),
                current_notifications.get('weekly_stats', False),
                current_notifications.get('profile_tips', False),
                current_notifications.get('return_reminders', False)
            ]):
                # –£–∂–µ –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–æ
                await query.answer("‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã!", show_alert=True)
                return
            
            # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ
            all_on = {
                'new_match': True,
                'new_like': True,
                'new_candidates': True,
                'weekly_stats': True,
                'profile_tips': True,
                'return_reminders': True
            }
            settings.update_notification_settings(**all_on)
            await self.db.update_user_settings(
                user_id,
                notifications_enabled=True,
                privacy_settings=json.dumps(settings.privacy_settings)
            )
            await query.answer("‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!", show_alert=True)
            await self.show_notifications_menu(query)
            
        elif data == "notify_disable_all":
            # –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            settings = await self.db.get_user_settings(user_id)
            if not settings:
                await self.db.update_user_settings(user_id)
                settings = await self.db.get_user_settings(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ –º–µ–Ω—è—Ç—å
            current_notifications = settings.get_notification_settings()
            if not settings.notifications_enabled and not any([
                current_notifications.get('new_match', False),
                current_notifications.get('new_like', False),
                current_notifications.get('new_candidates', False),
                current_notifications.get('weekly_stats', False),
                current_notifications.get('profile_tips', False),
                current_notifications.get('return_reminders', False)
            ]):
                # –£–∂–µ –≤—Å–µ –≤—ã–∫–ª—é—á–µ–Ω–æ
                await query.answer("‚ùå –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã!", show_alert=True)
                return
            
            # –í—ã–∫–ª—é—á–∞–µ–º –≤—Å–µ
            settings.update_notification_settings(
                new_match=False,
                new_like=False,
                new_candidates=False,
                weekly_stats=False,
                profile_tips=False,
                return_reminders=False
            )
            await self.db.update_user_settings(
                user_id, 
                notifications_enabled=False,
                privacy_settings=json.dumps(settings.privacy_settings)
            )
            await query.answer("‚ùå –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!", show_alert=True)
            await self.show_notifications_menu(query)
            
        elif data == "notify_quiet_hours":
            # –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
            await self.show_quiet_hours_menu(query)
            
        elif data == "notify_quiet_enable":
            # –í–∫–ª—é—á–∏—Ç—å —Ç–∏—Ö–∏–µ —á–∞—Å—ã
            # –í–∫–ª—é—á–∏—Ç—å —Ç–∏—Ö–∏–µ —á–∞—Å—ã
            settings = await self.db.get_user_settings(user_id)
            settings.update_notification_settings(quiet_hours_enabled=True)
            await self.db.update_user_settings(
                user_id,
                privacy_settings=json.dumps(settings.privacy_settings)
            )
            await self.show_quiet_hours_menu(query)
            
        elif data == "notify_quiet_disable":
            # –û—Ç–∫–ª—é—á–∏—Ç—å —Ç–∏—Ö–∏–µ —á–∞—Å—ã
            # –û—Ç–∫–ª—é—á–∏—Ç—å —Ç–∏—Ö–∏–µ —á–∞—Å—ã
            settings = await self.db.get_user_settings(user_id)
            settings.update_notification_settings(quiet_hours_enabled=False)
            await self.db.update_user_settings(
                user_id,
                privacy_settings=json.dumps(settings.privacy_settings)
            )
            await self.show_quiet_hours_menu(query)
            
        elif data.startswith("notify_quiet_set_"):
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
            parts = data.replace("notify_quiet_set_", "").split("_")
            start_hour = int(parts[0])
            end_hour = int(parts[1])
            
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
            settings = await self.db.get_user_settings(user_id)
            settings.update_notification_settings(
                quiet_hours_enabled=True,
                quiet_hours_start=start_hour,
                quiet_hours_end=end_hour
            )
            await self.db.update_user_settings(
                user_id,
                privacy_settings=json.dumps(settings.privacy_settings)
            )
            await query.answer(f"‚è∞ –¢–∏—Ö–∏–µ —á–∞—Å—ã: {start_hour}:00 - {end_hour}:00", show_alert=True)
            await self.show_quiet_hours_menu(query)
            
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
            await self.show_notifications_menu(query)

    # === –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–í–ê–¢–ù–û–°–¢–ò ===

    async def show_privacy_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
        try:
            user_id = query.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_settings = await self.db.get_user_settings(user_id)
            if user_settings and user_settings.privacy_settings:
                privacy_settings = user_settings.privacy_settings
            else:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                privacy_settings = {
                    'profile_visibility': 'all',
                    'who_can_like': 'all',
                    'show_elo': True,
                    'show_stats': True,
                    'show_matches_count': True,
                    'show_activity': True,
                    'show_faceit_url': True,
                    'blocked_users': [],
                    'block_reasons': {},
                    'block_expiry': {}
                }
            
            text = (
                "üîí <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏</b>\n\n"
                "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –¥–∞–Ω–Ω—ã—Ö:"
            )
            
            await query.edit_message_text(
                text,
                reply_markup=Keyboards.privacy_main_menu(privacy_settings),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")

    async def handle_privacy_option(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
        try:
            await query.answer()
            user_id = query.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user_settings = await self.db.get_user_settings(user_id)
            if user_settings and user_settings.privacy_settings:
                privacy_settings = user_settings.privacy_settings
            else:
                privacy_settings = {
                    'profile_visibility': 'all',
                    'who_can_like': 'all',
                    'show_elo': True,
                    'show_stats': True,
                    'show_matches_count': True,
                    'show_activity': True,
                    'show_faceit_url': True,
                    'blocked_users': [],
                    'block_reasons': {},
                    'block_expiry': {}
                }
            
            if data == "privacy_visibility":
                await self.show_privacy_visibility_menu(query, privacy_settings)
            elif data == "privacy_likes":
                await self.show_privacy_likes_menu(query, privacy_settings)
            elif data == "privacy_display":
                await self.show_privacy_display_menu(query, privacy_settings)
            elif data == "privacy_blocking":
                await self.show_privacy_blocking_menu(query, privacy_settings)
            elif data == "privacy_menu":
                await self.show_privacy_menu(query)
            elif data.startswith("visibility_"):
                await self.handle_visibility_change(query, data, privacy_settings)
            elif data.startswith("likes_"):
                await self.handle_likes_change(query, data, privacy_settings)
            elif data.startswith("toggle_"):
                await self.handle_display_toggle(query, data, privacy_settings)
            elif data.startswith("unblock_"):
                await self.handle_unblock_user(query, data, privacy_settings)
            elif data.startswith("confirm_privacy_"):
                await self.handle_privacy_confirmation(query, data, privacy_settings)
            elif data.startswith("cancel_privacy_"):
                await self.handle_privacy_cancellation(query, data)
            else:
                await self.show_privacy_menu(query)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø—Ü–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ {data}: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    async def show_privacy_visibility_menu(self, query, privacy_settings):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        current_visibility = privacy_settings.get('profile_visibility', 'all')
        
        descriptions = {
            'all': '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ø–æ–∏—Å–∫–µ',
            'matches_only': '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, —Å –∫–µ–º —É –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–µ –ª–∞–π–∫–∏',
            'hidden': '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç –∏–∑ –ø–æ–∏—Å–∫–∞'
        }
        
        current_desc = descriptions.get(current_visibility, descriptions['all'])
        
        text = (
            "üëÅÔ∏è <b>–í–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            f"<i>–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:</i> {current_desc}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É:"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.privacy_visibility_menu(current_visibility),
            parse_mode='HTML'
        )

    async def show_privacy_likes_menu(self, query, privacy_settings):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∞–π–∫–æ–≤"""
        current_likes = privacy_settings.get('who_can_like', 'all')
        
        descriptions = {
            'all': '–õ—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –ª–∞–π–∫',
            'compatible_elo': '–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ —Å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º ELO (¬±2 —É—Ä–æ–≤–Ω—è)',
            'common_maps': '–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ —Å –æ–±—â–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ (–º–∏–Ω–∏–º—É–º 2)',
            'active_users': '–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ (–∑–∞—Ö–æ–¥–∏–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é)'
        }
        
        current_desc = descriptions.get(current_likes, descriptions['all'])
        
        text = (
            "üíå <b>–ö—Ç–æ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∞–π–∫–∏</b>\n\n"
            f"<i>–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:</i> {current_desc}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É:"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.privacy_likes_menu(current_likes),
            parse_mode='HTML'
        )

    async def show_privacy_display_menu(self, query, privacy_settings):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        text = (
            "üìä <b>–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ:\n\n"
            "‚Ä¢ <i>–°–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</i>\n"
            "‚Ä¢ <i>–≠—Ç–æ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞</i>"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.privacy_display_menu(privacy_settings),
            parse_mode='HTML'
        )

    async def show_privacy_blocking_menu(self, query, privacy_settings):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
        blocked_users = privacy_settings.get('blocked_users', [])
        
        if blocked_users:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            blocked_users_info = []
            for user_id in blocked_users[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è username
                reason = privacy_settings.get('block_reasons', {}).get(str(user_id), '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                blocked_users_info.append((user_id, f"User_{user_id}", reason))
            
            text = (
                f"üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
                f"–í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {len(blocked_users)}\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:"
            )
        else:
            blocked_users_info = []
            text = (
                "üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–∏—Å–∫–µ."
            )
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.privacy_blocking_menu(blocked_users_info),
            parse_mode='HTML'
        )

    async def handle_visibility_change(self, query, data, privacy_settings):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        new_visibility = data.replace('visibility_', '')
        old_visibility = privacy_settings.get('profile_visibility', 'all')
        
        if new_visibility == old_visibility:
            await query.answer("‚úÖ –≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        privacy_settings['profile_visibility'] = new_visibility
        
        user_id = query.from_user.id
        success = await self.db.update_user_settings(
            user_id,
            privacy_settings=privacy_settings
        )
        
        if success:
            visibility_names = {
                'all': '–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
                'matches_only': '–¢–æ–ª—å–∫–æ –≤–∑–∞–∏–º–Ω—ã–º –ª–∞–π–∫–∞–º',
                'hidden': '–°–∫—Ä—ã—Ç'
            }
            await query.answer(f"‚úÖ –í–∏–¥–∏–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {visibility_names[new_visibility]}")
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        await self.show_privacy_menu(query)

    async def handle_likes_change(self, query, data, privacy_settings):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∞–π–∫–æ–≤"""
        new_likes = data.replace('likes_', '')
        old_likes = privacy_settings.get('who_can_like', 'all')
        
        if new_likes == old_likes:
            await query.answer("‚úÖ –≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        privacy_settings['who_can_like'] = new_likes
        
        user_id = query.from_user.id
        success = await self.db.update_user_settings(
            user_id,
            privacy_settings=privacy_settings
        )
        
        if success:
            likes_names = {
                'all': '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                'compatible_elo': '–°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–æ ELO',
                'common_maps': '–° –æ–±—â–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏',
                'active_users': '–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ'
            }
            await query.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∞–π–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {likes_names[new_likes]}")
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        await self.show_privacy_menu(query)

    async def handle_display_toggle(self, query, data, privacy_settings):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: toggle_show_elo_hide –∏–ª–∏ toggle_show_elo_show
        parts = data.split('_')
        if len(parts) < 4:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
            return
        
        setting_key = '_'.join(parts[1:3])  # show_elo, show_stats, –∏ —Ç.–¥.
        action = parts[3]  # hide –∏–ª–∏ show
        
        new_value = action == 'show'
        privacy_settings[setting_key] = new_value
        
        user_id = query.from_user.id
        success = await self.db.update_user_settings(
            user_id,
            privacy_settings=privacy_settings
        )
        
        if success:
            setting_names = {
                'show_elo': 'ELO Faceit',
                'show_stats': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∞–π–∫–æ–≤',
                'show_matches_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–º–º–µ–π—Ç–æ–≤',
                'show_activity': '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                'show_faceit_url': '–°—Å—ã–ª–∫–∞ Faceit'
            }
            setting_name = setting_names.get(setting_key, setting_key)
            action_text = "–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è" if new_value else "—Å–∫—Ä—ã—Ç–æ"
            await query.answer(f"‚úÖ {setting_name}: {action_text}")
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        await self.show_privacy_display_menu(query, privacy_settings)

    async def handle_unblock_user(self, query, data, privacy_settings):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ user_id –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        user_id_result = safe_parse_user_id(data, "unblock_")
        if not user_id_result.is_valid:
            logger.error(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data –≤ unblock_user: {data} - {user_id_result.error_message}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        user_id_to_unblock = user_id_result.parsed_data['user_id']
        
        blocked_users = privacy_settings.get('blocked_users', [])
        if user_id_to_unblock in blocked_users:
            blocked_users.remove(user_id_to_unblock)
            privacy_settings['blocked_users'] = blocked_users
            
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            block_reasons = privacy_settings.get('block_reasons', {})
            block_expiry = privacy_settings.get('block_expiry', {})
            block_reasons.pop(str(user_id_to_unblock), None)
            block_expiry.pop(str(user_id_to_unblock), None)
            
            user_id = query.from_user.id
            success = await self.db.update_user_settings(
                user_id,
                privacy_settings=privacy_settings
            )
            
            if success:
                await query.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_unblock} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        else:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")
        
        await self.show_privacy_blocking_menu(query, privacy_settings)

    async def handle_privacy_confirmation(self, query, data, privacy_settings):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        await self.show_privacy_menu(query)

    async def handle_privacy_cancellation(self, query, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
        await query.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")
        await self.show_privacy_menu(query)

    # === –ò–°–¢–û–†–ò–Ø –õ–ê–ô–ö–û–í ===

    async def show_likes_history(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –ª–∞–π–∫–æ–≤"""
        await query.answer()
        user_id = query.from_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∞–π–∫–æ–≤
            stats = await self.db.get_likes_statistics(user_id)
            
            menu_text = (
                "üíå <b>–ò—Å—Ç–æ—Ä–∏—è –ª–∞–π–∫–æ–≤</b>\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {stats['total_received']}\n"
                f"‚Ä¢ –ù–æ–≤—ã—Ö –ª–∞–π–∫–æ–≤: {stats['new_likes']}\n"
                f"‚Ä¢ –í–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–æ–≤: {stats['mutual_likes']}\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∞–π–∫–æ–≤: {stats['sent_likes']}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            keyboard = Keyboards.likes_history_menu()
            await self.safe_edit_or_send_message(query, menu_text, keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ª–∞–π–∫–æ–≤ –¥–ª—è {user_id}: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await self.show_main_menu(query)

    async def show_likes_list(self, query, new_only: bool = False, page: int = 0):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤"""
        await query.answer()
        user_id = query.from_user.id
        
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            limit = 5
            offset = page * limit
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–∏
            likes = await self.db.get_received_likes(
                user_id=user_id,
                new_only=new_only,
                limit=limit + 1,  # +1 —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                offset=offset
            )
            
            has_next = len(likes) > limit
            if has_next:
                likes = likes[:limit]  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
            
            if not likes:
                if new_only:
                    message_text = (
                        "üíå <b>–ù–æ–≤—ã–µ –ª–∞–π–∫–∏</b>\n\n"
                        "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ª–∞–π–∫–æ–≤</b>\n"
                        "–ù–æ–≤—ã–µ –ª–∞–π–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º –ª–∞–π–∫!"
                    )
                else:
                    message_text = (
                        "üíå <b>–í—Å–µ –ª–∞–π–∫–∏</b>\n\n"
                        "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–∞–π–∫–æ–≤</b>\n"
                        "–õ–∞–π–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –æ—Ü–µ–Ω—è—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!"
                    )
                
                keyboard = Keyboards.likes_history_menu()
                await self.safe_edit_or_send_message(query, message_text, keyboard)
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ª–∞–π–∫–æ–≤ —Å –∫—Ä–∞—Ç–∫–∏–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
            title = "üíå –ù–æ–≤—ã–µ –ª–∞–π–∫–∏" if new_only else "üìã –í—Å–µ –ª–∞–π–∫–∏"
            message_text = f"{title}\n\n"
            
            # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∞–π–∫–∞
            keyboard_rows = []
            
            for like in likes:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                created_at = like['created_at']
                if isinstance(created_at, str):
                    from datetime import datetime
                    created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                status_emoji = "üí´" if like['response_status'] == 'mutual' else "‚è≥"
                message_text += f"{status_emoji} {like['game_nickname']} ‚Ä¢ {like['faceit_elo']} ELO ‚Ä¢ {like['role']} ‚Ä¢ {created_at.strftime('%d.%m')}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤
                if like['response_status'] != 'mutual':
                    # Row 1: –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ª–∞–π–∫–∞
                    keyboard_rows.append([
                        InlineKeyboardButton(
                            f"‚ù§Ô∏è {like['game_nickname']} ‚Ä¢ {like['faceit_elo']} ‚Ä¢ {like['role']}",
                            callback_data=f"reply_like_{like['liker_id']}"
                        )
                    ])
                    
                    # Row 2: –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –ø—Ä–æ–ø—É—Å–∫–∞
                    keyboard_rows.append([
                        InlineKeyboardButton("üëÅÔ∏è", callback_data=f"view_profile_{like['liker_id']}"),
                        InlineKeyboardButton("‚ùå", callback_data=f"skip_like_{like['liker_id']}")
                    ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤–Ω–∏–∑—É
            has_prev = page > 0
            navigation_keyboard = Keyboards.like_history_navigation(
                has_prev=has_prev,
                has_next=has_next,
                page=page
            )
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–æ–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
            if navigation_keyboard:
                keyboard_rows.extend(navigation_keyboard.inline_keyboard)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            final_keyboard = InlineKeyboardMarkup(keyboard_rows) if keyboard_rows else None
            
            await self.safe_edit_or_send_message(query, message_text, final_keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∞–π–∫–æ–≤ –¥–ª—è {user_id}: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await self.show_likes_history(query)

    async def handle_like_response(self, query, liker_id: int, action: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ª–∞–π–∫"""
        await query.answer()
        user_id = query.from_user.id
        
        try:
            if action == "reply":
                # –°—Ç–∞–≤–∏–º –ª–∞–π–∫ –≤ –æ—Ç–≤–µ—Ç
                success = await self.db.add_like(user_id, liker_id)
                
                if success:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É
                    try:
                        from bot.utils.notifications import NotificationManager
                        bot = query.bot
                        notification_manager = NotificationManager(bot, self.db)
                        await notification_manager.send_like_notification(
                            liked_user_id=liker_id,  # –¢–æ—Ç, –∫—Ç–æ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫)
                            liker_user_id=user_id    # –¢–æ—Ç, –∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ (–≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫)
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {liker_id} –æ—Ç {user_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ: {e}")
                
                if success:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å
                    is_mutual = await self.db.check_mutual_like(user_id, liker_id)
                    
                    if is_mutual:
                        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á
                        match_success = await self.db.create_match(user_id, liker_id)
                        
                        if match_success:
                            response_text = (
                                "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                                "–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥—Ä—É–≥ –¥—Ä—É–≥–∞ "
                                "–≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Ç–∏–º–º–µ–π—Ç—ã'."
                            )
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
                            try:
                                from bot.utils.notifications import NotificationManager
                                # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                                bot = query.bot
                                notification_manager = NotificationManager(bot, self.db)
                                await notification_manager.send_match_notification(user_id, liker_id)
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ: {e}")
                        else:
                            response_text = "‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞"
                    else:
                        response_text = "‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ï—Å–ª–∏ –±—É–¥–µ—Ç –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å, –≤—ã —É–∑–Ω–∞–µ—Ç–µ –æ–± —ç—Ç–æ–º."
                else:
                    response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∞–π–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
            elif action == "skip":
                # –û—Ç–º–µ—á–∞–µ–º –ª–∞–π–∫ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π
                success = await self.db.mark_like_as_viewed(liker_id, user_id)
                
                if success:
                    response_text = "‚úÖ –õ–∞–π–∫ –ø—Ä–æ–ø—É—â–µ–Ω"
                else:
                    response_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.safe_edit_or_send_message(
                query, 
                response_text,
                Keyboards.likes_history_menu()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª–∞–π–∫ {liker_id} –æ—Ç {user_id}: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await self.show_likes_history(query)

    async def show_user_profile(self, query, profile_user_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await query.answer()
        current_user_id = query.from_user.id
        
        logger.info(f"show_user_profile: current_user_id={current_user_id}, profile_user_id={profile_user_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile = await self.db.get_profile(profile_user_id)
            logger.info(f"show_user_profile: profile found={profile is not None}, status={profile.moderation_status if profile else 'None'}")
            
            if not profile or profile.moderation_status != 'approved':
                logger.warning(f"show_user_profile: Profile not available for user {profile_user_id}")
                await query.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
            user_settings = await self.db.get_user_settings(profile_user_id)
            privacy_settings = user_settings.privacy_settings if user_settings and user_settings.privacy_settings else {}
            logger.info(f"show_user_profile: privacy_settings={privacy_settings}")
            
            visibility = privacy_settings.get('profile_visibility', 'all')
            logger.info(f"show_user_profile: visibility={visibility}")
            
            if visibility == 'hidden':
                logger.info(f"show_user_profile: Profile {profile_user_id} is hidden")
                await query.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å–∫—Ä—ã—Ç")
                return
            elif visibility == 'matches_only':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
                is_match = await self.db.check_mutual_like(current_user_id, profile_user_id)
                logger.info(f"show_user_profile: is_match={is_match}")
                if not is_match:
                    logger.info(f"show_user_profile: Profile {profile_user_id} requires match for user {current_user_id}")
                    await query.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–∏–º–º–µ–π—Ç–∞–º")
                    return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile_text = f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞</b>\n\n"
            profile_text += f"üéÆ <b>{profile.game_nickname}</b>\n"
            
            if privacy_settings.get('show_elo', True):
                profile_text += f"üéØ ELO Faceit: {profile.faceit_elo}\n"
            
            profile_text += f"üë§ –†–æ–ª—å: {profile.role}\n"
            profile_text += f"üó∫Ô∏è –ö–∞—Ä—Ç—ã: {', '.join(profile.favorite_maps[:3])}\n"
            
            if profile.description and len(profile.description.strip()) > 0:
                profile_text += f"\nüìù <b>–û —Å–µ–±–µ:</b>\n{profile.description}\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            keyboard = Keyboards.likes_history_menu()
            logger.info(f"show_user_profile: Sending profile for {profile_user_id}, has_media={profile.media_type is not None}")
            
            if profile.media_type and profile.media_file_id:
                if profile.media_type == 'photo':
                    await query.message.reply_photo(
                        photo=profile.media_file_id,
                        caption=profile_text,
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
                    logger.info(f"show_user_profile: Photo sent for profile {profile_user_id}")
                elif profile.media_type == 'video':
                    await query.message.reply_video(
                        video=profile.media_file_id,
                        caption=profile_text,
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
                    logger.info(f"show_user_profile: Video sent for profile {profile_user_id}")
                else:
                    await self.safe_edit_or_send_message(query, profile_text, keyboard)
                    logger.info(f"show_user_profile: Text message sent for profile {profile_user_id}")
            else:
                await self.safe_edit_or_send_message(query, profile_text, keyboard)
                logger.info(f"show_user_profile: Text message sent for profile {profile_user_id} (no media)")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {profile_user_id} –¥–ª—è {current_user_id}: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await self.show_likes_history(query)
    
    async def _warm_user_network(self, user_id: int):
        """–ü—Ä–æ–≥—Ä–µ–≤–∞–µ—Ç —Å–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ ELO –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from bot.utils.faceit_analyzer import faceit_analyzer
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI
            asyncio.create_task(self._background_warm_user_network(user_id))
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞–Ω–∏—è —Å–µ—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def _background_warm_user_network(self, user_id: int):
        """–§–æ–Ω–æ–≤–æ–µ –ø—Ä–æ–≥—Ä–µ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from bot.utils.faceit_analyzer import faceit_analyzer
            
            warmed_count = await faceit_analyzer.warm_user_network(user_id)
            if warmed_count > 0:
                logger.debug(f"üî• –ü—Ä–æ–≥—Ä–µ—Ç–∞ —Å–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {warmed_count} –ø—Ä–æ—Ñ–∏–ª–µ–π")
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞–Ω–∏—è —Å–µ—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")