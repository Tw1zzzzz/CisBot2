"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è CIS FINDER Bot
–°–æ–∑–¥–∞–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π Twizz_Project
"""
import logging
import asyncio
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from bot.database.operations import DatabaseManager
from bot.utils.cs2_data import format_elo_display, format_role_display, extract_faceit_nickname, PLAYTIME_OPTIONS
from bot.utils.background_processor import TaskPriority
from bot.utils.callback_security import safe_parse_user_id, safe_parse_string_value, sanitize_text_input
from bot.utils.enhanced_callback_security import validate_secure_callback, CallbackValidationResult
from bot.utils.rate_limiter import get_user_security_stats, get_system_security_stats, get_recent_security_events
from bot.utils.security_middleware import get_user_security_report, get_security_summary

logger = logging.getLogger(__name__)

class ModerationHandler:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager

    async def show_moderation_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        query = update.callback_query
        if query:
            await query.answer()
            user_id = query.from_user.id
        else:
            user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not await self.db.is_moderator(user_id):
            text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            
            if query:
                await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await self.db.get_moderation_stats()
        pending_count = stats.get('profiles_pending', 0)
        approved_count = stats.get('profiles_approved', 0)
        rejected_count = stats.get('profiles_rejected', 0)

        text = f"üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {pending_count}\n"
        text += f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {approved_count}\n"
        text += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_count}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        keyboard = [
            [InlineKeyboardButton(f"‚è≥ –ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã ({pending_count})", callback_data="mod_queue")],
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã", callback_data="mod_approved")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã", callback_data="mod_rejected")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="mod_stats")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]

        if query:
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        else:
            await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    async def show_moderation_queue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∞–Ω–∫–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        if not await self.db.is_moderator(user_id):
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        profiles = await self.db.get_profiles_for_moderation('pending', limit=1)
        
        if not profiles:
            text = "‚úÖ –í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!\n\n–ù–µ—Ç –∞–Ω–∫–µ—Ç, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderation_menu")]]
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É
        profile_data = profiles[0]
        context.user_data['moderating_profile'] = profile_data
        
        await self.show_profile_for_moderation(query, profile_data)

    async def show_profile_for_moderation(self, query, profile_data):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        text = "üë®‚Äçüíº <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã</b>\n\n"
        text += await self.format_profile_for_moderation(profile_data)
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{profile_data['user_id']}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{profile_data['user_id']}")
            ],
            [InlineKeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞", callback_data="next_profile")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderation_menu")]
        ]
        
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –æ—à–∏–±–∫–∏ "Message is not modified"
        try:
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        except Exception as e:
            if "message is not modified" in str(e).lower():
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                await query.answer("üìã –ê–Ω–∫–µ—Ç–∞ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                raise e

    async def format_profile_for_moderation(self, profile_data) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        text = f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {profile_data['first_name']}"
        if profile_data['username']:
            text += f" (@{profile_data['username']})"
        text += f"\nüÜî <b>ID:</b> {profile_data['user_id']}\n\n"
        
        text += f"üéÆ <b>–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫:</b> {profile_data['game_nickname']}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ Background Processor (HIGH priority –¥–ª—è moderation)
        elo_stats = None
        try:
            if profile_data['game_nickname'] and profile_data['game_nickname'].strip():
                from bot.utils.faceit_analyzer import faceit_analyzer
                # Use HIGH priority for moderation requests since moderators are actively reviewing
                elo_future = await faceit_analyzer.get_elo_stats_by_nickname_priority(profile_data['game_nickname'], TaskPriority.HIGH)
                
                try:
                    # Wait for result with timeout (don't make moderators wait too long)
                    elo_stats = await asyncio.wait_for(elo_future, timeout=7.0)
                    logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ {profile_data['game_nickname']}")
                except asyncio.TimeoutError:
                    logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è ELO –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ {profile_data['game_nickname']}")
                    elo_stats = None
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ {profile_data['game_nickname']}: {e}")
            # Fallback to direct call if background processor fails
            try:
                elo_stats = await faceit_analyzer.get_elo_stats_by_nickname(profile_data['game_nickname'])
            except Exception:
                elo_stats = None
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ELO —Å –º–∏–Ω/–º–∞–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ú–û–î–ï–†–ê–¶–ò–Ø)
        if elo_stats:
            from bot.utils.cs2_data import format_faceit_elo_display
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π lowest_elo –∏ highest_elo
            lowest_elo = elo_stats.get('lowest_elo', 0)
            highest_elo = elo_stats.get('highest_elo', 0)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ELO –¥–∞–Ω–Ω—ã—Ö –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
            try:
                if isinstance(lowest_elo, (int, float)) and isinstance(highest_elo, (int, float)):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
                    lowest_elo = int(lowest_elo) if lowest_elo >= 0 else 0
                    highest_elo = int(highest_elo) if highest_elo >= 0 else 0
                    current_elo = profile_data['faceit_elo']
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω/–º–∞–∫—Å –¥–∞–∂–µ –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –Ω–æ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if lowest_elo > 0 or highest_elo > 0:
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ ELO –¥–∞–Ω–Ω—ã—Ö
                        data_quality = "‚úÖ –í–∞–ª–∏–¥–Ω–∞—è" if lowest_elo <= current_elo <= highest_elo or (lowest_elo == 0 and highest_elo == 0) else "‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è"
                        logger.info(f"üî• MODERATION: {data_quality} ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {profile_data['game_nickname']}: —Ç–µ–∫—É—â–∏–π={current_elo}, –º–∏–Ω={lowest_elo}, –º–∞–∫—Å={highest_elo}")
                        
                        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ELO –∑–Ω–∞—á–µ–Ω–∏–π
                        if lowest_elo <= current_elo <= highest_elo or (lowest_elo == 0 and highest_elo == 0):
                            text += f"üéØ <b>ELO Faceit:</b> {format_faceit_elo_display(current_elo, lowest_elo, highest_elo, profile_data['game_nickname'])}\n"
                        else:
                            logger.warning(f"‚ö†Ô∏è MODERATION: –õ–æ–≥–∏—á–µ—Å–∫–∞—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ELO –¥–ª—è {profile_data['game_nickname']}: current={current_elo}, min={lowest_elo}, max={highest_elo}")
                            # Fallback –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç API
                            text += f"üéØ <b>ELO Faceit:</b> {format_elo_display(current_elo)} ‚ö†Ô∏è\n"
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                            text += f"<i>   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–∏–Ω/–º–∞–∫—Å ELO –≤ API</i>\n"
                    else:
                        # –ï—Å–ª–∏ –º–∏–Ω/–º–∞–∫—Å —Ä–∞–≤–Ω—ã 0, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π ELO
                        text += f"üéØ <b>ELO Faceit:</b> {format_elo_display(current_elo)}\n"
                else:
                    logger.warning(f"‚ö†Ô∏è MODERATION: ELO –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è {profile_data['game_nickname']}: lowest={type(lowest_elo)}, highest={type(highest_elo)}")
                    # Fallback –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö
                    text += f"üéØ <b>ELO Faceit:</b> {format_elo_display(profile_data['faceit_elo'])} ‚ö†Ô∏è\n"
                    text += f"<i>   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö ELO</i>\n"
            except Exception as elo_validation_error:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ELO –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {profile_data['game_nickname']}: {elo_validation_error}")
                # Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                text += f"üéØ <b>ELO Faceit:</b> {format_elo_display(profile_data['faceit_elo'])} ‚ùå\n"
                text += f"<i>   ‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å ELO –¥–∞–Ω–Ω—ã–µ</i>\n"
        else:
            # Fallback –Ω–∞ –±–∞–∑–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ELO
            text += f"üéØ <b>ELO Faceit:</b> {format_elo_display(profile_data['faceit_elo'])}\n"
        
        # Faceit –ø—Ä–æ—Ñ–∏–ª—å
        nickname = extract_faceit_nickname(profile_data['faceit_url'])
        text += f"üîó <b>Faceit:</b> <a href='{profile_data['faceit_url']}'>{nickname}</a>\n"
        
        text += f"üë• <b>–†–æ–ª—å:</b> {format_role_display(profile_data['role'])}\n"
        
        # –ö–∞—Ä—Ç—ã
        try:
            from ..utils.security_validator import security_validator
            secure_logger = security_validator.get_secure_logger(__name__)
            
            # –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç
            maps_schema = {
                "type": "array",
                "items": {"type": "string"},
                "maxItems": 50
            }
            
            parsed_data, validation_result = security_validator.safe_json_loads(
                profile_data['favorite_maps'], 
                schema=maps_schema, 
                default=[]
            )
            
            if validation_result.is_valid:
                maps = parsed_data
                text += f"üó∫Ô∏è <b>–ö–∞—Ä—Ç—ã:</b> {', '.join(maps[:3])}{'...' if len(maps) > 3 else ''}\n"
            else:
                secure_logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ä—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ {profile_data.get('user_id', 'unknown')}: {validation_result.error_message}")
                text += f"üó∫Ô∏è <b>–ö–∞—Ä—Ç—ã:</b> –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        except Exception as e:
            secure_logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ: {e}")
            text += f"üó∫Ô∏è <b>–ö–∞—Ä—Ç—ã:</b> –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        
        # –í—Ä–µ–º—è –∏–≥—Ä—ã
        try:
            from ..utils.security_validator import security_validator
            secure_logger = security_validator.get_secure_logger(__name__)
            
            # –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            slots_schema = {
                "type": "array",
                "items": {"type": "string"},
                "maxItems": 20
            }
            
            parsed_data, validation_result = security_validator.safe_json_loads(
                profile_data['playtime_slots'], 
                schema=slots_schema, 
                default=[]
            )
            
            if validation_result.is_valid:
                slots = parsed_data
                time_names = []
                for slot_id in slots:
                    time_option = next((t for t in PLAYTIME_OPTIONS if t['id'] == slot_id), None)
                    if time_option:
                        time_names.append(time_option['emoji'])
                text += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {' '.join(time_names)}\n"
            else:
                secure_logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª–µ {profile_data.get('user_id', 'unknown')}: {validation_result.error_message}")
                text += f"‚è∞ <b>–í—Ä–µ–º—è:</b> –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        except Exception as e:
            secure_logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª–µ: {e}")
            text += f"‚è∞ <b>–í—Ä–µ–º—è:</b> –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        
        if profile_data['description']:
            text += f"\nüí¨ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{profile_data['description']}\n"
        
        # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        from datetime import datetime
        try:
            created = datetime.fromisoformat(profile_data['created_at'])
            text += f"\nüìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {created.strftime('%d.%m.%Y %H:%M')}"
        except:
            text += f"\nüìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {profile_data['created_at']}"
        
        return text

    async def approve_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–¥–æ–±—Ä—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å"""
        query = update.callback_query
        await query.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–¥–æ–±—Ä–µ–Ω!")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ user_id
        user_id_result = safe_parse_user_id(query.data, "approve_")
        if not user_id_result.is_valid:
            logger.error(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data –≤ approve_profile: {query.data} - {user_id_result.error_message}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        user_id = user_id_result.parsed_data['user_id']
        moderator_id = query.from_user.id
        
        # üîí ENHANCED SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not await self.db.is_moderator(moderator_id):
            await self._log_security_event(moderator_id, "approve_profile_attempt", "unauthorized", target_user_id=user_id)
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return
        
        success = await self.db.moderate_profile(user_id, 'approved', moderator_id)
        
        if success:
            # üîí ENHANCED SECURITY: –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
            await self._log_security_event(moderator_id, "approve_profile", "success", target_user_id=user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.send_moderation_notification(user_id, 'approved', context)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
            await self.show_next_profile(query, context)
        else:
            await self._log_security_event(moderator_id, "approve_profile", "database_error", target_user_id=user_id)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")

    async def reject_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å"""
        query = update.callback_query
        await query.answer()
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ user_id
        user_id_result = safe_parse_user_id(query.data, "reject_")
        if not user_id_result.is_valid:
            logger.error(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data –≤ reject_profile: {query.data} - {user_id_result.error_message}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        user_id = user_id_result.parsed_data['user_id']
        context.user_data['rejecting_user_id'] = user_id
        
        text = "‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n"
        text += "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:"
        
        keyboard = [
            [InlineKeyboardButton("üîû –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="reject_reason_inappropriate")],
            [InlineKeyboardButton("üì∏ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ Faceit", callback_data="reject_reason_invalid_link")],
            [InlineKeyboardButton("üéÆ –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –Ω–∏–∫", callback_data="reject_reason_bad_nickname")],
            [InlineKeyboardButton("üìù –ù–µ–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="reject_reason_incomplete")],
            [InlineKeyboardButton("‚úèÔ∏è –°–≤–æ—è –ø—Ä–∏—á–∏–Ω–∞", callback_data="reject_reason_custom")],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="mod_queue")]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    async def reject_with_reason(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π"""
        query = update.callback_query
        await query.answer()
        
        user_id = context.user_data.get('rejecting_user_id')
        moderator_id = query.from_user.id
        
        reason_map = {
            'inappropriate': '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —Å–ø–∞–º –∏ —Ç.–¥.)',
            'invalid_link': '–ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Faceit –ø—Ä–æ—Ñ–∏–ª—å',
            'bad_nickname': '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫',
            'incomplete': '–ù–µ–ø–æ–ª–Ω–∞—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
        }
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ reason_key
        reason_result = safe_parse_string_value(query.data, "reject_reason_")
        if not reason_result.is_valid:
            logger.error(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data –≤ reject_with_reason: {query.data} - {reason_result.error_message}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        reason_key = reason_result.parsed_data['value']
        
        if reason_key == 'custom':
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ø—Ä–∏—á–∏–Ω—É
            text = (
                "‚úèÔ∏è <b>–ö–∞—Å—Ç–æ–º–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è</b>\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.\n"
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –≤–∞—à—É –ø—Ä–∏—á–∏–Ω—É."
            )
            
            keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="mod_queue")]]
            
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
            context.user_data['awaiting_rejection_reason'] = True
            return
        
        reason = reason_map.get(reason_key, '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞')
        
        # üîí ENHANCED SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not await self.db.is_moderator(moderator_id):
            await self._log_security_event(moderator_id, "reject_profile_attempt", "unauthorized", target_user_id=user_id)
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return
        
        success = await self.db.moderate_profile(user_id, 'rejected', moderator_id, reason)
        
        if success:
            # üîí ENHANCED SECURITY: –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            await self._log_security_event(moderator_id, "reject_profile", "success", target_user_id=user_id, 
                                         details=f"Reason: {reason}")
            
            await query.answer(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω: {reason}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.send_moderation_notification(user_id, 'rejected', context, reason)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
            await self.show_next_profile(query, context)
        else:
            await self._log_security_event(moderator_id, "reject_profile", "database_error", target_user_id=user_id)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")

    async def show_next_profile(self, query_or_update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ query –∏–ª–∏ update
        if hasattr(query_or_update, 'callback_query'):
            query = query_or_update.callback_query
        else:
            query = query_or_update
        
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ—Ä–∏—Ä—É–µ–º—É—é –∞–Ω–∫–µ—Ç—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        current_profile = context.user_data.get('moderating_profile')
        exclude_user_id = current_profile.get('user_id') if current_profile else None
        
        profiles = await self.db.get_profiles_for_moderation('pending', limit=1, exclude_user_id=exclude_user_id)
        
        if not profiles:
            text = "‚úÖ –í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!\n\n–ù–µ—Ç –∞–Ω–∫–µ—Ç, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderation_menu")]]
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–∫–∏ "Message is not modified"
            try:
                await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
            except Exception as e:
                if "message is not modified" in str(e).lower():
                    await query.answer("‚úÖ –í—Å–µ –∞–Ω–∫–µ—Ç—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
                else:
                    raise e
            return
        
        profile_data = profiles[0]
        context.user_data['moderating_profile'] = profile_data
        await self.show_profile_for_moderation(query, profile_data)

    async def send_moderation_notification(self, user_id: int, status: str, context: ContextTypes.DEFAULT_TYPE, reason: str = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            if status == 'approved':
                text = (
                    "üéâ <b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
                    "–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ —Å–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –≤–∞—Å —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤.\n"
                    "–£–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã!"
                )
            else:  # rejected
                text = (
                    "‚ùå <b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                    f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é."
                )
            
            keyboard = [[InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile_menu")]]
            
            await context.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    async def _log_security_event(self, admin_user_id: int, action_type: str, event_type: str, 
                                 target_user_id: Optional[int] = None, details: Optional[str] = None):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        Args:
            admin_user_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (success, failure, attempt, etc.)
            target_user_id: ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
            event_details = f"Event: {event_type}"
            if details:
                event_details += f", Details: {details}"
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞—É–¥–∏—Ç
            await self.db.log_admin_action(
                admin_user_id=admin_user_id,
                action_type=f"{action_type}_{event_type}",
                target_user_id=target_user_id,
                details=event_details
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
            logger.warning(f"SECURITY EVENT: {action_type}_{event_type} by admin {admin_user_id} on target {target_user_id} - {event_details}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")



    async def add_moderator_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è super_admin)"""
        user_id = update.effective_user.id
        
        # üîí ENHANCED SECURITY: –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        moderator = await self.db.get_moderator(user_id)
        if not moderator:
            await self._log_security_event(user_id, "add_moderator_attempt", "no_moderator_rights")
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        if not moderator.can_manage_moderators():
            await self._log_security_event(user_id, "add_moderator_attempt", "insufficient_permissions", 
                                         details=f"Role: {moderator.role}")
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]])
            )
            return
        
        # üîí ENHANCED SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π
        if moderator.role != 'super_admin':
            await self._log_security_event(user_id, "add_moderator_attempt", "privilege_escalation_attempt", 
                                         details=f"Non-super_admin trying to add moderator: {moderator.role}")
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args or len(context.args) < 2:
            await update.message.reply_text(
                "üìã <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
                "<code>/add_moderator USER_ID ROLE</code>\n\n"
                "<b>–†–æ–ª–∏:</b>\n"
                "‚Ä¢ <code>moderator</code> - –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è\n"
                "‚Ä¢ <code>admin</code> - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞\n"
                "‚Ä¢ <code>super_admin</code> - –ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "<code>/add_moderator 123456789 moderator</code>",
                parse_mode='HTML'
            )
            return
        
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ user_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            target_user_id_str = context.args[0].strip()
            if not target_user_id_str.isdigit():
                await self._log_security_event(user_id, "add_moderator_attempt", "invalid_user_id_format", 
                                             details=f"Input: {target_user_id_str}")
                await update.message.reply_text("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            
            target_user_id = int(target_user_id_str)
            if not (1 <= target_user_id <= 2**63 - 1):
                await self._log_security_event(user_id, "add_moderator_attempt", "user_id_out_of_range", 
                                             details=f"User ID: {target_user_id}")
                await update.message.reply_text("‚ùå User ID –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
                return
            
            # üîí ENHANCED SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ–ø–æ–≤—ã—à–µ–Ω–∏–µ
            if target_user_id == user_id:
                await self._log_security_event(user_id, "add_moderator_attempt", "self_promotion_attempt")
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Å–µ–±—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
                return
            
            # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Ä–æ–ª–∏
            role = sanitize_text_input(context.args[1].lower(), max_length=20)
            
            if role not in ['moderator', 'admin', 'super_admin']:
                await self._log_security_event(user_id, "add_moderator_attempt", "invalid_role", 
                                             details=f"Role: {role}")
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: moderator, admin –∏–ª–∏ super_admin")
                return
            
            # üîí ENHANCED SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
            if role == 'super_admin':
                await self._log_security_event(user_id, "add_moderator_attempt", "super_admin_creation_attempt", 
                                             details=f"Target: {target_user_id}")
                await update.message.reply_text("‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã")
                return
            
            # üîí ENHANCED SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user = await self.db.get_user(target_user_id)
            if not target_user:
                await self._log_security_event(user_id, "add_moderator_attempt", "target_user_not_found", 
                                             details=f"Target: {target_user_id}")
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                return
            
            # üîí ENHANCED SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            existing_moderator = await self.db.get_moderator(target_user_id)
            if existing_moderator and existing_moderator.is_active:
                await self._log_security_event(user_id, "add_moderator_attempt", "duplicate_moderator_attempt", 
                                             details=f"Target: {target_user_id}, existing role: {existing_moderator.role}")
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º (—Ä–æ–ª—å: {existing_moderator.role})")
                return
            
            # üîí ENHANCED SECURITY: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            confirmation_token = await self.db.create_confirmation_token(
                user_id, "add_moderator", target_user_id, expires_minutes=10
            )
            
            if not confirmation_token:
                await self._log_security_event(user_id, "add_moderator_attempt", "confirmation_token_failed")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await update.message.reply_text(
                f"üîí <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                f"<b>–¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_user_id} ({target_user.first_name})\n"
                f"<b>–†–æ–ª—å:</b> {role}\n\n"
                f"‚ö†Ô∏è <b>–≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!</b>\n"
                f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                f"<code>/confirm_add_moderator {confirmation_token}</code>\n\n"
                f"‚è∞ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç",
                parse_mode='HTML'
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await self._log_security_event(user_id, "add_moderator_confirmation_created", 
                                         target_user_id=target_user_id, details=f"Role: {role}")
            
        except ValueError:
            await self._log_security_event(user_id, "add_moderator_attempt", "value_error")
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            await self._log_security_event(user_id, "add_moderator_attempt", "exception", details=str(e))
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")

    async def confirm_add_moderator_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        moderator = await self.db.get_moderator(user_id)
        if not moderator or not moderator.can_manage_moderators() or moderator.role != 'super_admin':
            await self._log_security_event(user_id, "confirm_add_moderator_attempt", "unauthorized")
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            return
        
        if not context.args or len(context.args) < 1:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            return
        
        token = context.args[0].strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if not await self.db.verify_confirmation_token(token, user_id, "add_moderator"):
            await self._log_security_event(user_id, "confirm_add_moderator_attempt", "invalid_token", 
                                         details=f"Token: {token[:10]}...")
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑ —Ç–æ–∫–µ–Ω–∞ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ target_user_id)
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É - –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ª–æ–≥–∞ –∞—É–¥–∏—Ç–∞
            audit_logs = await self.db.get_admin_audit_log(admin_user_id=user_id, action_type="add_moderator_confirmation_created", limit=1)
            if not audit_logs:
                await self._log_security_event(user_id, "confirm_add_moderator_attempt", "no_audit_record")
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.")
                return
            
            # –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏ –∏–∑ –ª–æ–≥–∞
            details = audit_logs[0].get('details', '')
            if 'Role:' not in details:
                await self._log_security_event(user_id, "confirm_add_moderator_attempt", "invalid_audit_details")
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥–µ –∞—É–¥–∏—Ç–∞.")
                return
            
            target_user_id = audit_logs[0].get('target_user_id')
            role = details.split('Role: ')[1] if 'Role: ' in details else 'moderator'
            
            if not target_user_id:
                await self._log_security_event(user_id, "confirm_add_moderator_attempt", "no_target_user_id")
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            success = await self.db.add_moderator(target_user_id, role, user_id)
            
            if success:
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                await self._log_security_event(user_id, "add_moderator_success", target_user_id=target_user_id, 
                                             details=f"Role: {role}")
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∫–∞–∫ {role}"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                try:
                    role_names = {
                        'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
                        'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                        'super_admin': '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
                    }
                    
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=(
                            f"üéâ <b>–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!</b>\n\n"
                            f"<b>–†–æ–ª—å:</b> {role_names[role]}\n\n"
                            "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n"
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–æ–¥–µ—Ä–∞—Ü–∏—è' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
                        ),
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="moderation_menu")]]),
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {target_user_id}: {e}")
            else:
                await self._log_security_event(user_id, "confirm_add_moderator_attempt", "database_error")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
                
        except Exception as e:
            await self._log_security_event(user_id, "confirm_add_moderator_attempt", "exception", details=str(e))
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.")

    async def remove_moderator_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        # üîí ENHANCED SECURITY: –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        moderator = await self.db.get_moderator(user_id)
        if not moderator:
            await self._log_security_event(user_id, "remove_moderator_attempt", "no_moderator_rights")
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        if not moderator.can_manage_moderators():
            await self._log_security_event(user_id, "remove_moderator_attempt", "insufficient_permissions", 
                                         details=f"Role: {moderator.role}")
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.")
            return
        
        # üîí ENHANCED SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π
        if moderator.role != 'super_admin':
            await self._log_security_event(user_id, "remove_moderator_attempt", "privilege_escalation_attempt", 
                                         details=f"Non-super_admin trying to remove moderator: {moderator.role}")
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        
        if not context.args or len(context.args) < 1:
            await update.message.reply_text(
                "üìã <b>–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
                "<code>/remove_moderator USER_ID</code>\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "<code>/remove_moderator 123456789</code>",
                parse_mode='HTML'
            )
            return
        
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ user_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            target_user_id_str = context.args[0].strip()
            if not target_user_id_str.isdigit():
                await self._log_security_event(user_id, "remove_moderator_attempt", "invalid_user_id_format", 
                                             details=f"Input: {target_user_id_str}")
                await update.message.reply_text("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            
            target_user_id = int(target_user_id_str)
            if not (1 <= target_user_id <= 2**63 - 1):
                await self._log_security_event(user_id, "remove_moderator_attempt", "user_id_out_of_range", 
                                             details=f"User ID: {target_user_id}")
                await update.message.reply_text("‚ùå User ID –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
                return
            
            # üîí ENHANCED SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ—É–¥–∞–ª–µ–Ω–∏–µ
            if target_user_id == user_id:
                await self._log_security_event(user_id, "remove_moderator_attempt", "self_removal_attempt")
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
                return
            
            # üîí ENHANCED SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            target_moderator = await self.db.get_moderator(target_user_id)
            if not target_moderator:
                await self._log_security_event(user_id, "remove_moderator_attempt", "target_not_moderator", 
                                             details=f"Target: {target_user_id}")
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
                return
            
            if not target_moderator.is_active:
                await self._log_security_event(user_id, "remove_moderator_attempt", "target_already_inactive", 
                                             details=f"Target: {target_user_id}")
                await update.message.reply_text("‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                return
            
            # üîí ENHANCED SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
            if target_moderator.role == 'super_admin':
                await self._log_security_event(user_id, "remove_moderator_attempt", "super_admin_removal_attempt", 
                                             details=f"Target: {target_user_id}")
                await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ")
                return
            
            # üîí ENHANCED SECURITY: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            confirmation_token = await self.db.create_confirmation_token(
                user_id, "remove_moderator", target_user_id, expires_minutes=10
            )
            
            if not confirmation_token:
                await self._log_security_event(user_id, "remove_moderator_attempt", "confirmation_token_failed")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await update.message.reply_text(
                f"üîí <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                f"<b>–¶–µ–ª–µ–≤–æ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä:</b> {target_user_id}\n"
                f"<b>–†–æ–ª—å:</b> {target_moderator.role}\n\n"
                f"‚ö†Ô∏è <b>–≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!</b>\n"
                f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                f"<code>/confirm_remove_moderator {confirmation_token}</code>\n\n"
                f"‚è∞ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç",
                parse_mode='HTML'
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await self._log_security_event(user_id, "remove_moderator_confirmation_created", 
                                         target_user_id=target_user_id, details=f"Role: {target_moderator.role}")
            
        except ValueError:
            await self._log_security_event(user_id, "remove_moderator_attempt", "value_error")
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            await self._log_security_event(user_id, "remove_moderator_attempt", "exception", details=str(e))
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")

    async def confirm_remove_moderator_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        moderator = await self.db.get_moderator(user_id)
        if not moderator or not moderator.can_manage_moderators() or moderator.role != 'super_admin':
            await self._log_security_event(user_id, "confirm_remove_moderator_attempt", "unauthorized")
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            return
        
        if not context.args or len(context.args) < 1:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            return
        
        token = context.args[0].strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if not await self.db.verify_confirmation_token(token, user_id, "remove_moderator"):
            await self._log_security_event(user_id, "confirm_remove_moderator_attempt", "invalid_token", 
                                         details=f"Token: {token[:10]}...")
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ª–æ–≥–∞ –∞—É–¥–∏—Ç–∞
            audit_logs = await self.db.get_admin_audit_log(admin_user_id=user_id, action_type="remove_moderator_confirmation_created", limit=1)
            if not audit_logs:
                await self._log_security_event(user_id, "confirm_remove_moderator_attempt", "no_audit_record")
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.")
                return
            
            target_user_id = audit_logs[0].get('target_user_id')
            if not target_user_id:
                await self._log_security_event(user_id, "confirm_remove_moderator_attempt", "no_target_user_id")
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é)
            success = await self.db.update_moderator_status(target_user_id, False)
            
            if success:
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                await self._log_security_event(user_id, "remove_moderator_success", target_user_id=target_user_id)
                
                await update.message.reply_text(f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {target_user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—ã–≤—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                try:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text="üìã –í–∞—à–∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã.",
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –±—ã–≤—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {target_user_id}: {e}")
            else:
                await self._log_security_event(user_id, "confirm_remove_moderator_attempt", "database_error")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
                
        except Exception as e:
            await self._log_security_event(user_id, "confirm_remove_moderator_attempt", "exception", details=str(e))
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.")

    async def list_moderators_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        moderator = await self.db.get_moderator(user_id)
        if not moderator:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        moderators = await self.db.get_all_moderators()
        
        if not moderators:
            await update.message.reply_text("üë• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        text = "üë• <b>–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n"
        
        for mod in moderators:
            status = "‚úÖ" if mod.is_active else "‚ùå"
            text += f"{status} <code>{mod.user_id}</code> - {mod.role}\n"
        
        await update.message.reply_text(text, parse_mode='HTML')

    async def audit_log_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–∞ –∞—É–¥–∏—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è super_admin)"""
        user_id = update.effective_user.id
        
        # üîí ENHANCED SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        moderator = await self.db.get_moderator(user_id)
        if not moderator or moderator.role != 'super_admin':
            await self._log_security_event(user_id, "audit_log_attempt", "unauthorized")
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–∞ –∞—É–¥–∏—Ç–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
        limit = 20
        if context.args and len(context.args) > 0:
            try:
                limit = min(int(context.args[0]), 100)  # –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏–º–∏—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥ –∞—É–¥–∏—Ç–∞
        audit_logs = await self.db.get_admin_audit_log(limit=limit)
        
        if not audit_logs:
            await update.message.reply_text("üìã –õ–æ–≥ –∞—É–¥–∏—Ç–∞ –ø—É—Å—Ç.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"üîç <b>–õ–æ–≥ –∞—É–¥–∏—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(audit_logs)} –∑–∞–ø–∏—Å–µ–π)</b>\n\n"
        
        for i, log_entry in enumerate(audit_logs, 1):
            admin_id = log_entry['admin_user_id']
            action = log_entry['action_type']
            target_id = log_entry.get('target_user_id', 'N/A')
            details = log_entry.get('details', '')
            created_at = log_entry['created_at']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            try:
                from datetime import datetime
                dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                time_str = dt.strftime('%d.%m.%Y %H:%M')
            except:
                time_str = created_at
            
            text += f"{i}. <b>{action}</b>\n"
            text += f"   üë§ –ê–¥–º–∏–Ω: {admin_id}\n"
            if target_id != 'N/A':
                text += f"   üéØ –¶–µ–ª—å: {target_id}\n"
            if details:
                text += f"   üìù –î–µ—Ç–∞–ª–∏: {details[:50]}{'...' if len(details) > 50 else ''}\n"
            text += f"   ‚è∞ –í—Ä–µ–º—è: {time_str}\n\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(text) > 3500:
                text += f"... –∏ –µ—â–µ {len(audit_logs) - i} –∑–∞–ø–∏—Å–µ–π"
                break
        
        await update.message.reply_text(text, parse_mode='HTML')
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–∞
        await self._log_security_event(user_id, "audit_log_view", "success", details=f"Limit: {limit}")

    async def security_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è super_admin)"""
        user_id = update.effective_user.id
        
        # üîí ENHANCED SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        moderator = await self.db.get_moderator(user_id)
        if not moderator or moderator.role != 'super_admin':
            await self._log_security_event(user_id, "security_stats_attempt", "unauthorized")
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await self.db.get_admin_action_stats(days=30)
        
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (30 –¥–Ω–µ–π)</b>\n\n"
        
        if stats:
            text += f"üî¢ <b>–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π:</b> {stats.get('total_actions', 0)}\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –¥–µ–π—Å—Ç–≤–∏–π
            action_groups = {}
            for action, count in stats.items():
                if action == 'total_actions':
                    continue
                
                base_action = action.split('_')[0] if '_' in action else action
                if base_action not in action_groups:
                    action_groups[base_action] = 0
                action_groups[base_action] += count
            
            text += "<b>–ü–æ —Ç–∏–ø–∞–º –¥–µ–π—Å—Ç–≤–∏–π:</b>\n"
            for action, count in sorted(action_groups.items()):
                text += f"‚Ä¢ {action}: {count}\n"
        else:
            text += "üìã –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
        
        await update.message.reply_text(text, parse_mode='HTML')
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await self._log_security_event(user_id, "security_stats_view", "success")

    async def security_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /security_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not await self.db.is_moderator(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            system_stats = get_system_security_stats()
            security_summary = get_security_summary()
            
            text = "üõ°Ô∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_stats = system_stats.get('user_stats', {})
            text += f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {user_stats.get('total_users', 0)}\n"
            text += f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {user_stats.get('blocked_users', 0)}\n"
            
            # –£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞
            risk_levels = user_stats.get('risk_levels', {})
            if risk_levels:
                text += f"‚Ä¢ –£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞:\n"
                for level, count in risk_levels.items():
                    emoji = {"low": "üü¢", "medium": "üü°", "high": "üü†", "critical": "üî¥"}.get(level, "‚ö™")
                    text += f"  {emoji} {level.title()}: {count}\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            request_stats = system_stats.get('request_stats', {})
            if request_stats:
                text += f"\nüìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω):</b>\n"
                for req_type, count in request_stats.items():
                    text += f"‚Ä¢ {req_type}: {count}\n"
            
            # –°–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            security_stats = system_stats.get('security_stats', {})
            text += f"\nüö® <b>–°–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b>\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {security_stats.get('total_events', 0)}\n"
            text += f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {security_stats.get('recent_events', 0)}\n"
            
            # –°–æ–±—ã—Ç–∏—è –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
            events_by_severity = security_stats.get('events_by_severity', {})
            if events_by_severity:
                text += f"‚Ä¢ –ü–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏:\n"
                for severity, count in events_by_severity.items():
                    emoji = {"low": "‚ÑπÔ∏è", "medium": "‚ö†Ô∏è", "high": "üö®", "critical": "üí•"}.get(severity, "‚ùì")
                    text += f"  {emoji} {severity.title()}: {count}\n"
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
            uptime = system_stats.get('system_uptime', 0)
            if uptime > 0:
                hours = int(uptime // 3600)
                minutes = int((uptime % 3600) // 60)
                text += f"\n‚è±Ô∏è <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {hours}—á {minutes}–º\n"
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            monitored_users = security_summary.get('monitored_users', 0)
            blocked_patterns = security_summary.get('blocked_patterns', 0)
            text += f"\nüîç <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
            text += f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {monitored_users}\n"
            text += f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {blocked_patterns}\n"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            await self._log_security_event(user_id, "security_stats_view", "success")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    async def user_security_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /user_security - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not await self.db.is_moderator(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_security <user_id>"
            )
            return
        
        try:
            target_user_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            security_report = get_user_security_report(target_user_id)
            
            text = f"üõ°Ô∏è <b>–û—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}</b>\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate limiter
            rate_limiter_stats = security_report.get('rate_limiter_stats', {})
            if rate_limiter_stats and 'error' not in rate_limiter_stats:
                text += f"üìä <b>Rate Limiter:</b>\n"
                text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {rate_limiter_stats.get('total_requests', 0)}\n"
                text += f"‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–π: {rate_limiter_stats.get('violation_count', 0)}\n"
                text += f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {rate_limiter_stats.get('risk_level', 'unknown').title()}\n"
                text += f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if rate_limiter_stats.get('is_blocked') else '–ù–µ—Ç'}\n"
                
                if rate_limiter_stats.get('is_blocked'):
                    blocked_until = rate_limiter_stats.get('blocked_until')
                    if blocked_until:
                        import time
                        remaining = int(blocked_until - time.time())
                        text += f"‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ: {remaining}—Å\n"
                
                # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                suspicious_patterns = rate_limiter_stats.get('suspicious_patterns', [])
                if suspicious_patterns:
                    text += f"‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(suspicious_patterns)}\n"
                
                # –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
                recent_requests = rate_limiter_stats.get('recent_requests_count', 0)
                text += f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 5 –º–∏–Ω: {recent_requests}\n"
            else:
                text += f"üìä <b>Rate Limiter:</b> –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
            
            # –î–∞–Ω–Ω—ã–µ middleware
            middleware_data = security_report.get('middleware_data', {})
            if middleware_data:
                text += f"\nüîç <b>Middleware:</b>\n"
                
                # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç
                suspicious_score = middleware_data.get('suspicious_score', 0)
                text += f"‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç: {suspicious_score}\n"
                
                # –ß–∞—Å—Ç–æ—Ç–∞ –∫–æ–º–∞–Ω–¥
                command_frequency = middleware_data.get('command_frequency', 0)
                text += f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –∫–æ–º–∞–Ω–¥: {command_frequency}\n"
                
                # –ß–∞—Å—Ç–æ—Ç–∞ callback'–æ–≤
                callback_frequency = middleware_data.get('callback_frequency', 0)
                text += f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ callback'–æ–≤: {callback_frequency}\n"
                
                # –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è callback'—ã
                duplicate_count = middleware_data.get('duplicate_count', 0)
                if duplicate_count > 0:
                    text += f"‚Ä¢ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è callback'—ã: {duplicate_count}\n"
            
            # –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
            first_seen = security_report.get('timestamp', 0)
            if first_seen:
                import time
                from datetime import datetime
                first_seen_dt = datetime.fromtimestamp(first_seen)
                text += f"\n‚è∞ <b>–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞:</b> {first_seen_dt.strftime('%Y-%m-%d %H:%M:%S')}\n"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._log_security_event(user_id, "user_security_view", "success", 
                                         details=f"Target user: {target_user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    async def security_events_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /security_events - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not await self.db.is_moderator(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
        limit = 10
        if context.args:
            try:
                limit = min(int(context.args[0]), 50)  # –ú–∞–∫—Å–∏–º—É–º 50 —Å–æ–±—ã—Ç–∏–π
            except ValueError:
                pass
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            events = get_recent_security_events(limit)
            
            if not events:
                await update.message.reply_text("üìã –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
                return
            
            text = f"üö® <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(events)} —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n"
            
            for i, event in enumerate(events, 1):
                # –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
                event_time = event.get('datetime', 'Unknown')
                if event_time != 'Unknown':
                    try:
                        from datetime import datetime
                        dt = datetime.fromisoformat(event_time.replace('Z', '+00:00'))
                        event_time = dt.strftime('%H:%M:%S')
                    except:
                        pass
                
                # –≠–º–æ–¥–∑–∏ –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
                severity_emoji = {
                    "low": "‚ÑπÔ∏è",
                    "medium": "‚ö†Ô∏è", 
                    "high": "üö®",
                    "critical": "üí•"
                }.get(event.get('severity', 'unknown'), "‚ùì")
                
                # –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
                event_type = event.get('event_type', 'unknown')
                event_type_display = {
                    "rate_limit_exceeded": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç",
                    "burst_limit_exceeded": "–ü—Ä–µ–≤—ã—à–µ–Ω burst –ª–∏–º–∏—Ç",
                    "suspicious_activity": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                    "security_stats_view": "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                    "user_security_view": "–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                }.get(event_type, event_type)
                
                text += f"{i}. {severity_emoji} <b>{event_time}</b>\n"
                text += f"   üë§ User: {event.get('user_id', 'Unknown')}\n"
                text += f"   üìù Event: {event_type_display}\n"
                text += f"   üîç Severity: {event.get('severity', 'unknown').title()}\n"
                
                # –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
                details = event.get('details', {})
                if details:
                    if 'limit_type' in details:
                        text += f"   üéØ Type: {details['limit_type']}\n"
                    if 'violation_count' in details:
                        text += f"   ‚ö†Ô∏è Violations: {details['violation_count']}\n"
                    if 'risk_level' in details:
                        text += f"   üö® Risk: {details['risk_level'].title()}\n"
                
                text += "\n"
            
            # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –º–Ω–æ–≥–æ, –æ–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç
            if len(text) > 4000:
                text = text[:3900] + "\n\n... (—Å–æ–±—ã—Ç–∏—è –æ–±—Ä–µ–∑–∞–Ω—ã)"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π
            await self._log_security_event(user_id, "security_events_view", "success", 
                                         details=f"Limit: {limit}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    async def unblock_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /unblock_user - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not await self.db.is_moderator(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock_user <user_id>"
            )
            return
        
        try:
            target_user_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º rate_limiter –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            from bot.utils.rate_limiter import rate_limiter
            
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            unblocked = rate_limiter.unblock_user(target_user_id)
            
            if unblocked:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                rate_limiter.reset_user_violations(target_user_id)
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
                    f"üîÑ –ù–∞—Ä—É—à–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã"
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                await self._log_security_event(user_id, "user_unblocked", "high", 
                                             details=f"Target user: {target_user_id}")
            else:
                await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        query = update.callback_query
        data = query.data
        user_id = query.from_user.id
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback
        secure_validation = validate_secure_callback(data, user_id)
        if secure_validation.is_valid:
            await self._handle_secure_moderation_callback(query, secure_validation, context)
            return
        
        # –ï—Å–ª–∏ –Ω–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        await self._handle_legacy_moderation_callback(query, data, context)
    
    async def _handle_secure_moderation_callback(self, query, validation: CallbackValidationResult, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö callback'–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        action = validation.action
        user_id = validation.user_id
        parsed_data = validation.parsed_data or {}
        
        logger.info(f"Processing secure moderation callback: {action} for user {user_id}")
        
        try:
            if action == "moderation_menu":
                await self.show_moderation_menu(update, context)
            elif action == "mod_queue":
                await self.show_moderation_queue(update, context)
            elif action == "mod_approved":
                await self.show_approved_profiles(update, context)
            elif action == "mod_rejected":
                await self.show_rejected_profiles(update, context)
            elif action == "mod_stats":
                await self.show_moderation_stats(update, context)
            elif action == "approve_user":
                target_user_id = parsed_data.get("target_user_id")
                if target_user_id:
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π callback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    query.data = f"approve_{target_user_id}"
                    await self.approve_profile(update, context)
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            elif action == "reject_user":
                target_user_id = parsed_data.get("target_user_id")
                if target_user_id:
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π callback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    query.data = f"reject_{target_user_id}"
                    await self.reject_profile(update, context)
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            elif action == "next_profile":
                await self.show_next_profile(query, context)
            else:
                logger.warning(f"Unknown secure moderation callback action: {action}")
                await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            logger.error(f"Error handling secure moderation callback {action}: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
    
    async def _handle_legacy_moderation_callback(self, query, data, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ legacy callback'–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        try:
            if data == "moderation_menu":
                await self.show_moderation_menu(update, context)
            elif data == "mod_queue":
                await self.show_moderation_queue(update, context)
            elif data == "mod_approved":
                await self.show_approved_profiles(update, context)
            elif data == "mod_rejected":
                await self.show_rejected_profiles(update, context)
            elif data == "mod_stats":
                await self.show_moderation_stats(update, context)
            elif data.startswith("approve_"):
                await self.approve_profile(update, context)
            elif data.startswith("reject_reason_"):  # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º reject_reason_ –ü–ï–†–ï–î reject_
                await self.reject_with_reason(update, context)
            elif data.startswith("reject_"):
                await self.reject_profile(update, context)
            elif data == "next_profile":
                await self.show_next_profile(query, context)
            else:
                await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def show_approved_profiles(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        if not await self.db.is_moderator(user_id):
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
        profiles = await self.db.get_profiles_for_moderation('approved', limit=10)
        
        if not profiles:
            text = "‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n–û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = f"‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã ({len(profiles)})</b>\n\n"
            
            for i, profile_data in enumerate(profiles, 1):
                nickname = profile_data['game_nickname']
                user_name = profile_data['first_name']
                moderated_at = profile_data.get('moderated_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                text += f"{i}. <b>{nickname}</b> ({user_name})\n"
                text += f"   üìÖ –û–¥–æ–±—Ä–µ–Ω–æ: {moderated_at}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="moderation_menu")]]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def show_rejected_profiles(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        if not await self.db.is_moderator(user_id):
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
        profiles = await self.db.get_profiles_for_moderation('rejected', limit=10)
        
        if not profiles:
            text = "‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã ({len(profiles)})</b>\n\n"
            
            for i, profile_data in enumerate(profiles, 1):
                nickname = profile_data['game_nickname']
                user_name = profile_data['first_name']
                reason = profile_data.get('moderation_reason', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
                moderated_at = profile_data.get('moderated_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                text += f"{i}. <b>{nickname}</b> ({user_name})\n"
                text += f"   üö´ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                text += f"   üìÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {moderated_at}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="moderation_menu")]]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def show_moderation_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        if not await self.db.is_moderator(user_id):
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await self.db.get_moderation_stats()
        
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
        text += f"‚è≥ <b>–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b> {stats.get('profiles_pending', 0)}\n"
        text += f"‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–æ:</b> {stats.get('profiles_approved', 0)}\n"
        text += f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ:</b> {stats.get('profiles_rejected', 0)}\n"
        text += f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b> {stats.get('active_moderators', 0)}\n\n"
        
        total = stats.get('profiles_approved', 0) + stats.get('profiles_rejected', 0)
        if total > 0:
            approval_rate = round((stats.get('profiles_approved', 0) / total) * 100, 1)
            text += f"üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è:</b> {approval_rate}%"
        
        keyboard = [[InlineKeyboardButton("üîô –ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="moderation_menu")]]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)"""
        if context.user_data.get('awaiting_rejection_reason'):
            user_id = context.user_data.get('rejecting_user_id')
            moderator_id = update.effective_user.id
            # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
            custom_reason = sanitize_text_input(update.message.text.strip(), max_length=200)
            
            if len(custom_reason) > 200:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å:"
                )
                return
            
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            context.user_data['awaiting_rejection_reason'] = False
            
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
            success = await self.db.moderate_profile(user_id, 'rejected', moderator_id, custom_reason)
            
            if success:
                await update.message.reply_text(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω —Å –ø—Ä–∏—á–∏–Ω–æ–π: {custom_reason}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self.send_moderation_notification(user_id, 'rejected', context, custom_reason)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                profiles = await self.db.get_profiles_for_moderation('pending', limit=1)
                
                if profiles:
                    profile_data = profiles[0]
                    context.user_data['moderating_profile'] = profile_data
                    
                    text = "üë®‚Äçüíº <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã</b>\n\n"
                    text += await self.format_profile_for_moderation(profile_data)
                    
                    keyboard = [
                        [
                            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{profile_data['user_id']}"),
                            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{profile_data['user_id']}")
                        ],
                        [InlineKeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞", callback_data="next_profile")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderation_menu")]
                    ]
                    
                    await update.message.reply_text(
                        text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text(
                        "‚úÖ –í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="moderation_menu")]])
                    )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")