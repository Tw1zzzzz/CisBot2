"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è CIS FINDER Bot
–°–æ–∑–¥–∞–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π Twizz_Project
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from bot.database.operations import DatabaseManager
from bot.utils.cs2_data import format_elo_display, format_role_display, extract_faceit_nickname, PLAYTIME_OPTIONS

logger = logging.getLogger(__name__)

class ModerationHandler:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager

    async def show_moderation_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        query = update.callback_query
        if query:
            await query.answer()
            user_id = query.from_user.id
        else:
            user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not await self.db.is_moderator(user_id):
            text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            
            if query:
                await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await self.db.get_moderation_stats()
        pending_count = stats.get('profiles_pending', 0)
        approved_count = stats.get('profiles_approved', 0)
        rejected_count = stats.get('profiles_rejected', 0)

        text = f"üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {pending_count}\n"
        text += f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {approved_count}\n"
        text += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_count}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        keyboard = [
            [InlineKeyboardButton(f"‚è≥ –ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã ({pending_count})", callback_data="mod_queue")],
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã", callback_data="mod_approved")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã", callback_data="mod_rejected")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="mod_stats")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]

        if query:
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        else:
            await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    async def show_moderation_queue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∞–Ω–∫–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        if not await self.db.is_moderator(user_id):
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        profiles = await self.db.get_profiles_for_moderation('pending', limit=1)
        
        if not profiles:
            text = "‚úÖ –í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!\n\n–ù–µ—Ç –∞–Ω–∫–µ—Ç, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderation_menu")]]
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É
        profile_data = profiles[0]
        context.user_data['moderating_profile'] = profile_data
        
        await self.show_profile_for_moderation(query, profile_data)

    async def show_profile_for_moderation(self, query, profile_data):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        text = "üë®‚Äçüíº <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã</b>\n\n"
        text += self.format_profile_for_moderation(profile_data)
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{profile_data['user_id']}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{profile_data['user_id']}")
            ],
            [InlineKeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞", callback_data="next_profile")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderation_menu")]
        ]
        
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –æ—à–∏–±–∫–∏ "Message is not modified"
        try:
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        except Exception as e:
            if "message is not modified" in str(e).lower():
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                await query.answer("üìã –ê–Ω–∫–µ—Ç–∞ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                raise e

    def format_profile_for_moderation(self, profile_data) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        text = f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {profile_data['first_name']}"
        if profile_data['username']:
            text += f" (@{profile_data['username']})"
        text += f"\nüÜî <b>ID:</b> {profile_data['user_id']}\n\n"
        
        text += f"üéÆ <b>–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫:</b> {profile_data['game_nickname']}\n"
        text += f"üéØ <b>ELO Faceit:</b> {format_elo_display(profile_data['faceit_elo'])}\n"
        
        # Faceit –ø—Ä–æ—Ñ–∏–ª—å
        nickname = extract_faceit_nickname(profile_data['faceit_url'])
        text += f"üîó <b>Faceit:</b> <a href='{profile_data['faceit_url']}'>{nickname}</a>\n"
        
        text += f"üë• <b>–†–æ–ª—å:</b> {format_role_display(profile_data['role'])}\n"
        
        # –ö–∞—Ä—Ç—ã
        try:
            import json
            maps = json.loads(profile_data['favorite_maps'])
            text += f"üó∫Ô∏è <b>–ö–∞—Ä—Ç—ã:</b> {', '.join(maps[:3])}{'...' if len(maps) > 3 else ''}\n"
        except:
            text += f"üó∫Ô∏è <b>–ö–∞—Ä—Ç—ã:</b> –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        
        # –í—Ä–µ–º—è –∏–≥—Ä—ã
        try:
            import json
            slots = json.loads(profile_data['playtime_slots'])
            time_names = []
            for slot_id in slots:
                time_option = next((t for t in PLAYTIME_OPTIONS if t['id'] == slot_id), None)
                if time_option:
                    time_names.append(time_option['emoji'])
            text += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {' '.join(time_names)}\n"
        except:
            text += f"‚è∞ <b>–í—Ä–µ–º—è:</b> –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        
        if profile_data['description']:
            text += f"\nüí¨ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{profile_data['description']}\n"
        
        # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        from datetime import datetime
        try:
            created = datetime.fromisoformat(profile_data['created_at'])
            text += f"\nüìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {created.strftime('%d.%m.%Y %H:%M')}"
        except:
            text += f"\nüìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {profile_data['created_at']}"
        
        return text

    async def approve_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–¥–æ–±—Ä—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å"""
        query = update.callback_query
        await query.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–¥–æ–±—Ä–µ–Ω!")
        
        user_id = int(query.data.split('_')[1])
        moderator_id = query.from_user.id
        
        success = await self.db.moderate_profile(user_id, 'approved', moderator_id)
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.send_moderation_notification(user_id, 'approved', context)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
            await self.show_next_profile(query, context)
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")

    async def reject_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å"""
        query = update.callback_query
        await query.answer()
        
        user_id = int(query.data.split('_')[1])
        context.user_data['rejecting_user_id'] = user_id
        
        text = "‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n"
        text += "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:"
        
        keyboard = [
            [InlineKeyboardButton("üîû –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="reject_reason_inappropriate")],
            [InlineKeyboardButton("üì∏ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ Faceit", callback_data="reject_reason_invalid_link")],
            [InlineKeyboardButton("üéÆ –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –Ω–∏–∫", callback_data="reject_reason_bad_nickname")],
            [InlineKeyboardButton("üìù –ù–µ–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="reject_reason_incomplete")],
            [InlineKeyboardButton("‚úèÔ∏è –°–≤–æ—è –ø—Ä–∏—á–∏–Ω–∞", callback_data="reject_reason_custom")],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="mod_queue")]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    async def reject_with_reason(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π"""
        query = update.callback_query
        await query.answer()
        
        user_id = context.user_data.get('rejecting_user_id')
        moderator_id = query.from_user.id
        
        reason_map = {
            'inappropriate': '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —Å–ø–∞–º –∏ —Ç.–¥.)',
            'invalid_link': '–ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Faceit –ø—Ä–æ—Ñ–∏–ª—å',
            'bad_nickname': '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫',
            'incomplete': '–ù–µ–ø–æ–ª–Ω–∞—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
        }
        
        reason_key = query.data.split('_')[-1]
        
        if reason_key == 'custom':
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ø—Ä–∏—á–∏–Ω—É
            text = (
                "‚úèÔ∏è <b>–ö–∞—Å—Ç–æ–º–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è</b>\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.\n"
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –≤–∞—à—É –ø—Ä–∏—á–∏–Ω—É."
            )
            
            keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="mod_queue")]]
            
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
            context.user_data['awaiting_rejection_reason'] = True
            return
        
        reason = reason_map.get(reason_key, '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞')
        
        success = await self.db.moderate_profile(user_id, 'rejected', moderator_id, reason)
        
        if success:
            await query.answer(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω: {reason}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.send_moderation_notification(user_id, 'rejected', context, reason)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
            await self.show_next_profile(query, context)
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")

    async def show_next_profile(self, query_or_update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ query –∏–ª–∏ update
        if hasattr(query_or_update, 'callback_query'):
            query = query_or_update.callback_query
        else:
            query = query_or_update
        
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ—Ä–∏—Ä—É–µ–º—É—é –∞–Ω–∫–µ—Ç—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        current_profile = context.user_data.get('moderating_profile')
        exclude_user_id = current_profile.get('user_id') if current_profile else None
        
        profiles = await self.db.get_profiles_for_moderation('pending', limit=1, exclude_user_id=exclude_user_id)
        
        if not profiles:
            text = "‚úÖ –í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!\n\n–ù–µ—Ç –∞–Ω–∫–µ—Ç, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderation_menu")]]
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–∫–∏ "Message is not modified"
            try:
                await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
            except Exception as e:
                if "message is not modified" in str(e).lower():
                    await query.answer("‚úÖ –í—Å–µ –∞–Ω–∫–µ—Ç—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
                else:
                    raise e
            return
        
        profile_data = profiles[0]
        context.user_data['moderating_profile'] = profile_data
        await self.show_profile_for_moderation(query, profile_data)

    async def send_moderation_notification(self, user_id: int, status: str, context: ContextTypes.DEFAULT_TYPE, reason: str = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            if status == 'approved':
                text = (
                    "üéâ <b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
                    "–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ —Å–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –≤–∞—Å —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤.\n"
                    "–£–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã!"
                )
            else:  # rejected
                text = (
                    "‚ùå <b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                    f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é."
                )
            
            keyboard = [[InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile_menu")]]
            
            await context.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")



    async def add_moderator_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è super_admin)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        moderator = await self.db.get_moderator(user_id)
        if not moderator or not moderator.can_manage_moderators():
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args or len(context.args) < 2:
            await update.message.reply_text(
                "üìã <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
                "<code>/add_moderator USER_ID ROLE</code>\n\n"
                "<b>–†–æ–ª–∏:</b>\n"
                "‚Ä¢ <code>moderator</code> - –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è\n"
                "‚Ä¢ <code>admin</code> - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞\n"
                "‚Ä¢ <code>super_admin</code> - –ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "<code>/add_moderator 123456789 moderator</code>",
                parse_mode='HTML'
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            role = context.args[1].lower()
            
            if role not in ['moderator', 'admin', 'super_admin']:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: moderator, admin –∏–ª–∏ super_admin")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            success = await self.db.add_moderator(target_user_id, role, user_id)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∫–∞–∫ {role}"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                try:
                    role_names = {
                        'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
                        'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                        'super_admin': '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
                    }
                    
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=(
                            f"üéâ <b>–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!</b>\n\n"
                            f"<b>–†–æ–ª—å:</b> {role_names[role]}\n\n"
                            "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n"
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–æ–¥–µ—Ä–∞—Ü–∏—è' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
                        ),
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="moderation_menu")]]),
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {target_user_id}: {e}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")

    async def remove_moderator_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        moderator = await self.db.get_moderator(user_id)
        if not moderator or not moderator.can_manage_moderators():
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.")
            return
        
        if not context.args or len(context.args) < 1:
            await update.message.reply_text(
                "üìã <b>–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
                "<code>/remove_moderator USER_ID</code>\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "<code>/remove_moderator 123456789</code>",
                parse_mode='HTML'
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            
            # –£–¥–∞–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º)
            success = await self.db.update_moderator_status(target_user_id, False)
            
            if success:
                await update.message.reply_text(f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {target_user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—ã–≤—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                try:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text="üìã –í–∞—à–∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã.",
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –±—ã–≤—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {target_user_id}: {e}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")

    async def list_moderators_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        moderator = await self.db.get_moderator(user_id)
        if not moderator:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        moderators = await self.db.get_all_moderators()
        
        if not moderators:
            await update.message.reply_text("üë• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        text = "üë• <b>–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n"
        
        for mod in moderators:
            status = "‚úÖ" if mod.is_active else "‚ùå"
            text += f"{status} <code>{mod.user_id}</code> - {mod.role}\n"
        
        await update.message.reply_text(text, parse_mode='HTML')

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        query = update.callback_query
        data = query.data
        
        try:
            if data == "moderation_menu":
                await self.show_moderation_menu(update, context)
            elif data == "mod_queue":
                await self.show_moderation_queue(update, context)
            elif data == "mod_approved":
                await self.show_approved_profiles(update, context)
            elif data == "mod_rejected":
                await self.show_rejected_profiles(update, context)
            elif data == "mod_stats":
                await self.show_moderation_stats(update, context)
            elif data.startswith("approve_"):
                await self.approve_profile(update, context)
            elif data.startswith("reject_reason_"):  # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º reject_reason_ –ü–ï–†–ï–î reject_
                await self.reject_with_reason(update, context)
            elif data.startswith("reject_"):
                await self.reject_profile(update, context)
            elif data == "next_profile":
                await self.show_next_profile(query, context)
            else:
                await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def show_approved_profiles(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        if not await self.db.is_moderator(user_id):
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
        profiles = await self.db.get_profiles_for_moderation('approved', limit=10)
        
        if not profiles:
            text = "‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n–û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = f"‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã ({len(profiles)})</b>\n\n"
            
            for i, profile_data in enumerate(profiles, 1):
                nickname = profile_data['game_nickname']
                user_name = profile_data['first_name']
                moderated_at = profile_data.get('moderated_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                text += f"{i}. <b>{nickname}</b> ({user_name})\n"
                text += f"   üìÖ –û–¥–æ–±—Ä–µ–Ω–æ: {moderated_at}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="moderation_menu")]]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def show_rejected_profiles(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        if not await self.db.is_moderator(user_id):
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
        profiles = await self.db.get_profiles_for_moderation('rejected', limit=10)
        
        if not profiles:
            text = "‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã ({len(profiles)})</b>\n\n"
            
            for i, profile_data in enumerate(profiles, 1):
                nickname = profile_data['game_nickname']
                user_name = profile_data['first_name']
                reason = profile_data.get('moderation_reason', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
                moderated_at = profile_data.get('moderated_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                text += f"{i}. <b>{nickname}</b> ({user_name})\n"
                text += f"   üö´ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                text += f"   üìÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {moderated_at}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="moderation_menu")]]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def show_moderation_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        if not await self.db.is_moderator(user_id):
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await self.db.get_moderation_stats()
        
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
        text += f"‚è≥ <b>–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b> {stats.get('profiles_pending', 0)}\n"
        text += f"‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–æ:</b> {stats.get('profiles_approved', 0)}\n"
        text += f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ:</b> {stats.get('profiles_rejected', 0)}\n"
        text += f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b> {stats.get('active_moderators', 0)}\n\n"
        
        total = stats.get('profiles_approved', 0) + stats.get('profiles_rejected', 0)
        if total > 0:
            approval_rate = round((stats.get('profiles_approved', 0) / total) * 100, 1)
            text += f"üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è:</b> {approval_rate}%"
        
        keyboard = [[InlineKeyboardButton("üîô –ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="moderation_menu")]]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)"""
        if context.user_data.get('awaiting_rejection_reason'):
            user_id = context.user_data.get('rejecting_user_id')
            moderator_id = update.effective_user.id
            custom_reason = update.message.text.strip()
            
            if len(custom_reason) > 200:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å:"
                )
                return
            
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            context.user_data['awaiting_rejection_reason'] = False
            
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
            success = await self.db.moderate_profile(user_id, 'rejected', moderator_id, custom_reason)
            
            if success:
                await update.message.reply_text(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω —Å –ø—Ä–∏—á–∏–Ω–æ–π: {custom_reason}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self.send_moderation_notification(user_id, 'rejected', context, custom_reason)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                profiles = await self.db.get_profiles_for_moderation('pending', limit=1)
                
                if profiles:
                    profile_data = profiles[0]
                    context.user_data['moderating_profile'] = profile_data
                    
                    text = "üë®‚Äçüíº <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã</b>\n\n"
                    text += self.format_profile_for_moderation(profile_data)
                    
                    keyboard = [
                        [
                            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{profile_data['user_id']}"),
                            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{profile_data['user_id']}")
                        ],
                        [InlineKeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞", callback_data="next_profile")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderation_menu")]
                    ]
                    
                    await update.message.reply_text(
                        text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text(
                        "‚úÖ –í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="moderation_menu")]])
                    )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")