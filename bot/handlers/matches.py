"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ç—á–∞–º–∏ (–≤–∑–∞–∏–º–Ω—ã–º–∏ –ª–∞–π–∫–∞–º–∏)
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes
from bot.utils.keyboards import Keyboards
from bot.database.operations import DatabaseManager
from bot.utils.subscription_middleware import subscription_required

logger = logging.getLogger(__name__)

class MatchesHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ç—á–∞–º–∏ (–≤–∑–∞–∏–º–Ω—ã–º–∏ –ª–∞–π–∫–∞–º–∏).
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏.
    """
    
    def __init__(self, db_manager: DatabaseManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ç—á–µ–π.
        
        Args:
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        self.db = db_manager
        logger.info("MatchesHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def matches_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ç—á–∞–º–∏.
        –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
        """
        user_id = update.effective_user.id
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ matches –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
        has_profile = await self.db.has_profile(user_id)
        if not has_profile:
            await update.message.reply_text(
                "‚ùå <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç—á–µ–π –Ω—É–∂–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å!</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
                reply_markup=Keyboards.profile_menu(False),
                parse_mode='HTML'
            )
            return
        
        # –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        await update.message.reply_text(
            "üîÑ <b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–∞—Ç—á–µ–π</b>\n\n"
            "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
            "–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª '–¢–∏–º–º–µ–π—Ç—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.",
            reply_markup=Keyboards.back_button("back_to_main"),
            parse_mode='HTML'
        )

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–∞—Ç—á–∞–º–∏.
        –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
        """
        query = update.callback_query
        data = query.data
        user_id = query.from_user.id
        
        logger.info(f"MatchesHandler –ø–æ–ª—É—á–∏–ª callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        await query.answer()
        
        # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if data == "matches_back" or data == "back_to_main":
            from bot.handlers.start import StartHandler
            start_handler = StartHandler(self.db)
            await start_handler.show_main_menu(query)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
            await query.edit_message_text(
                "üîÑ <b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
                "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.",
                reply_markup=Keyboards.back_button("back_to_main"),
                parse_mode='HTML'
            )

    async def get_user_matches(self, user_id: int):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            List[Match]: –°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        logger.info(f"–ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return await self.db.get_user_matches(user_id)

    async def create_match(self, user1_id: int, user2_id: int):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Ç—á –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
        
        Args:
            user1_id: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user2_id: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –º–∞—Ç—á —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ {user1_id} –∏ {user2_id}")
        return await self.db.create_match(user1_id, user2_id)

    async def check_match_exists(self, user1_id: int, user2_id: int):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞ (–º–∞—Ç—á–∞) –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
        
        Args:
            user1_id: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user2_id: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –µ—Å—Ç—å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç—á–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ {user1_id} –∏ {user2_id}")
        return await self.db.check_mutual_like(user1_id, user2_id)
