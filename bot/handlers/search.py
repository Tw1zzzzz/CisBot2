"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Ç–∏–º–º–µ–π—Ç–æ–≤
"""
import logging
import asyncio
from telegram import Update
from telegram.ext import ContextTypes
from bot.utils.keyboards import Keyboards
from bot.utils.notifications import NotificationManager
from bot.utils.cs2_data import format_elo_display, format_role_display, format_maps_list, calculate_profile_compatibility, extract_faceit_nickname, PLAYTIME_OPTIONS
from bot.utils.faceit_analyzer import faceit_analyzer
from bot.utils.background_processor import TaskPriority
from bot.utils.progressive_loader import get_progressive_loader
from bot.database.operations import DatabaseManager

logger = logging.getLogger(__name__)

class SearchHandler:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager
        self._notification_manager = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏

    def _get_notification_manager(self, context: ContextTypes.DEFAULT_TYPE) -> NotificationManager:
        """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä NotificationManager, —Å–æ–∑–¥–∞–≤–∞—è –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        if self._notification_manager is None:
            self._notification_manager = NotificationManager(context.bot, self.db)
        return self._notification_manager

    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /search - –º–µ–Ω—é –ø–æ–∏—Å–∫–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_profile = await self.db.has_profile(user_id)
        
        if not has_profile:
            await update.message.reply_text(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>\n\n"
                "üìù –î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∏–º–º–µ–π—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.\n"
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –Ω–∞–π—Ç–∏ –≤–∞—Å!\n\n"
                "üë§ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:",
                reply_markup=Keyboards.profile_menu(False),
                parse_mode='HTML'
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
        text = (
            "üîç <b>–ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:"
        )
        
        await update.message.reply_text(
            text,
            reply_markup=Keyboards.search_menu(),
            parse_mode='HTML'
        )

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã –ø–æ–∏—Å–∫–∞"""
        query = update.callback_query
        data = query.data
        user_id = query.from_user.id

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        callback_key = f"callback_{user_id}_{data}"
        current_time = asyncio.get_event_loop().time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –ª–∏ —ç—Ç–æ—Ç callback –Ω–µ–¥–∞–≤–Ω–æ
        if hasattr(context, 'user_data') and context.user_data:
            last_callback_time = context.user_data.get(f"last_callback_{data}", 0)
            if current_time - last_callback_time < 1.0:  # 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞—â–∏—Ç—ã
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ callback {data} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ callback
            context.user_data[f"last_callback_{data}"] = current_time

        if data == "search_start":
            await self.start_search(update, context)
        elif data == "search_random":
            await self.random_search(update, context)
        elif data == "search_menu":
            await self.show_search_menu(update, context)
        elif data == "search_elo_filter":
            await self.show_elo_filter_menu(update, context)
        elif data.startswith("elo_filter_"):
            await self.handle_elo_filter_selection(update, context)
        elif data == "apply_elo_filter":
            await self.apply_elo_filter(update, context)
        elif data == "search_categories_filter":
            await self.show_categories_filter_menu(update, context)
        elif data.startswith("categories_filter_"):
            await self.handle_categories_filter_selection(update, context)
        elif data == "apply_categories_filter":
            await self.apply_categories_filter(update, context)
        elif data == "like":
            await self.handle_like(update, context)
        elif data == "skip":
            await self.handle_skip(update, context)

    async def start_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤"""
        try:
            query = update.callback_query
            user_id = query.from_user.id
            
            # üî• –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            has_profile = await self.db.has_profile(user_id)
            if not has_profile:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–∫–∞—Ç—å –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è")
                await query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!", show_alert=True)
                return
            
            logger.debug(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫")
            await query.answer()
            
            # üî• –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            logger.info(f"–ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ª–∏–º–∏—Ç: 20)")
            try:
                candidates = await self.db.find_candidates(user_id, limit=20)
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if candidates:
                    candidate_ids = [getattr(c, 'user_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω') for c in candidates[:5]]
                    logger.debug(f"–ü–µ—Ä–≤—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è {user_id}: {candidate_ids}")
                
            except Exception as candidates_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {candidates_error}", exc_info=True)
                candidates = []
            
            if not candidates:
                logger.info(f"–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await query.edit_message_text(
                    "üòî <b>–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ\n"
                    "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã\n"
                    "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –±–æ—Ç–µ –¥—Ä—É–∑—å—è–º!",
                    reply_markup=Keyboards.back_button("back_to_main"),
                    parse_mode='HTML'
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑
            context.user_data['candidates'] = candidates
            context.user_data['current_candidate_index'] = 0
            
            logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∫–∞–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self.show_candidate(query, context)
            
        except Exception as e:
            user_id_safe = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            try:
                user_id_safe = update.callback_query.from_user.id
            except:
                pass
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ start_search –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_safe}: {e}", exc_info=True)

    async def random_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ª—É—á–∞–π–Ω—ã–π –ø–æ–∏—Å–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates = await self.db.find_candidates(user_id, limit=50)
        
        if not candidates:
            await query.edit_message_text(
                "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞",
                reply_markup=Keyboards.back_button("back_to_main")
            )
            return
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ
        import random
        random.shuffle(candidates)
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö 20
        candidates = candidates[:20]
        
        context.user_data['candidates'] = candidates
        context.user_data['current_candidate_index'] = 0
        
        await self.show_candidate(query, context)

    async def show_candidate(self, query_or_update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        try:
            # üî• –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ù–∞—á–∞–ª–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            candidates = context.user_data.get('candidates', [])
            current_index = context.user_data.get('current_candidate_index', 0)
            user_id = query_or_update.from_user.id if hasattr(query_or_update, 'from_user') else query_or_update.effective_user.id
            
            # Cancel pending ELO updates when navigating to next candidate
            progressive_loader = get_progressive_loader()
            if progressive_loader:
                await progressive_loader.cancel_pending_updates(user_id)
                logger.debug(f"Cancelled pending ELO updates for user {user_id} before showing candidate")
            
            logger.info(f"show_candidate: user_id={user_id}, index={current_index}, total_candidates={len(candidates)}")
            
            if current_index >= len(candidates):
                # üî• –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
                logger.info(f"–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ {current_index} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
                
                text = (
                    "‚úÖ <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                    "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –±–æ—Ç–µ –¥—Ä—É–∑—å—è–º!"
                )
                
                # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if hasattr(query_or_update, 'message') and query_or_update.message:
                        chat_id = query_or_update.message.chat_id
                    elif hasattr(query_or_update, 'effective_chat'):
                        chat_id = query_or_update.effective_chat.id
                    else:
                        chat_id = query_or_update.from_user.id
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    edit_attempted = False
                    if hasattr(query_or_update, 'edit_message_text') and hasattr(query_or_update, 'message'):
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º
                            if query_or_update.message.text:
                                await query_or_update.edit_message_text(
                                    text,
                                    reply_markup=Keyboards.back_button("back_to_main"),
                                    parse_mode='HTML'
                                )
                                edit_attempted = True
                                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        except Exception as edit_error:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è {user_id}: {edit_error}")
                    
                    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if not edit_attempted:
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        if hasattr(query_or_update, 'get_bot'):
                            bot = query_or_update.get_bot()
                        else:
                            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –±–æ—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                            bot = context.bot if context else None
                        
                        if bot:
                            await bot.send_message(
                                chat_id=chat_id,
                                text=text,
                                reply_markup=Keyboards.back_button("back_to_main"),
                                parse_mode='HTML'
                            )
                            logger.debug(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        else:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º message.reply_text –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                            if hasattr(query_or_update, 'message'):
                                await query_or_update.message.reply_text(
                                    text,
                                    reply_markup=Keyboards.back_button("back_to_main"),
                                    parse_mode='HTML'
                                )
                
                except Exception as completion_error:
                    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è {user_id}: {completion_error}", exc_info=True)
                    # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –∫—Ä–∞—à–∏—Ç—å –±–æ—Ç–∞
                
                return
            
            candidate = candidates[current_index]
            candidate_id = getattr(candidate, 'user_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
            
            # üî• –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
            logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–∏–Ω–¥–µ–∫—Å {current_index})")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            try:
                user_profile = await self.db.get_profile(user_id)
                if not user_profile:
                    logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id}")
                else:
                    logger.debug(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ª—É—á–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º {candidate_id}")
            except Exception as profile_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {profile_error}")
                user_profile = None
            
            # Progressive loading: Format basic profile first (without ELO API calls)
            logger.debug(f"–ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id}")
            try:
                text = await self.format_candidate_profile_basic(candidate, user_profile, user_id)
                logger.debug(f"–ë–∞–∑–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id} —Å—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞, –¥–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            except Exception as format_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id}: {format_error}")
                text = f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã</b>\n\n–ö–∞–Ω–¥–∏–¥–∞—Ç: {candidate_id}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            context.user_data['current_candidate'] = candidate
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            if hasattr(query_or_update, 'message') and query_or_update.message:
                chat_id = query_or_update.message.chat_id
            elif hasattr(query_or_update, 'effective_chat'):
                chat_id = query_or_update.effective_chat.id
            else:
                chat_id = query_or_update.from_user.id
            
            # üî• –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞
            has_media = False
            media_type = None
            try:
                has_media = candidate.has_media()
                media_type = getattr(candidate, 'media_type', None) if has_media else None
                logger.debug(f"–ö–∞–Ω–¥–∏–¥–∞—Ç {candidate_id}: has_media={has_media}, media_type={media_type}")
            except Exception as media_check_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞ —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id}: {media_check_error}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            query_for_edit = query_or_update if hasattr(query_or_update, 'edit_message_text') else None
            
            # Progressive loading: Send basic profile immediately and schedule ELO update
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∞–Ω–∫–µ—Ç—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (chat_id={chat_id}, has_media={has_media})")
            
            try:
                # Send basic profile first
                message_info = await self.send_candidate_with_media(
                    chat_id=chat_id,
                    candidate=candidate,
                    text=text,
                    reply_markup=Keyboards.like_buttons(),
                    context=context,
                    query_for_edit=query_for_edit
                )
                logger.info(f"–ë–∞–∑–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                # Progressive loading: Register message and schedule ELO update
                if message_info and len(message_info) >= 4:
                    chat_id_msg, message_id, is_media, is_photo = message_info
                    
                    # Only register progressive updates if message was sent successfully
                    if message_id > 0:
                        # Get progressive loader
                        progressive_loader = get_progressive_loader()
                        if progressive_loader:
                            # Generate context ID to prevent race conditions
                            import uuid
                            context_id = f"search_{user_id}_{candidate_id}_{uuid.uuid4().hex[:8]}"
                            
                            # Set user context
                            await progressive_loader.set_user_context(user_id, context_id)
                            
                            # Register message for ELO updates
                            message_key = progressive_loader.register_message(
                                chat_id_msg, message_id, is_media, is_photo,
                                user_id, 'search', context_id
                            )
                            
                            # Schedule ELO update in background if candidate has faceit nickname
                            game_nickname = getattr(candidate, 'game_nickname', '')
                            if game_nickname and game_nickname.strip():
                                logger.debug(f"Scheduling ELO update for candidate {candidate_id} with nickname {game_nickname}")
                                
                                # Create faceit data for the update
                                faceit_data = {
                                    'faceit_nickname': game_nickname,
                                    'faceit_elo': getattr(candidate, 'faceit_elo', 0)
                                }
                                
                                # Schedule the ELO update
                                await self._schedule_candidate_elo_update(
                                    message_key, candidate, faceit_data, user_profile, user_id
                                )
                            else:
                                logger.debug(f"No faceit nickname for candidate {candidate_id}, skipping ELO update")
                
            except Exception as send_error:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {send_error}", exc_info=True)
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                try:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        parse_mode='HTML',
                        reply_markup=Keyboards.like_buttons()
                    )
                except:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        except Exception as e:
            user_id_safe = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            try:
                user_id_safe = query_or_update.from_user.id if hasattr(query_or_update, 'from_user') else query_or_update.effective_user.id
            except:
                pass
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_candidate –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_safe}: {e}", exc_info=True)

    async def format_candidate_profile_basic(self, candidate, user_profile=None, current_user_id=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∫–µ—Ç—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        try:
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞
            show_name = False
            if current_user_id:
                try:
                    show_name = await self.db.check_mutual_like(current_user_id, candidate.user_id)
                except Exception as like_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞ –¥–ª—è {current_user_id} -> {candidate.user_id}: {like_error}")
                    show_name = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –Ω–∏–∫–∞
            game_nickname = getattr(candidate, 'game_nickname', None)
            if not game_nickname or game_nickname.strip() == '':
                game_nickname = f"–ò–≥—Ä–æ–∫ #{candidate.user_id}"  # Fallback –∑–Ω–∞—á–µ–Ω–∏–µ
            
            text = f"üë§ <b>{game_nickname}</b>\n"
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ Telegram –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ
            if show_name:
                try:
                    user = await self.db.get_user(candidate.user_id)
                    if user and user.first_name:
                        telegram_info = user.first_name
                        if hasattr(user, 'username') and user.username:
                            telegram_info += f" (@{user.username})"
                        text += f"üîó <b>Telegram:</b> {telegram_info}\n"
                except Exception as user_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {candidate.user_id}: {user_error}")
                    # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º Telegram –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            text += "\n"
            
            # Progressive loading: Show ELO loading placeholder immediately
            try:
                faceit_elo = getattr(candidate, 'faceit_elo', 0)
                
                if not isinstance(faceit_elo, int) or faceit_elo < 0:
                    faceit_elo = 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                if faceit_elo > 0:
                    # Show loading placeholder for immediate display
                    text += f"üéØ <b>ELO Faceit:</b> {Keyboards.elo_loading_placeholder()}\n"
                else:
                    text += f"üéØ <b>ELO Faceit:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"
            except Exception as elo_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ELO –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {elo_error}")
                text += f"üéØ <b>ELO Faceit:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ Faceit –Ω–∏–∫–Ω–µ–π–º–∞ –∏ URL
            try:
                faceit_url = getattr(candidate, 'faceit_url', '')
                if faceit_url:
                    nickname = extract_faceit_nickname(faceit_url)
                    if not nickname:  # –ï—Å–ª–∏ –∏–∑–≤–ª–µ—á—å –Ω–µ —É–¥–∞–ª–æ—Å—å
                        nickname = "–ø—Ä–æ—Ñ–∏–ª—å"
                    text += f"üîó <b>Faceit:</b> <a href='{faceit_url}'>{nickname}</a>\n"
                else:
                    text += f"üîó <b>Faceit:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"
            except Exception as faceit_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Faceit URL –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {faceit_error}")
                text += f"üîó <b>Faceit:</b> –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n"
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–ª–∏
            try:
                role = getattr(candidate, 'role', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                text += f"üë• <b>–†–æ–ª—å:</b> {format_role_display(role)}\n"
            except Exception as role_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–ª–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {role_error}")
                text += f"üë• <b>–†–æ–ª—å:</b> –ù–µ —É–∫–∞–∑–∞–Ω–∞\n"
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç
            try:
                favorite_maps = getattr(candidate, 'favorite_maps', [])
                if not isinstance(favorite_maps, list):
                    favorite_maps = []
                text += f"üó∫Ô∏è <b>–õ—é–±–∏–º—ã–µ –∫–∞—Ä—Ç—ã:</b> {format_maps_list(favorite_maps)}\n"
            except Exception as maps_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {maps_error}")
                text += f"üó∫Ô∏è <b>–õ—é–±–∏–º—ã–µ –∫–∞—Ä—Ç—ã:</b> –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n"
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
            try:
                playtime_slots = getattr(candidate, 'playtime_slots', [])
                if not isinstance(playtime_slots, list):
                    playtime_slots = []
                
                time_displays = []
                for slot_id in playtime_slots:
                    try:
                        time_option = next((t for t in PLAYTIME_OPTIONS if t['id'] == slot_id), None)
                        if time_option:
                            time_displays.append(f"{time_option['emoji']} {time_option['name']}")
                    except Exception as slot_error:
                        logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ {slot_id}: {slot_error}")
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ª–æ—Ç
                
                if time_displays:
                    text += f"‚è∞ <b>–í—Ä–µ–º—è –∏–≥—Ä—ã:</b>\n"
                    for time_display in time_displays:
                        text += f"   {time_display}\n"
                else:
                    text += f"‚è∞ <b>–í—Ä–µ–º—è –∏–≥—Ä—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"
            except Exception as time_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {time_error}")
                text += f"‚è∞ <b>–í—Ä–µ–º—è –∏–≥—Ä—ã:</b> –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n"
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            try:
                if hasattr(candidate, 'categories') and candidate.categories:
                    categories = candidate.categories
                    if isinstance(categories, list) and len(categories) > 0:
                        from bot.utils.cs2_data import format_categories_display
                        categories_text = format_categories_display(categories)
                        text += f"üéÆ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {categories_text}\n"
            except Exception as categories_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {categories_error}")
                # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
            try:
                description = getattr(candidate, 'description', None)
                if description and description.strip():
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    max_description_length = 200
                    if len(description) > max_description_length:
                        description = description[:max_description_length] + "..."
                    text += f"\nüí¨ <b>–û —Å–µ–±–µ:</b>\n{description}\n"
            except Exception as description_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {description_error}")
                # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Faceit –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ show_candidate –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞
            try:
                if candidate.has_media():
                    media_icon = "üì∑" if candidate.is_photo() else "üé•"
                    text += f"\n{media_icon} <b>–ú–µ–¥–∏–∞:</b> –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"
            except Exception as media_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {media_error}")
                # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if user_profile:
                try:
                    compatibility = calculate_profile_compatibility(user_profile, candidate)
                    if compatibility and 'total' in compatibility:
                        total_compat = compatibility['total']
                        compat_emoji = "üî•" if total_compat >= 80 else "‚≠ê" if total_compat >= 60 else "üëå" if total_compat >= 40 else "ü§î"
                        text += f"\n{compat_emoji} <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b> {total_compat}%"
                except Exception as compatibility_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {compatibility_error}")
                    # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            return text
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {e}", exc_info=True)
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Fallback –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
            try:
                fallback_nickname = getattr(candidate, 'game_nickname', f"–ò–≥—Ä–æ–∫ #{candidate.user_id}")
                fallback_elo = getattr(candidate, 'faceit_elo', 0)
                
                return (
                    f"üë§ <b>{fallback_nickname}</b>\n\n"
                    f"üéØ <b>ELO Faceit:</b> {fallback_elo}\n"
                    f"‚ö†Ô∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
                    f"<i>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è.</i>"
                )
            except Exception as fallback_error:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {fallback_error}")
                return f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã</b>\n\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {candidate.user_id if hasattr(candidate, 'user_id') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}"

    async def format_candidate_profile_with_elo(self, candidate, elo_data, user_profile=None, current_user_id=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∫–µ—Ç—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å ELO –¥–∞–Ω–Ω—ã–º–∏ (–¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)"""
        try:
            # Get basic profile text
            text = await self.format_candidate_profile_basic(candidate, user_profile, current_user_id)
            
            # Replace ELO loading placeholder with actual data
            if elo_data:
                from bot.utils.cs2_data import format_faceit_elo_display
                
                faceit_elo = getattr(candidate, 'faceit_elo', 0)
                game_nickname = getattr(candidate, 'game_nickname', '')
                
                # Get min/max ELO from API data
                lowest_elo = elo_data.get('lowest_elo', 0)
                highest_elo = elo_data.get('highest_elo', 0)
                
                # Validate ELO data
                if isinstance(lowest_elo, (int, float)) and isinstance(highest_elo, (int, float)):
                    lowest_elo = int(lowest_elo) if lowest_elo >= 0 else 0
                    highest_elo = int(highest_elo) if highest_elo >= 0 else 0
                    
                    # Format ELO display with min/max if available
                    if lowest_elo > 0 or highest_elo > 0:
                        elo_display = format_faceit_elo_display(faceit_elo, lowest_elo, highest_elo, game_nickname)
                        logger.debug(f"ELO updated for {game_nickname}: {faceit_elo} (min: {lowest_elo}, max: {highest_elo})")
                    else:
                        elo_display = format_elo_display(faceit_elo)
                else:
                    elo_display = format_elo_display(faceit_elo)
                
                # Replace loading placeholder with actual ELO
                loading_placeholder = Keyboards.elo_loading_placeholder()
                text = text.replace(loading_placeholder, elo_display)
            
            return text
            
        except Exception as e:
            logger.error(f"Error formatting candidate profile with ELO for {candidate.user_id}: {e}", exc_info=True)
            # Return basic profile text as fallback
            return await self.format_candidate_profile_basic(candidate, user_profile, current_user_id)

    async def _schedule_candidate_elo_update(self, message_key: str, candidate, faceit_data: dict, user_profile, user_id: int) -> None:
        """Schedule ELO update for a candidate profile"""
        try:
            progressive_loader = get_progressive_loader()
            if not progressive_loader:
                logger.warning("Progressive loader not available for ELO update")
                return
                
            # Create format callback for ELO updates
            async def format_callback(updated_faceit_data, include_elo=True):
                if include_elo:
                    formatted_text = await self.format_candidate_profile_with_elo(
                        candidate, updated_faceit_data, user_profile, user_id
                    )
                else:
                    formatted_text = await self.format_candidate_profile_basic(
                        candidate, user_profile, user_id
                    )
                return formatted_text, Keyboards.like_buttons()
            
            # Schedule the ELO update with HIGH priority for search results
            success = await progressive_loader.schedule_elo_update(
                message_key, faceit_data, format_callback, TaskPriority.HIGH
            )
            
            if success:
                logger.debug(f"ELO update scheduled for candidate {candidate.user_id}")
            else:
                logger.warning(f"Failed to schedule ELO update for candidate {candidate.user_id}")
                
        except Exception as e:
            logger.error(f"Error scheduling ELO update for candidate {candidate.user_id}: {e}", exc_info=True)

    async def send_candidate_with_media(self, chat_id: int, candidate, text: str, reply_markup=None, context=None, query_for_edit=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –º–µ–¥–∏–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        try:
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É caption –¥–ª—è –º–µ–¥–∏–∞ (–ª–∏–º–∏—Ç Telegram = 1024 —Å–∏–º–≤–æ–ª–∞)  
            if candidate.has_media():
                # –û–±—Ä–µ–∑–∞–µ–º caption –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                caption_limit = 1020  # –ù–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏  
                media_caption = text if len(text) <= caption_limit else text[:caption_limit] + "..."
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: type={candidate.media_type}, caption_length={len(media_caption)}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Å caption
                media_sent = False
                sent_message = None
                if candidate.is_photo():
                    try:
                        sent_message = await context.bot.send_photo(
                            chat_id=chat_id,
                            photo=candidate.media_file_id,
                            caption=media_caption,
                            parse_mode='HTML',
                            reply_markup=reply_markup
                        )
                        media_sent = True
                    except Exception as photo_error:
                        error_msg = str(photo_error).lower()
                        if "wrong file identifier" in error_msg or "file not found" in error_msg:
                            logger.warning(f"File ID –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è —Ñ–æ—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {photo_error}")
                            # –ü–æ–º–µ—á–∞–µ–º –º–µ–¥–∏–∞ –∫–∞–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –≤ –ë–î
                            await self._invalidate_media(candidate.user_id, "invalid_file_id")
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {photo_error}")
                        
                elif candidate.is_video():
                    try:
                        sent_message = await context.bot.send_video(
                            chat_id=chat_id,
                            video=candidate.media_file_id,
                            caption=media_caption,
                            parse_mode='HTML',
                            reply_markup=reply_markup
                        )
                        media_sent = True
                    except Exception as video_error:
                        error_msg = str(video_error).lower()
                        if "wrong file identifier" in error_msg or "file not found" in error_msg:
                            logger.warning(f"File ID –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è –≤–∏–¥–µ–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {video_error}")
                            # –ü–æ–º–µ—á–∞–µ–º –º–µ–¥–∏–∞ –∫–∞–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –≤ –ë–î
                            await self._invalidate_media(candidate.user_id, "invalid_file_id")
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {video_error}")
                
                # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not media_sent:
                    logger.warning(f"–ú–µ–¥–∏–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}")
                    sent_message = await context.bot.send_message(
                        chat_id=chat_id,
                        text=text,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                    
                # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if query_for_edit and hasattr(query_for_edit, 'message'):
                    try:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        import asyncio
                        await asyncio.sleep(0.1)
                        await query_for_edit.message.delete()
                        logger.debug(f"–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}")
                    except Exception as delete_error:
                        # –ù–ï –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {delete_error}")
                        
                # Return message info for media messages
                if sent_message:
                    return (sent_message.chat_id, sent_message.message_id, True, candidate.is_photo())
                        
            else:
                # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –±–µ–∑ –º–µ–¥–∏–∞
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if query_for_edit and hasattr(query_for_edit, 'edit_message_text'):
                    try:
                        await query_for_edit.edit_message_text(
                            text=text,
                            parse_mode='HTML',
                            reply_markup=reply_markup
                        )
                        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}")
                        # Return message info for edited message
                        return (query_for_edit.message.chat_id, query_for_edit.message.message_id, False, False)
                    except Exception as edit_error:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {edit_error}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_message = await context.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                logger.debug(f"–ù–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}")
                
                # Return message info for new text message
                return (sent_message.chat_id, sent_message.message_id, False, False)
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {e}", exc_info=True)
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω—ã–π fallback —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            try:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                fallback_text = text[:4000] if text and len(text) > 4000 else (text or "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
                
                sent_message = await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è <b>–ü—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</b>\n\n{fallback_text}\n\n<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.</i>",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                logger.info(f"Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}")
                
                # Return message info for fallback message
                return (sent_message.chat_id, sent_message.message_id, False, False)
                
            except Exception as fallback_error:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ fallback –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate.user_id}: {fallback_error}", exc_info=True)
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                try:
                    sent_message = await context.bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                    # Return message info even for error messages
                    if sent_message:
                        return (sent_message.chat_id, sent_message.message_id, False, False)
                except:
                    pass  # –ù–µ –º–æ–∂–µ–º –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É
                    
        # Return message info if we have a sent message
        if 'sent_message' in locals() and sent_message:
            is_media = bool(candidate.has_media() and media_sent)
            is_photo = bool(candidate.is_photo() and media_sent)
            return (sent_message.chat_id, sent_message.message_id, is_media, is_photo)
        
        # Fallback return if no message was sent successfully  
        return (chat_id, 0, False, False)

    async def handle_like(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∞–π–∫"""
        try:
            query = update.callback_query
            user_id = query.from_user.id
            
            # üî• –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∞–π–∫–∞
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            current_candidate = context.user_data.get('current_candidate')
            if not current_candidate:
                await query.answer("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                logger.warning(f"–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return
            
            candidate_id = getattr(current_candidate, 'user_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
            logger.info(f"–õ–∞–π–∫ –æ—Ç {user_id} –∫–∞–Ω–¥–∏–¥–∞—Ç—É {candidate_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (who_can_like)
            try:
                can_like = await self._check_can_like(user_id, current_candidate.user_id)
                if not can_like:
                    await query.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤", show_alert=True)
                    logger.info(f"–õ–∞–π–∫ –æ—Ç {user_id} –∫ {candidate_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É
                    await self.next_candidate(query, context)
                    return
            except Exception as privacy_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ª–∞–π–∫–∞ {user_id} -> {candidate_id}: {privacy_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ä–∞–∑—Ä–µ—à–∞—è –ª–∞–π–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ —Å –ë–î
            await query.answer("‚ù§Ô∏è –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!")
            logger.debug(f"Callback acknowledged –¥–ª—è –ª–∞–π–∫–∞ {user_id} -> {candidate_id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ –ë–î
            try:
                await self.db.add_like(user_id, current_candidate.user_id)
                logger.info(f"–õ–∞–π–∫ {user_id} -> {candidate_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î")
            except Exception as db_error:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–π–∫–∞ –≤ –ë–î {user_id} -> {candidate_id}: {db_error}")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                await query.edit_message_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=Keyboards.like_buttons(),
                    parse_mode='HTML'
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –ª–∞–π–∫–∞
            try:
                notification_manager = self._get_notification_manager(context)
                await notification_manager.send_like_notification(
                    liked_user_id=current_candidate.user_id, 
                    liker_user_id=user_id
                )
                logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç {user_id} –∫ {candidate_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ {user_id} -> {candidate_id}: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
            try:
                is_mutual = await self.db.check_mutual_like(user_id, current_candidate.user_id)
                logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞ {user_id} <-> {candidate_id}: {is_mutual}")
            except Exception as mutual_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞ {user_id} <-> {candidate_id}: {mutual_error}")
                is_mutual = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞ –Ω–µ—Ç
            
            if is_mutual:
                logger.info(f"üéâ –í–ó–ê–ò–ú–ù–´–ô –õ–ê–ô–ö! {user_id} <-> {candidate_id}")
                
                # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å —Ç–∏–º–º–µ–π—Ç–æ–º
                try:
                    await self.db.create_match(user_id, current_candidate.user_id)
                    logger.info(f"–ú–∞—Ç—á —Å–æ–∑–¥–∞–Ω –º–µ–∂–¥—É {user_id} –∏ {candidate_id}")
                except Exception as match_error:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞ {user_id} <-> {candidate_id}: {match_error}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                try:
                    notification_manager = self._get_notification_manager(context)
                    await notification_manager.send_match_notification(
                        user1_id=user_id,
                        user2_id=current_candidate.user_id
                    )
                    logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {user_id} <-> {candidate_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–∞—Ç—á–µ {user_id} <-> {candidate_id}: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
                
                match_text = (
                    "üéâ <b>–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –£ –í–ê–° –¢–ò–ú–ú–ï–ô–¢!</b>\n\n"
                    f"–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É!\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.\n\n"
                    "–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–≥—Ä–æ–∫–∞ –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Ç–∏–º–º–µ–π—Ç—ã'."
                )
                
                # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id
                    if hasattr(query, 'message') and query.message:
                        chat_id = query.message.chat_id
                    else:
                        chat_id = query.from_user.id
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
                    if hasattr(query, 'message') and query.message and query.message.text:
                        await query.edit_message_text(
                            match_text,
                            reply_markup=Keyboards.back_button("back_to_main"),
                            parse_mode='HTML'
                        )
                        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {user_id}")
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –±—ã–ª–æ –º–µ–¥–∏–∞
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=match_text,
                            reply_markup=Keyboards.back_button("back_to_main"),
                            parse_mode='HTML'
                        )
                        logger.debug(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {user_id}")
                        
                except Exception as message_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–∞—Ç—á–µ –¥–ª—è {user_id}: {message_error}")
                    # Fallback - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                
                return
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É
            logger.debug(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self.next_candidate(query, context)
            
        except Exception as e:
            user_id_safe = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            try:
                user_id_safe = update.callback_query.from_user.id
            except:
                pass
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_like –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_safe}: {e}", exc_info=True)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                if update.callback_query:
                    await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
            except:
                pass  # –ù–µ –º–æ–∂–µ–º –¥–∞–∂–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback

    async def handle_skip(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫"""
        try:
            query = update.callback_query
            user_id = query.from_user.id
            
            # üî• –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞
            current_candidate = context.user_data.get('current_candidate')
            candidate_id = getattr(current_candidate, 'user_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω') if current_candidate else '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∫–∞–Ω–¥–∏–¥–∞—Ç {candidate_id}")
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
            await query.answer("‚û°Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ")
            logger.debug(f"Callback acknowledged –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ {user_id}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É
            await self.next_candidate(query, context)
            
        except Exception as e:
            user_id_safe = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            try:
                user_id_safe = update.callback_query.from_user.id
            except:
                pass
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_skip –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_safe}: {e}", exc_info=True)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                if update.callback_query:
                    await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
            except:
                pass  # –ù–µ –º–æ–∂–µ–º –¥–∞–∂–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback

    async def next_candidate(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É"""
        try:
            current_index = context.user_data.get('current_candidate_index', 0)
            context.user_data['current_candidate_index'] = current_index + 1
            
            user_id = query.from_user.id if hasattr(query, 'from_user') else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            
            # Cancel pending ELO updates before navigating to next candidate
            progressive_loader = get_progressive_loader()
            if progressive_loader and hasattr(query, 'from_user'):
                await progressive_loader.cancel_pending_updates(query.from_user.id)
                logger.debug(f"Cancelled pending ELO updates for user {query.from_user.id} before next candidate")
            
            logger.debug(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É #{current_index + 1} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            await self.show_candidate(query, context)
            
        except Exception as e:
            user_id_safe = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            try:
                user_id_safe = query.from_user.id if hasattr(query, 'from_user') else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            except:
                pass
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ next_candidate –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_safe}: {e}", exc_info=True)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                if hasattr(query, 'answer'):
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            except:
                pass  # –ù–µ –º–æ–∂–µ–º –¥–∞–∂–µ –æ—Ç–≤–µ—Ç–∏—Ç—å

    async def show_search_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–∏—Å–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        text = (
            "üîç <b>–ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.search_menu(),
            parse_mode='HTML'
        )

    async def show_elo_filter_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ ELO —Ñ–∏–ª—å—Ç—Ä–∞"""
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings = await self.db.get_user_settings(user_id)
        current_filter = 'any'
        if user_settings:
            filters = user_settings.get_search_filters()
            current_filter = filters.get('elo_filter', 'any')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['selected_elo_filter'] = current_filter
        
        text = (
            "üéØ <b>–§–∏–ª—å—Ç—Ä –ø–æ ELO</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω ELO –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
            "üî∞ <b>–î–æ 1999 ELO</b> - –ù–æ–≤–∏—á–∫–∏ –∏ —Ä–∞—Å—Ç—É—â–∏–µ –∏–≥—Ä–æ–∫–∏\n"
            "‚≠ê <b>2000-2699 ELO</b> - –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã\n"
            "üèÜ <b>2700-3099 ELO</b> - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å\n"
            "üíé <b>3100+ ELO</b> - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å\n"
            "üëë <b>TOP 1000</b> - –õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.elo_filter_menu(current_filter),
            parse_mode='HTML'
        )

    async def handle_elo_filter_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä ELO —Ñ–∏–ª—å—Ç—Ä–∞"""
        query = update.callback_query
        data = query.data
        await query.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        filter_id = data.replace("elo_filter_", "")
        context.user_data['selected_elo_filter'] = filter_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –Ω–æ–≤—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
        await self.show_elo_filter_menu(update, context)

    async def apply_elo_filter(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π ELO —Ñ–∏–ª—å—Ç—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        selected_filter = context.user_data.get('selected_elo_filter', 'any')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self._save_elo_filter(user_id, selected_filter)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from bot.utils.cs2_data import format_elo_filter_display
        filter_text = format_elo_filter_display(selected_filter)
        
        await query.edit_message_text(
            f"‚úÖ <b>–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä:</b> {filter_text}\n\n"
            f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...",
            parse_mode='HTML'
        )
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
        await self.start_search(update, context)

    async def show_categories_filter_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings = await self.db.get_user_settings(user_id)
        current_filter = []
        if user_settings:
            filters = user_settings.get_search_filters()
            current_filter = filters.get('categories_filter', [])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['selected_categories_filter'] = current_filter.copy()
        
        text = (
            "üéÆ <b>–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤.\n"
            "–ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.categories_filter_menu(current_filter),
            parse_mode='HTML'
        )

    async def handle_categories_filter_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        query = update.callback_query
        data = query.data
        await query.answer()
        
        selected_categories = context.user_data.get('selected_categories_filter', [])
        
        if data == "categories_filter_any":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
            selected_categories = []
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_id = data.replace("categories_filter_", "")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category_id in selected_categories:
                selected_categories.remove(category_id)
            else:
                selected_categories.append(category_id)
        
        context.user_data['selected_categories_filter'] = selected_categories
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –Ω–æ–≤—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
        await self.show_categories_filter_menu(update, context)

    async def apply_categories_filter(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        selected_filter = context.user_data.get('selected_categories_filter', [])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self._save_categories_filter(user_id, selected_filter)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if selected_filter:
            from bot.utils.cs2_data import format_categories_display
            filter_text = format_categories_display(selected_filter)
            text = f"‚úÖ <b>–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\nüéÆ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {filter_text}\n\n–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫..."
        else:
            text = "‚úÖ <b>–§–∏–ª—å—Ç—Ä —Å–±—Ä–æ—à–µ–Ω!</b>\n\nüéÆ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> –õ—é–±—ã–µ\n\n–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫..."
        
        await query.edit_message_text(
            text,
            parse_mode='HTML'
        )
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
        await self.start_search(update, context)

    async def _save_categories_filter(self, user_id: int, categories_filter: list):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user_settings = await self.db.get_user_settings(user_id)
            if user_settings:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                current_filters = user_settings.get_search_filters()
                current_filters['categories_filter'] = categories_filter
                await self.db.update_user_settings(user_id, search_filters=current_filters)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await self.db.update_user_settings(user_id, search_filters={'categories_filter': categories_filter})
            
            logger.info(f"–§–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π '{categories_filter}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è {user_id}: {e}")

    async def _save_elo_filter(self, user_id: int, elo_filter: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ELO —Ñ–∏–ª—å—Ç—Ä –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user_settings = await self.db.get_user_settings(user_id)
            if user_settings:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä ELO
                current_filters = user_settings.get_search_filters()
                current_filters['elo_filter'] = elo_filter
                await self.db.update_user_settings(user_id, search_filters=current_filters)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await self.db.update_user_settings(user_id, search_filters={'elo_filter': elo_filter})
            
            logger.info(f"ELO —Ñ–∏–ª—å—Ç—Ä '{elo_filter}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ELO —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è {user_id}: {e}")

    async def _invalidate_media(self, user_id: int, reason: str):
        """–ü–æ–º–µ—á–∞–µ—Ç –º–µ–¥–∏–∞ –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ, –æ—á–∏—â–∞—è file_id"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –æ—á–∏—â–∞—è –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ
            success = await self.db.update_profile(
                user_id, 
                media_type=None, 
                media_file_id=None
            )
            
            if success:
                logger.info(f"–ú–µ–¥–∏–∞ –ø—Ä–æ—Ñ–∏–ª—è {user_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ: {reason}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —ç—Ç–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                try:
                    user = await self.db.get_user(user_id)
                    if user:
                        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –º–µ–¥–∏–∞ —Å—Ç–∞–ª–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º
                        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–¥–∏–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ")
                except Exception as notify_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–º –º–µ–¥–∏–∞: {notify_error}")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å {user_id} –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–¥–∏–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–µ–¥–∏–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
    
    async def _check_can_like(self, liker_id: int, target_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Ü–µ–ª–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Ü–µ–ª–∏
            target_settings = await self.db.get_user_settings(target_id)
            if not target_settings or not target_settings.privacy_settings:
                return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º
            
            who_can_like = target_settings.privacy_settings.get('who_can_like', 'all')
            
            if who_can_like == 'all':
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            liker_profile = await self.db.get_profile(liker_id)
            target_profile = await self.db.get_profile(target_id)
            
            if not liker_profile or not target_profile:
                return True  # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º
            
            if who_can_like == 'compatible_elo':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ELO (¬±300)
                elo_diff = abs(liker_profile.faceit_elo - target_profile.faceit_elo)
                return elo_diff <= 300
            
            elif who_can_like == 'common_maps':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –∫–∞—Ä—Ç—ã (–º–∏–Ω–∏–º—É–º 2)
                liker_maps = set(liker_profile.favorite_maps)
                target_maps = set(target_profile.favorite_maps)
                common_maps = len(liker_maps & target_maps)
                return common_maps >= 2
            
            elif who_can_like == 'active_users':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∑–∞—Ö–æ–¥–∏–ª –∑–∞ –Ω–µ–¥–µ–ª—é)
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                liker_user = await self.db.get_user(liker_id)
                if not liker_user:
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—è–ª—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
                from datetime import datetime, timedelta
                week_ago = datetime.now() - timedelta(days=7)
                return liker_profile.updated_at > week_ago
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ª–∞–π–∫–∞ {liker_id} -> {target_id}: {e}")
            return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º