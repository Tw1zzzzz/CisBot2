"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Ç–∏–º–º–µ–π—Ç–æ–≤
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes
from bot.utils.keyboards import Keyboards
from bot.utils.cs2_data import format_elo_display, format_role_display, format_maps_list, calculate_profile_compatibility, extract_faceit_nickname, PLAYTIME_OPTIONS
from bot.database.operations import DatabaseManager

logger = logging.getLogger(__name__)

class SearchHandler:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager

    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /search - –º–µ–Ω—é –ø–æ–∏—Å–∫–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_profile = await self.db.has_profile(user_id)
        
        if not has_profile:
            await update.message.reply_text(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>\n\n"
                "üìù –î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∏–º–º–µ–π—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.\n"
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –Ω–∞–π—Ç–∏ –≤–∞—Å!\n\n"
                "üë§ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:",
                reply_markup=Keyboards.profile_menu(False),
                parse_mode='HTML'
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
        text = (
            "üîç <b>–ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:"
        )
        
        await update.message.reply_text(
            text,
            reply_markup=Keyboards.search_menu(),
            parse_mode='HTML'
        )

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã –ø–æ–∏—Å–∫–∞"""
        query = update.callback_query
        data = query.data
        user_id = query.from_user.id

        if data == "search_start":
            await self.start_search(update, context)
        elif data == "search_random":
            await self.random_search(update, context)
        elif data == "search_menu":
            await self.show_search_menu(update, context)
        elif data == "search_elo_filter":
            await self.show_elo_filter_menu(update, context)
        elif data.startswith("elo_filter_"):
            await self.handle_elo_filter_selection(update, context)
        elif data == "apply_elo_filter":
            await self.apply_elo_filter(update, context)
        elif data == "search_categories_filter":
            await self.show_categories_filter_menu(update, context)
        elif data.startswith("categories_filter_"):
            await self.handle_categories_filter_selection(update, context)
        elif data == "apply_categories_filter":
            await self.apply_categories_filter(update, context)
        elif data == "like":
            await self.handle_like(update, context)
        elif data == "skip":
            await self.handle_skip(update, context)

    async def start_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        has_profile = await self.db.has_profile(user_id)
        if not has_profile:
            await query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!", show_alert=True)
            return
        
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates = await self.db.find_candidates(user_id, limit=20)
        
        if not candidates:
            await query.edit_message_text(
                "üòî <b>–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
                "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ\n"
                "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã\n"
                "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –±–æ—Ç–µ –¥—Ä—É–∑—å—è–º!",
                reply_markup=Keyboards.back_button("back_to_main"),
                parse_mode='HTML'
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑
        context.user_data['candidates'] = candidates
        context.user_data['current_candidate_index'] = 0
        
        await self.show_candidate(query, context)

    async def random_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ª—É—á–∞–π–Ω—ã–π –ø–æ–∏—Å–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates = await self.db.find_candidates(user_id, limit=50)
        
        if not candidates:
            await query.edit_message_text(
                "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞",
                reply_markup=Keyboards.back_button("back_to_main")
            )
            return
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ
        import random
        random.shuffle(candidates)
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö 20
        candidates = candidates[:20]
        
        context.user_data['candidates'] = candidates
        context.user_data['current_candidate_index'] = 0
        
        await self.show_candidate(query, context)

    async def show_candidate(self, query_or_update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        candidates = context.user_data.get('candidates', [])
        current_index = context.user_data.get('current_candidate_index', 0)
        
        if current_index >= len(candidates):
            # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
            text = (
                "‚úÖ <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –±–æ—Ç–µ –¥—Ä—É–∑—å—è–º!"
            )
            
            if hasattr(query_or_update, 'edit_message_text'):
                await query_or_update.edit_message_text(
                    text,
                    reply_markup=Keyboards.back_button("back_to_main"),
                    parse_mode='HTML'
                )
            else:
                await query_or_update.message.reply_text(
                    text,
                    reply_markup=Keyboards.back_button("back_to_main"),
                    parse_mode='HTML'
                )
            return
        
        candidate = candidates[current_index]
        user_id = query_or_update.from_user.id if hasattr(query_or_update, 'from_user') else query_or_update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        user_profile = await self.db.get_profile(user_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–Ω–∫–µ—Ç—É
        text = await self.format_candidate_profile(candidate, user_profile, user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        context.user_data['current_candidate'] = candidate
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if hasattr(query_or_update, 'message') and query_or_update.message:
            chat_id = query_or_update.message.chat_id
        elif hasattr(query_or_update, 'effective_chat'):
            chat_id = query_or_update.effective_chat.id
        else:
            chat_id = query_or_update.from_user.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        await self.send_candidate_with_media(
            chat_id=chat_id,
            candidate=candidate,
            text=text,
            reply_markup=Keyboards.like_buttons(),
            context=context,
            is_edit=hasattr(query_or_update, 'edit_message_text')
        )

    async def format_candidate_profile(self, candidate, user_profile=None, current_user_id=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∫–µ—Ç—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏
        show_name = False
        if current_user_id:
            show_name = await self.db.check_mutual_like(current_user_id, candidate.user_id)
        
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫
        text = f"üë§ <b>{candidate.game_nickname}</b>\n"
        
        if show_name:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Telegram –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ
            user = await self.db.get_user(candidate.user_id)
            if user and user.first_name:
                telegram_info = user.first_name
                if user.username:
                    telegram_info += f" (@{user.username})"
                text += f"üîó <b>Telegram:</b> {telegram_info}\n"
        
        text += "\n"
        text += f"üéØ <b>ELO Faceit:</b> {format_elo_display(candidate.faceit_elo)}\n"
        
        # Faceit –ø—Ä–æ—Ñ–∏–ª—å
        nickname = extract_faceit_nickname(candidate.faceit_url)
        text += f"üîó <b>Faceit:</b> <a href='{candidate.faceit_url}'>{nickname}</a>\n"
        
        text += f"üë• <b>–†–æ–ª—å:</b> {format_role_display(candidate.role)}\n"
        text += f"üó∫Ô∏è <b>–õ—é–±–∏–º—ã–µ –∫–∞—Ä—Ç—ã:</b> {format_maps_list(candidate.favorite_maps, max_count=4)}\n"
        
        # –í—Ä–µ–º—è –∏–≥—Ä—ã
        time_displays = []
        for slot_id in candidate.playtime_slots:
            time_option = next((t for t in PLAYTIME_OPTIONS if t['id'] == slot_id), None)
            if time_option:
                time_displays.append(f"{time_option['emoji']} {time_option['name']}")
        
        if time_displays:
            text += f"‚è∞ <b>–í—Ä–µ–º—è –∏–≥—Ä—ã:</b>\n"
            for time_display in time_displays:
                text += f"   {time_display}\n"
        else:
            text += f"‚è∞ <b>–í—Ä–µ–º—è –∏–≥—Ä—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        if hasattr(candidate, 'categories') and candidate.categories:
            from bot.utils.cs2_data import format_categories_display
            categories_text = format_categories_display(candidate.categories, max_count=2)
            text += f"üéÆ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {categories_text}\n"
        
        if candidate.description:
            text += f"\nüí¨ <b>–û —Å–µ–±–µ:</b>\n{candidate.description}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞
        if candidate.has_media():
            media_icon = "üì∑" if candidate.is_photo() else "üé•"
            text += f"\n{media_icon} <b>–ú–µ–¥–∏–∞:</b> –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"
        
        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        if user_profile:
            compatibility = calculate_profile_compatibility(user_profile, candidate)
            compat_emoji = "üî•" if compatibility['total'] >= 80 else "‚≠ê" if compatibility['total'] >= 60 else "üëå" if compatibility['total'] >= 40 else "ü§î"
            text += f"\n{compat_emoji} <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b> {compatibility['total']}%\n"
            
            details = compatibility['details']
            text += f"‚îú ELO: {details['elo']}%\n"
            text += f"‚îú –ö–∞—Ä—Ç—ã: {details['maps']}%\n"
            text += f"‚îú –í—Ä–µ–º—è: {details['time']}%\n"
            text += f"‚îî –†–æ–ª—å: {details['role']}%"
        
        return text

    async def send_candidate_with_media(self, chat_id: int, candidate, text: str, reply_markup=None, context=None, is_edit=False):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å"""
        try:
            if candidate.has_media() and not is_edit:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
                if candidate.is_photo():
                    await context.bot.send_photo(
                        chat_id=chat_id,
                        photo=candidate.media_file_id,
                        caption=text,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                elif candidate.is_video():
                    await context.bot.send_video(
                        chat_id=chat_id,
                        video=candidate.media_file_id,
                        caption=text,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –º–µ–¥–∏–∞: {e}")
            # –§–æ–ª–±—ç–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )

    async def handle_like(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∞–π–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        
        current_candidate = context.user_data.get('current_candidate')
        if not current_candidate:
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (who_can_like)
        can_like = await self._check_can_like(user_id, current_candidate.user_id)
        if not can_like:
            await query.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤", show_alert=True)
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É
            await self.next_candidate(query, context)
            return
        
        await query.answer("‚ù§Ô∏è –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ –ë–î
        await self.db.add_like(user_id, current_candidate.user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        is_mutual = await self.db.check_mutual_like(user_id, current_candidate.user_id)
        
        if is_mutual:
            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å —Ç–∏–º–º–µ–π—Ç–æ–º
            await self.db.create_match(user_id, current_candidate.user_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ç–∏–º–º–µ–π—Ç–µ
            await query.answer("üéâ –≠–¢–û –¢–ò–ú–ú–ï–ô–¢! –í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫!", show_alert=True)
            
            match_text = (
                "üéâ <b>–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –£ –í–ê–° –¢–ò–ú–ú–ï–ô–¢!</b>\n\n"
                f"–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.\n\n"
                "–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–≥—Ä–æ–∫–∞ –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Ç–∏–º–º–µ–π—Ç—ã'."
            )
            
            await query.edit_message_text(
                match_text,
                reply_markup=Keyboards.back_button("back_to_main"),
                parse_mode='HTML'
            )
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É
        await self.next_candidate(query, context)

    async def handle_skip(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫"""
        query = update.callback_query
        await query.answer("‚û°Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É
        await self.next_candidate(query, context)

    async def next_candidate(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É"""
        current_index = context.user_data.get('current_candidate_index', 0)
        context.user_data['current_candidate_index'] = current_index + 1
        
        await self.show_candidate(query, context)

    async def show_search_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–∏—Å–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        text = (
            "üîç <b>–ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.search_menu(),
            parse_mode='HTML'
        )

    async def show_elo_filter_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ ELO —Ñ–∏–ª—å—Ç—Ä–∞"""
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings = await self.db.get_user_settings(user_id)
        current_filter = 'any'
        if user_settings:
            filters = user_settings.get_search_filters()
            current_filter = filters.get('elo_filter', 'any')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['selected_elo_filter'] = current_filter
        
        text = (
            "üéØ <b>–§–∏–ª—å—Ç—Ä –ø–æ ELO</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω ELO –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
            "üî∞ <b>–î–æ 1999 ELO</b> - –ù–æ–≤–∏—á–∫–∏ –∏ —Ä–∞—Å—Ç—É—â–∏–µ –∏–≥—Ä–æ–∫–∏\n"
            "‚≠ê <b>2000-2699 ELO</b> - –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã\n"
            "üèÜ <b>2700-3099 ELO</b> - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å\n"
            "üíé <b>3100+ ELO</b> - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å\n"
            "üëë <b>TOP 1000</b> - –õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.elo_filter_menu(current_filter),
            parse_mode='HTML'
        )

    async def handle_elo_filter_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä ELO —Ñ–∏–ª—å—Ç—Ä–∞"""
        query = update.callback_query
        data = query.data
        await query.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        filter_id = data.replace("elo_filter_", "")
        context.user_data['selected_elo_filter'] = filter_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –Ω–æ–≤—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
        await self.show_elo_filter_menu(update, context)

    async def apply_elo_filter(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π ELO —Ñ–∏–ª—å—Ç—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        selected_filter = context.user_data.get('selected_elo_filter', 'any')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self._save_elo_filter(user_id, selected_filter)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from bot.utils.cs2_data import format_elo_filter_display
        filter_text = format_elo_filter_display(selected_filter)
        
        await query.edit_message_text(
            f"‚úÖ <b>–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä:</b> {filter_text}\n\n"
            f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...",
            parse_mode='HTML'
        )
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
        await self.start_search(update, context)

    async def show_categories_filter_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings = await self.db.get_user_settings(user_id)
        current_filter = []
        if user_settings:
            filters = user_settings.get_search_filters()
            current_filter = filters.get('categories_filter', [])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['selected_categories_filter'] = current_filter.copy()
        
        text = (
            "üéÆ <b>–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤.\n"
            "–ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.categories_filter_menu(current_filter),
            parse_mode='HTML'
        )

    async def handle_categories_filter_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        query = update.callback_query
        data = query.data
        await query.answer()
        
        selected_categories = context.user_data.get('selected_categories_filter', [])
        
        if data == "categories_filter_any":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
            selected_categories = []
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_id = data.replace("categories_filter_", "")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category_id in selected_categories:
                selected_categories.remove(category_id)
            else:
                selected_categories.append(category_id)
        
        context.user_data['selected_categories_filter'] = selected_categories
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –Ω–æ–≤—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
        await self.show_categories_filter_menu(update, context)

    async def apply_categories_filter(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        selected_filter = context.user_data.get('selected_categories_filter', [])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self._save_categories_filter(user_id, selected_filter)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if selected_filter:
            from bot.utils.cs2_data import format_categories_display
            filter_text = format_categories_display(selected_filter)
            text = f"‚úÖ <b>–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\nüéÆ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {filter_text}\n\n–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫..."
        else:
            text = "‚úÖ <b>–§–∏–ª—å—Ç—Ä —Å–±—Ä–æ—à–µ–Ω!</b>\n\nüéÆ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> –õ—é–±—ã–µ\n\n–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫..."
        
        await query.edit_message_text(
            text,
            parse_mode='HTML'
        )
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
        await self.start_search(update, context)

    async def _save_categories_filter(self, user_id: int, categories_filter: list):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user_settings = await self.db.get_user_settings(user_id)
            if user_settings:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                current_filters = user_settings.get_search_filters()
                current_filters['categories_filter'] = categories_filter
                await self.db.update_user_settings(user_id, search_filters=current_filters)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await self.db.update_user_settings(user_id, search_filters={'categories_filter': categories_filter})
            
            logger.info(f"–§–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π '{categories_filter}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è {user_id}: {e}")

    async def _save_elo_filter(self, user_id: int, elo_filter: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ELO —Ñ–∏–ª—å—Ç—Ä –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user_settings = await self.db.get_user_settings(user_id)
            if user_settings:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä ELO
                current_filters = user_settings.get_search_filters()
                current_filters['elo_filter'] = elo_filter
                await self.db.update_user_settings(user_id, search_filters=current_filters)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await self.db.update_user_settings(user_id, search_filters={'elo_filter': elo_filter})
            
            logger.info(f"ELO —Ñ–∏–ª—å—Ç—Ä '{elo_filter}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ELO —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è {user_id}: {e}")

    async def _check_can_like(self, liker_id: int, target_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Ü–µ–ª–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Ü–µ–ª–∏
            target_settings = await self.db.get_user_settings(target_id)
            if not target_settings or not target_settings.privacy_settings:
                return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º
            
            who_can_like = target_settings.privacy_settings.get('who_can_like', 'all')
            
            if who_can_like == 'all':
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            liker_profile = await self.db.get_profile(liker_id)
            target_profile = await self.db.get_profile(target_id)
            
            if not liker_profile or not target_profile:
                return True  # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º
            
            if who_can_like == 'compatible_elo':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ELO (¬±300)
                elo_diff = abs(liker_profile.faceit_elo - target_profile.faceit_elo)
                return elo_diff <= 300
            
            elif who_can_like == 'common_maps':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –∫–∞—Ä—Ç—ã (–º–∏–Ω–∏–º—É–º 2)
                liker_maps = set(liker_profile.favorite_maps)
                target_maps = set(target_profile.favorite_maps)
                common_maps = len(liker_maps & target_maps)
                return common_maps >= 2
            
            elif who_can_like == 'active_users':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∑–∞—Ö–æ–¥–∏–ª –∑–∞ –Ω–µ–¥–µ–ª—é)
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                liker_user = await self.db.get_user(liker_id)
                if not liker_user:
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—è–ª—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
                from datetime import datetime, timedelta
                week_ago = datetime.now() - timedelta(days=7)
                return liker_profile.updated_at > week_ago
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ª–∞–π–∫–∞ {liker_id} -> {target_id}: {e}")
            return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º