"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CIS FINDER Bot
–°–æ–∑–¥–∞–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π Twizz_Project
"""
import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from bot.utils.keyboards import Keyboards
from bot.utils.cs2_data import (
    get_role_by_name, CS2_MAPS, PLAYTIME_OPTIONS,
    validate_faceit_url, format_elo_display, format_faceit_display
)
from bot.utils.faceit_analyzer import faceit_analyzer
from bot.database.operations import DatabaseManager

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
ENTERING_NICKNAME, SELECTING_ELO, ENTERING_FACEIT_URL, SELECTING_ROLE, SELECTING_MAPS, SELECTING_PLAYTIME, SELECTING_CATEGORIES, ENTERING_DESCRIPTION, SELECTING_MEDIA = range(9)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞
EDITING_MEDIA_TYPE = 100

class ProfileHandler:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager

    def _log_back_navigation(self, user_id: int, current_state: str, target_state: str, 
                           user_data_context: dict = None, additional_info: str = "",
                           timestamp: str = None, navigation_validation: str = None,
                           conversation_state: str = None, step_number: int = None):
        """Centralized logging method for back button navigation with enhanced tracking"""
        import datetime
        
        # Generate timestamp if not provided
        if not timestamp:
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Sanitize user data for privacy
        safe_context = {}
        if user_data_context:
            for key, value in user_data_context.items():
                if key in ['creating_profile', 'editing_profile']:
                    # Sanitize profile data
                    if isinstance(value, dict):
                        safe_context[key] = {k: v for k, v in value.items() 
                                           if k not in ['faceit_url', 'game_nickname']}
                    else:
                        safe_context[key] = str(type(value))
                elif key in ['editing_field', 'editing_media', 'selecting_media_type']:
                    safe_context[key] = value
                else:
                    safe_context[key] = str(type(value)) if value else None
        
        log_message = (f"üîô BACK NAVIGATION: user_id={user_id}, timestamp={timestamp}, "
                      f"current_state='{current_state}', target_state='{target_state}', "
                      f"context={safe_context}")
        
        if conversation_state:
            log_message += f", conversation_state='{conversation_state}'"
            
        if step_number:
            log_message += f", step_number={step_number}"
            
        if navigation_validation:
            log_message += f", validation='{navigation_validation}'"
        
        if additional_info:
            log_message += f", info='{additional_info}'"
            
        # Use warning for potentially unexpected navigation patterns
        if "unexpected" in additional_info.lower() or "incorrect" in additional_info.lower():
            logger.warning(log_message)
        else:
            logger.info(log_message)
    
    def _validate_navigation_flow(self, current_state: str, target_state: str, user_id: int, 
                                context_data: dict = None) -> dict:
        """Validates navigation flow and provides recovery suggestions"""
        # Define the correct profile creation sequence
        correct_flow = {
            "ENTERING_NICKNAME": "START",
            "SELECTING_ELO": "ENTERING_NICKNAME", 
            "ENTERING_FACEIT_URL": "SELECTING_ELO",
            "SELECTING_ROLE": "ENTERING_FACEIT_URL",
            "SELECTING_MAPS": "SELECTING_ROLE",
            "SELECTING_PLAYTIME": "SELECTING_MAPS",
            "SELECTING_CATEGORIES": "SELECTING_PLAYTIME",
            "ENTERING_DESCRIPTION": "SELECTING_CATEGORIES",
            "SELECTING_MEDIA": "ENTERING_DESCRIPTION"
        }
        
        expected_previous = correct_flow.get(current_state)
        is_valid = (target_state == expected_previous or 
                   target_state in ["CANCEL_CREATION", "PROFILE_CREATION_START"])
        
        validation_result = {
            "is_valid": is_valid,
            "expected_target": expected_previous,
            "actual_target": target_state,
            "current_state": current_state,
            "user_id": user_id,
            "validation_message": "",
            "recovery_suggestion": ""
        }
        
        if is_valid:
            validation_result["validation_message"] = f"Valid navigation: {current_state} ‚Üí {target_state}"
        else:
            validation_result["validation_message"] = f"INVALID navigation: {current_state} ‚Üí {target_state}, expected ‚Üí {expected_previous}"
            validation_result["recovery_suggestion"] = f"Should navigate to {expected_previous} instead of {target_state}"
            
        # Log validation results
        if not is_valid:
            logger.warning(f"üö® NAVIGATION VALIDATION FAILED: {validation_result['validation_message']} for user {user_id}")
            logger.warning(f"üîß RECOVERY SUGGESTION: {validation_result['recovery_suggestion']}")
        else:
            logger.info(f"‚úÖ NAVIGATION VALIDATED: {validation_result['validation_message']} for user {user_id}")
            
        return validation_result
    
    def _log_state_transition(self, user_id: int, from_state: str, to_state: str,
                            trigger: str, user_data_context: dict = None,
                            validation_result: dict = None):
        """Logs state transitions with comprehensive context and validation"""
        import datetime
        
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Sanitize user context for privacy
        safe_context = {}
        if user_data_context:
            for key, value in user_data_context.items():
                if key in ['creating_profile', 'editing_profile']:
                    if isinstance(value, dict):
                        # Only include non-sensitive profile data
                        safe_context[key] = {
                            k: v for k, v in value.items() 
                            if k in ['role', 'categories', 'description_length'] and v is not None
                        }
                        # Add counts for arrays without exposing data
                        if 'maps' in value:
                            safe_context[key]['maps_count'] = len(value['maps']) if value['maps'] else 0
                        if 'playtime_slots' in value:
                            safe_context[key]['playtime_count'] = len(value['playtime_slots']) if value['playtime_slots'] else 0
                elif key in ['editing_field', 'editing_media', 'selecting_media_type']:
                    safe_context[key] = value
        
        log_message = (
            f"üîÑ STATE TRANSITION: user_id={user_id}, timestamp={timestamp}, "
            f"from='{from_state}', to='{to_state}', trigger='{trigger}', context={safe_context}"
        )
        
        if validation_result:
            log_message += f", validation={validation_result['validation_message']}"
            
        if validation_result and not validation_result['is_valid']:
            logger.error(log_message)
        else:
            logger.info(log_message)

    def _get_step_number_from_state(self, state: str) -> int:
        """Maps conversation states to step numbers for better tracking"""
        state_steps = {
            "ENTERING_NICKNAME": 1,
            "SELECTING_ELO": 2,
            "ENTERING_FACEIT_URL": 3,
            "SELECTING_ROLE": 4,
            "SELECTING_MAPS": 5,
            "SELECTING_PLAYTIME": 6,
            "SELECTING_CATEGORIES": 7,
            "ENTERING_DESCRIPTION": 8,
            "SELECTING_MEDIA": 9
        }
        return state_steps.get(state, 0)
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /profile - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ–¥–∏–∞"""
        user_id = update.effective_user.id
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await self.db.create_user(
            user_id=user_id,
            username=update.effective_user.username,
            first_name=update.effective_user.first_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
        has_profile = await self.db.has_profile(user_id)
        is_rejected = False
        
        # DEBUG: –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"ProfileHandler.profile_command: user_id={user_id}, has_profile={has_profile}")
        
        if has_profile:
            profile = await self.db.get_profile(user_id)
            if profile:
                is_rejected = profile.is_rejected()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –º–µ–¥–∏–∞ —Å—Ä–∞–∑—É
                text = "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                text += await self._format_profile_text(profile, show_faceit_stats=True)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è
                if is_rejected:
                    reply_markup = Keyboards.profile_rejected_menu()
                else:
                    reply_markup = Keyboards.profile_main_menu()
                
                if update.callback_query:
                    query = update.callback_query
                    await query.answer()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –º–µ–¥–∏–∞
                    await self.send_profile_with_media(
                        chat_id=query.message.chat.id,
                        profile=profile,
                        text=text,
                        reply_markup=reply_markup,
                        context=context
                    )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –º–µ–¥–∏–∞
                    await self.send_profile_with_media(
                        chat_id=update.effective_chat.id,
                        profile=profile,
                        text=text,
                        reply_markup=reply_markup,
                        context=context
                    )
            else:
                # –ï—Å–ª–∏ has_profile = True, –Ω–æ get_profile = None, —Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
                logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: has_profile=True, –Ω–æ get_profile=None –¥–ª—è user_id={user_id}")
                text = (
                    "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                    "‚ùå <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω</b>\n\n"
                    "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏.\n"
                    "üÜï –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å.\n\n"
                    "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @twizz_project"
                )
                
                if update.callback_query:
                    query = update.callback_query
                    await query.answer()
                    await self.safe_edit_or_send_message(
                        query,
                        text,
                        reply_markup=Keyboards.profile_no_profile_menu(),
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text(
                        text,
                        reply_markup=Keyboards.profile_no_profile_menu(),
                        parse_mode='HTML'
                    )
        else:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è
            text = (
                "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥–ª–∏ –≤–∞—Å –Ω–∞–π—Ç–∏!"
            )
            
            if update.callback_query:
                query = update.callback_query
                await query.answer()
                await self.safe_edit_or_send_message(
                    query,
                    text,
                    reply_markup=Keyboards.profile_no_profile_menu(),
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=Keyboards.profile_no_profile_menu(),
                    parse_mode='HTML'
            )

    async def _format_profile_text(self, profile, show_faceit_stats=False) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        from bot.utils.cs2_data import format_elo_display, format_role_display, extract_faceit_nickname, PLAYTIME_OPTIONS, format_faceit_elo_display
        from bot.utils.faceit_analyzer import faceit_analyzer
        
        # –°—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        moderation_status = getattr(profile, 'moderation_status', 'pending')
        if moderation_status == 'pending':
            text = "‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
        elif moderation_status == 'approved':
            text = "‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –û–¥–æ–±—Ä–µ–Ω\n"
        elif moderation_status == 'rejected':
            text = "‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫–ª–æ–Ω–µ–Ω\n"
            if hasattr(profile, 'moderation_reason') and profile.moderation_reason:
                text += f"<i>–ü—Ä–∏—á–∏–Ω–∞: {profile.moderation_reason}</i>\n"
            text += "\nüÜï <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å —É—á–µ—Ç–æ–º –∑–∞–º–µ—á–∞–Ω–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.\n"
        text += "\n"
        
        text += f"üéÆ <b>–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫:</b> {profile.game_nickname}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ Faceit API
        elo_stats = None
        try:
            if profile.game_nickname and profile.game_nickname.strip():
                elo_stats = await faceit_analyzer.get_elo_stats_by_nickname(profile.game_nickname)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {profile.game_nickname}: {e}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ELO —Å –º–∏–Ω/–º–∞–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
        if elo_stats:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ format_faceit_elo_display()
            lowest_elo = elo_stats.get('lowest_elo', 0)
            highest_elo = elo_stats.get('highest_elo', 0)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ELO –∑–Ω–∞—á–µ–Ω–∏–π
            try:
                if isinstance(lowest_elo, (int, float)) and isinstance(highest_elo, (int, float)):
                    lowest_elo = int(lowest_elo) if lowest_elo >= 0 else 0
                    highest_elo = int(highest_elo) if highest_elo >= 0 else 0
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω/–º–∞–∫—Å –¥–∞–∂–µ –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –Ω–æ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if lowest_elo > 0 or highest_elo > 0:
                        logger.info(f"üî• PROFILE: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ELO —Å –º–∏–Ω/–º–∞–∫—Å –¥–ª—è {profile.game_nickname}: –º–∏–Ω={lowest_elo} –º–∞–∫—Å={highest_elo}")
                        text += f"üéØ <b>ELO Faceit:</b> {format_faceit_elo_display(profile.faceit_elo, lowest_elo, highest_elo, profile.game_nickname)}\n"
                    else:
                        # –ï—Å–ª–∏ –º–∏–Ω/–º–∞–∫—Å —Ä–∞–≤–Ω—ã 0, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π ELO
                        text += f"üéØ <b>ELO Faceit:</b> {format_elo_display(profile.faceit_elo)}\n"
                else:
                    logger.warning(f"‚ö†Ô∏è PROFILE: ELO –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è {profile.game_nickname}: lowest={type(lowest_elo)}, highest={type(highest_elo)}")
                    # Fallback –Ω–∞ –±–∞–∑–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    text += f"üéØ <b>ELO Faceit:</b> {format_elo_display(profile.faceit_elo)}\n"
            except Exception as elo_validation_error:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ELO –¥–ª—è {profile.game_nickname}: {elo_validation_error}")
                # Fallback –Ω–∞ –±–∞–∑–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                text += f"üéØ <b>ELO Faceit:</b> {format_elo_display(profile.faceit_elo)}\n"
        else:
            # Fallback –Ω–∞ –±–∞–∑–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ELO
            text += f"üéØ <b>ELO Faceit:</b> {format_elo_display(profile.faceit_elo)}\n"
        
        # Faceit –ø—Ä–æ—Ñ–∏–ª—å
        nickname = extract_faceit_nickname(profile.faceit_url)
        text += f"üîó <b>Faceit:</b> <a href='{profile.faceit_url}'>{nickname}</a>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Faceit Analyser –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if show_faceit_stats:
            try:
                faceit_url = getattr(profile, 'faceit_url', '')
                if faceit_url:
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ Faceit Analyser –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è {profile.user_id}")
                    faceit_data = await faceit_analyzer.get_enhanced_profile_info(faceit_url)
                    
                    # –î–∏–∞–≥—Ä–∞–º–º—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
                        
            except Exception as faceit_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Faceit Analyser –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile.user_id}: {faceit_error}")
                # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API
        
        text += f"üë§ <b>–†–æ–ª—å:</b> {format_role_display(profile.role)}\n"
        text += f"üó∫Ô∏è <b>–õ—é–±–∏–º—ã–µ –∫–∞—Ä—Ç—ã:</b> {', '.join(profile.favorite_maps[:3])}{'...' if len(profile.favorite_maps) > 3 else ''}\n"
        
        # –í—Ä–µ–º—è –∏–≥—Ä—ã
        time_names = []
        for slot_id in profile.playtime_slots:
            time_option = next((t for t in PLAYTIME_OPTIONS if t['id'] == slot_id), None)
            if time_option:
                time_names.append(time_option['emoji'])
        text += f"‚è∞ <b>–í—Ä–µ–º—è –∏–≥—Ä—ã:</b> {' '.join(time_names)}\n"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        if hasattr(profile, 'categories') and profile.categories:
            from bot.utils.cs2_data import format_categories_display
            categories_text = format_categories_display(profile.categories, max_count=2)
            text += f"üéÆ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {categories_text}\n"
        
        if profile.description:
            text += f"\nüí¨ <b>–û —Å–µ–±–µ:</b> {profile.description[:100]}{'...' if len(profile.description) > 100 else ''}"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞
        if profile.has_media():
            media_icon = "üì∑" if profile.is_photo() else "üé•"
            text += f"\n{media_icon} <b>–ú–µ–¥–∏–∞:</b> –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ"
        
        return text

    async def send_profile_with_media(self, chat_id: int, profile, text: str, reply_markup=None, context=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Å –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å"""
        try:
            if profile.has_media():
                if profile.is_photo():
                    await context.bot.send_photo(
                        chat_id=chat_id,
                        photo=profile.media_file_id,
                        caption=text,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                elif profile.is_video():
                    await context.bot.send_video(
                        chat_id=chat_id,
                        video=profile.media_file_id,
                        caption=text,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å –º–µ–¥–∏–∞: {e}")
            # –§–æ–ª–±—ç–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )

    # === –°–û–ó–î–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø ===
    
    async def start_profile_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        query = update.callback_query
        await query.answer()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        context.user_data['creating_profile'] = {
            'game_nickname': None,
            'faceit_elo': None,
            'faceit_url': None,
            'role': None,
            'maps': [],
            'playtime_slots': [],
            'categories': [],
            'description': None,
            'media_type': None,
            'media_file_id': None
        }
        
        await query.edit_message_text(
            "üéÆ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è CIS FINDER</b>\n\n"
            "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∏–º–º–µ–π—Ç–æ–≤!\n"
            "–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n\n"
            "<b>–®–∞–≥ 1/7:</b> –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫\n\n"
            "üéÆ –≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –≤ –ø–æ–∏—Å–∫–µ.\n"
            "üìä <b>–í–∞–∂–Ω–æ:</b> –í–∞—à –Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ELO —Å Faceit.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ (Steam, Discord, Faceit).",
            parse_mode='HTML'
        )
        
        return ENTERING_NICKNAME

    async def handle_nickname_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–≥—Ä–æ–≤–æ–≥–æ –Ω–∏–∫–∞"""
        nickname = update.message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∏–∫–∞
        if len(nickname) < 2:
            await update.message.reply_text(
                "‚ùå –ù–∏–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode='HTML'
            )
            return ENTERING_NICKNAME
        
        if len(nickname) > 32:
            await update.message.reply_text(
                "‚ùå –ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode='HTML'
            )
            return ENTERING_NICKNAME
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫
        context.user_data['creating_profile']['game_nickname'] = nickname
        
        # Log state transition with validation
        validation_result = self._validate_navigation_flow(
            current_state="ENTERING_NICKNAME",
            target_state="SELECTING_ELO", 
            user_id=update.effective_user.id,
            context_data=context.user_data
        )
        self._log_state_transition(
            user_id=update.effective_user.id,
            from_state="ENTERING_NICKNAME",
            to_state="SELECTING_ELO",
            trigger="nickname_input_valid",
            user_data_context=context.user_data,
            validation_result=validation_result
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É ELO
        text = (
            "‚úÖ <b>–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
            f"üéÆ <b>–í–∞—à –Ω–∏–∫:</b> {nickname}\n\n"
            "<b>–®–∞–≥ 2/7:</b> –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ç–æ—á–Ω–æ–µ ELO –Ω–∞ Faceit:"
        )
        
        keyboard = Keyboards.elo_input_menu()
        await update.message.reply_text(text, reply_markup=keyboard, parse_mode='HTML')
        
        return SELECTING_ELO

    async def handle_elo_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä ELO"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "back":
            # Enhanced back button logging with step validation
            self._log_back_navigation(
                user_id=update.effective_user.id,
                current_state="SELECTING_ELO",
                target_state="CANCEL_CREATION",
                user_data_context=context.user_data,
                additional_info="Step 2 (SELECTING_ELO) ‚Üí CANCEL: Back from ELO selection cancels profile creation",
                navigation_validation="EXPECTED - ELO is step 2, back cancels creation",
                conversation_state="PROFILE_CREATION",
                step_number=2
            )
            return await self.cancel_creation(update, context)
        elif query.data == "elo_back":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ ELO –∏–∑ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ —Ç–æ—á–Ω–æ–≥–æ ELO
            await query.edit_message_text(
                "<b>–®–∞–≥ 2/7:</b> –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ç–æ—á–Ω–æ–µ ELO –Ω–∞ Faceit:",
                reply_markup=Keyboards.elo_input_menu(),
                parse_mode='HTML'
            )
            return SELECTING_ELO
        elif query.data == "elo_custom":
            await query.edit_message_text(
                "üìù <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ç–æ—á–Ω–æ–µ ELO –Ω–∞ Faceit</b>\n\n"
                "–ü—Ä–∏–º–µ—Ä: 1250\n"
                "–î–∏–∞–ø–∞–∑–æ–Ω: 1-6000",
                reply_markup=Keyboards.back_button("elo_back"),
                parse_mode='HTML'
            )
            return SELECTING_ELO

    async def handle_exact_elo_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–æ—á–Ω–æ–≥–æ ELO –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        text = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ—á–Ω–æ–µ ELO
        if text.isdigit():
            elo = int(text)
            if 1 <= elo <= 6000:
                context.user_data['creating_profile']['faceit_elo'] = elo
                
                # Log state transition with validation
                validation_result = self._validate_navigation_flow(
                    current_state="SELECTING_ELO",
                    target_state="ENTERING_FACEIT_URL", 
                    user_id=update.effective_user.id,
                    context_data=context.user_data
                )
                self._log_state_transition(
                    user_id=update.effective_user.id,
                    from_state="SELECTING_ELO",
                    to_state="ENTERING_FACEIT_URL",
                    trigger="elo_input_valid",
                    user_data_context=context.user_data,
                    validation_result=validation_result
                )
                
                await update.message.reply_text(
                    f"‚úÖ ELO —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {format_elo_display(elo)}\n\n"
                    "<b>–®–∞–≥ 3/7:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å Faceit\n\n"
                    "–ü—Ä–∏–º–µ—Ä: https://www.faceit.com/ru/players/nickname",
                    reply_markup=Keyboards.back_button("elo_back"),
                    parse_mode='HTML'
                )
                return ENTERING_FACEIT_URL
            else:
                await update.message.reply_text(
                    "‚ùå ELO –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 6000. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return SELECTING_ELO
        else:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6000. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return SELECTING_ELO

    async def handle_faceit_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ Faceit"""
        if update.message:
            text = update.message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Å—ã–ª–∫—É Faceit
            if validate_faceit_url(text):
                context.user_data['creating_profile']['faceit_url'] = text
                
                # Log state transition with validation
                validation_result = self._validate_navigation_flow(
                    current_state="ENTERING_FACEIT_URL",
                    target_state="SELECTING_ROLE", 
                    user_id=update.effective_user.id,
                    context_data=context.user_data
                )
                self._log_state_transition(
                    user_id=update.effective_user.id,
                    from_state="ENTERING_FACEIT_URL",
                    to_state="SELECTING_ROLE",
                    trigger="faceit_url_valid",
                    user_data_context=context.user_data,
                    validation_result=validation_result
                )
                
                await update.message.reply_text(
                    f"‚úÖ Faceit –ø—Ä–æ—Ñ–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    "<b>–®–∞–≥ 4/7:</b> –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é —Ä–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ:",
                    reply_markup=Keyboards.role_selection(),
                    parse_mode='HTML'
                )
                return SELECTING_ROLE
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Faceit –ø—Ä–æ—Ñ–∏–ª—å!\n"
                    "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "https://www.faceit.com/ru/players/nickname\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return ENTERING_FACEIT_URL
        
        return ENTERING_FACEIT_URL

    async def handle_role_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "back":
            # Enhanced back button logging with step validation
            self._log_back_navigation(
                user_id=update.effective_user.id,
                current_state="SELECTING_ROLE",
                target_state="ENTERING_FACEIT_URL",
                user_data_context=context.user_data,
                additional_info="Step 4 (SELECTING_ROLE) ‚Üí Step 3 (ENTERING_FACEIT_URL): Correct navigation flow",
                navigation_validation="EXPECTED - Role selection goes back to Faceit URL",
                conversation_state="PROFILE_CREATION",
                step_number=4
            )
            # Navigate back to faceit URL input step
            text = (
                "‚úÖ –†–æ–ª—å –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –ø–æ–∑–∂–µ.\n\n"
                "<b>–®–∞–≥ 3/7:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å Faceit\n\n"
                "–ü—Ä–∏–º–µ—Ä: https://www.faceit.com/ru/players/nickname"
            )
            await query.edit_message_text(text, reply_markup=Keyboards.back_button("elo_back"), parse_mode='HTML')
            return ENTERING_FACEIT_URL
            
        role_name = query.data.replace("role_", "")
        role_data = get_role_by_name(role_name)
        
        if not role_data:
            await query.edit_message_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=Keyboards.role_selection()
            )
            return SELECTING_ROLE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å
        context.user_data['creating_profile']['role'] = role_name
        
        # Log state transition with validation
        validation_result = self._validate_navigation_flow(
            current_state="SELECTING_ROLE",
            target_state="SELECTING_MAPS", 
            user_id=update.effective_user.id,
            context_data=context.user_data
        )
        self._log_state_transition(
            user_id=update.effective_user.id,
            from_state="SELECTING_ROLE",
            to_state="SELECTING_MAPS",
            trigger="role_selected",
            user_data_context=context.user_data,
            validation_result=validation_result
        )
        
        from bot.utils.cs2_data import format_role_display
        await query.edit_message_text(
            f"‚úÖ –†–æ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {format_role_display(role_name)}\n\n"
            "<b>–®–∞–≥ 5/7:</b> –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –∫–∞—Ä—Ç—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=Keyboards.maps_selection([]),
            parse_mode='HTML'
        )
        
        return SELECTING_MAPS

    async def handle_maps_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ä—Ç"""
        query = update.callback_query
        await query.answer()
        
        current_maps = context.user_data['creating_profile']['maps']
        
        if query.data == "back":
            # Enhanced back button logging - NAVIGATION BUG FIXED!
            self._log_back_navigation(
                user_id=update.effective_user.id,
                current_state="SELECTING_MAPS",
                target_state="SELECTING_ROLE",
                user_data_context=context.user_data,
                additional_info="Correct navigation: Step 5 (SELECTING_MAPS) ‚Üí Step 4 (SELECTING_ROLE)",
                navigation_validation="CORRECTED - Previously went to ENTERING_FACEIT_URL incorrectly",
                step_number=5
            )
            # Return to role selection instead of faceit URL input
            text = (
                f"‚úÖ –ö–∞—Ä—Ç—ã –≤—ã–±—Ä–∞–Ω—ã: {', '.join(current_maps) if current_maps else '–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n\n"
                "<b>–®–∞–≥ 4/7:</b> –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é —Ä–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ:"
            )
            await query.edit_message_text(text, reply_markup=Keyboards.role_selection(), parse_mode='HTML')
            return SELECTING_ROLE
        elif query.data == "maps_done":
            if len(current_maps) == 0:
                await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç—É!", show_alert=True)
                return SELECTING_MAPS
                
            await query.edit_message_text(
                f"‚úÖ –ö–∞—Ä—Ç—ã –≤—ã–±—Ä–∞–Ω—ã: {', '.join(current_maps)}\n\n"
                "<b>–®–∞–≥ 6/7:</b> –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                reply_markup=Keyboards.playtime_selection([]),
                parse_mode='HTML'
            )
            return SELECTING_PLAYTIME
        elif query.data.startswith("map_"):
            map_name = query.data.replace("map_", "")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã
            if map_name in current_maps:
                current_maps.remove(map_name)
            else:
                current_maps.append(map_name)
            
            context.user_data['creating_profile']['maps'] = current_maps
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await query.edit_message_reply_markup(
                reply_markup=Keyboards.maps_selection(current_maps)
            )
            
        return SELECTING_MAPS

    async def handle_playtime_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã"""
        query = update.callback_query
        await query.answer()
        
        current_slots = context.user_data['creating_profile']['playtime_slots']
        
        if query.data == "back":
            # Enhanced back button logging with step validation
            self._log_back_navigation(
                user_id=update.effective_user.id,
                current_state="SELECTING_PLAYTIME",
                target_state="SELECTING_MAPS",
                user_data_context=context.user_data,
                additional_info="Step 6 (SELECTING_PLAYTIME) ‚Üí Step 5 (SELECTING_MAPS): Correct navigation flow",
                navigation_validation="EXPECTED - Playtime selection goes back to maps selection",
                conversation_state="PROFILE_CREATION",
                step_number=6
            )
            # Navigate back to maps selection
            current_maps = context.user_data['creating_profile']['maps']
            text = (
                f"‚úÖ –í—Ä–µ–º—è –∏–≥—Ä—ã –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ –ø–æ–∑–∂–µ.\n\n"
                "<b>–®–∞–≥ 5/7:</b> –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –∫–∞—Ä—Ç—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):"
            )
            await query.edit_message_text(text, reply_markup=Keyboards.maps_selection(current_maps), parse_mode='HTML')
            return SELECTING_MAPS
        elif query.data == "time_done":
            if len(current_slots) == 0:
                await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫!", show_alert=True)
                return SELECTING_PLAYTIME
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
            selected_names = []
            for slot_id in current_slots:
                time_option = next((t for t in PLAYTIME_OPTIONS if t['id'] == slot_id), None)
                if time_option:
                    selected_names.append(time_option['name'])
            
            await query.edit_message_text(
                f"‚úÖ –í—Ä–µ–º—è –∏–≥—Ä—ã: {', '.join(selected_names)}\n\n"
                "<b>–®–∞–≥ 7/9:</b> –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç.\n"
                "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:",
                reply_markup=Keyboards.categories_selection([]),
                parse_mode='HTML'
            )
            return SELECTING_CATEGORIES
        elif query.data.startswith("time_"):
            slot_id = query.data.replace("time_", "")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
            if slot_id in current_slots:
                current_slots.remove(slot_id)
            else:
                current_slots.append(slot_id)
            
            context.user_data['creating_profile']['playtime_slots'] = current_slots
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await query.edit_message_reply_markup(
                reply_markup=Keyboards.playtime_selection(current_slots)
            )
            
        return SELECTING_PLAYTIME

    async def handle_categories_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        query = update.callback_query
        await query.answer()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ConversationHandler
        logger.info(f"ConversationHandler: handle_categories_selection –ø–æ–ª—É—á–∏–ª callback: {query.data}")
        logger.warning(f"üö® –í–ù–ò–ú–ê–ù–ò–ï: ConversationHandler –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª callback: {query.data}")
        
        current_categories = context.user_data['creating_profile']['categories']
        
        if query.data == "back":
            # Enhanced back button logging with step validation
            self._log_back_navigation(
                user_id=update.effective_user.id,
                current_state="SELECTING_CATEGORIES",
                target_state="SELECTING_PLAYTIME",
                user_data_context=context.user_data,
                additional_info="Step 7 (SELECTING_CATEGORIES) ‚Üí Step 6 (SELECTING_PLAYTIME): Correct navigation flow",
                navigation_validation="EXPECTED - Categories selection goes back to playtime selection",
                conversation_state="PROFILE_CREATION",
                step_number=7
            )
            # Navigate back to playtime selection
            current_slots = context.user_data['creating_profile']['playtime_slots']
            # Format selected times for display
            selected_names = []
            for slot_id in current_slots:
                time_option = next((t for t in PLAYTIME_OPTIONS if t['id'] == slot_id), None)
                if time_option:
                    selected_names.append(time_option['name'])
            time_display = ', '.join(selected_names) if selected_names else "–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
            text = (
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã –ø–æ–∑–∂–µ.\n\n"
                "<b>–®–∞–≥ 6/7:</b> –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):"
            )
            await query.edit_message_text(text, reply_markup=Keyboards.playtime_selection(current_slots), parse_mode='HTML')
            return SELECTING_PLAYTIME
        elif query.data == "categories_done":
            if len(current_categories) == 0:
                await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!", show_alert=True)
                return SELECTING_CATEGORIES
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            from bot.utils.cs2_data import format_categories_display
            categories_text = format_categories_display(current_categories)
            
            await query.edit_message_text(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_text}\n\n"
                "<b>–®–∞–≥ 8/9:</b> –ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (—Å—Ç–∏–ª—å –∏–≥—Ä—ã, —Ü–µ–ª–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä).\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∂–µ:",
                reply_markup=Keyboards.skip_description(),
                parse_mode='HTML'
            )
            return ENTERING_DESCRIPTION
        elif query.data.startswith("category_"):
            category_id = query.data.replace("category_", "")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category_id in current_categories:
                current_categories.remove(category_id)
            else:
                current_categories.append(category_id)
            
            context.user_data['creating_profile']['categories'] = current_categories
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await query.edit_message_reply_markup(
                reply_markup=Keyboards.categories_selection(current_categories)
            )
            
        return SELECTING_CATEGORIES

    async def handle_description_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è"""
        if update.callback_query:
            # –ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è
            query = update.callback_query
            await query.answer()
            
            if query.data == "skip_description":
                context.user_data['creating_profile']['description'] = None
                return await self.start_media_selection(update, context)
            elif query.data == "back":
                # Enhanced back button logging - NAVIGATION BUG FIXED!
                self._log_back_navigation(
                    user_id=update.effective_user.id,
                    current_state="ENTERING_DESCRIPTION",
                    target_state="SELECTING_CATEGORIES",
                    user_data_context=context.user_data,
                    additional_info="Correct navigation: Step 8 (ENTERING_DESCRIPTION) ‚Üí Step 7 (SELECTING_CATEGORIES)",
                    navigation_validation="CORRECTED - Previously went to SELECTING_MAPS incorrectly",
                    step_number=8
                )
                # Return to categories selection instead of maps selection
                current_categories = context.user_data['creating_profile']['categories']
                from bot.utils.cs2_data import format_categories_display
                categories_text = format_categories_display(current_categories) if current_categories else "–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
                text = (
                    f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_text}\n\n"
                    "<b>–®–∞–≥ 7/9:</b> –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç.\n"
                    "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:"
                )
                await query.edit_message_text(text, reply_markup=Keyboards.categories_selection(current_categories), parse_mode='HTML')
                return SELECTING_CATEGORIES
        
        elif update.message:
            # –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
            description = update.message.text.strip()
            
            if len(description) > 500:
                await update.message.reply_text(
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                    f"–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å:"
                )
                return ENTERING_DESCRIPTION
            
            context.user_data['creating_profile']['description'] = description
            return await self.start_media_selection(update, context)
        
        return ENTERING_DESCRIPTION

    async def start_media_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ–¥–∏–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        text = (
            "üì∑ <b>–®–∞–≥ 9/9: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é.\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –≤–∞—Å!\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ –§–æ—Ç–æ —Å –∏–≥—Ä–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º\n"
            "‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n"
            "‚Ä¢ –í–∏–¥–µ–æ —Å –ª—É—á—à–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        )
        
        keyboard = Keyboards.media_selection()
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                text, reply_markup=keyboard, parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                text, reply_markup=keyboard, parse_mode='HTML'
            )
        
        return SELECTING_MEDIA

    async def handle_media_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ–¥–∏–∞"""
        user_id = update.effective_user.id
        logger.info(f"üî• handle_media_selection START: user_id={user_id}")
        logger.info(f"üî• update.callback_query: {update.callback_query is not None}")
        logger.info(f"üî• update.message: {update.message is not None}")
        logger.info(f"üî• context.user_data keys: {list(context.user_data.keys())}")
        logger.info(f"üî• selecting_media_type: {context.user_data.get('selecting_media_type', '–ù–ï–¢')}")
        
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            
            if query.data == "media_photo":
                await query.edit_message_text(
                    "üì∑ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b>\n\n"
                    "–ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—é.\n"
                    "–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.",
                    reply_markup=Keyboards.back_button("media_back"),
                    parse_mode='HTML'
                )
                context.user_data['selecting_media_type'] = 'photo'
                logger.info(f"üî• –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω selecting_media_type='photo' –¥–ª—è user_id={user_id}")
                logger.info(f"üî• context.user_data –ü–û–°–õ–ï —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {context.user_data}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                if context.user_data.get('editing_media'):
                    return EDITING_MEDIA_TYPE
                else:
                    return SELECTING_MEDIA
                
            elif query.data == "media_video":
                await query.edit_message_text(
                    "üé• <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ</b>\n\n"
                    "–ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—é.\n"
                    "–í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.",
                    reply_markup=Keyboards.back_button("media_back"),
                    parse_mode='HTML'
                )
                context.user_data['selecting_media_type'] = 'video'
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                if context.user_data.get('editing_media'):
                    return EDITING_MEDIA_TYPE
                else:
                    return SELECTING_MEDIA
                
            elif query.data == "media_skip":
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                return await self.save_profile(update, context)
                
            elif query.data == "media_back":
                # Enhanced back button logging for media selection - LOOP BUG FIXED!
                editing_mode = context.user_data.get('editing_media', False)
                target_state = "EDIT_MEDIA_MENU" if editing_mode else "ENTERING_DESCRIPTION"
                self._log_back_navigation(
                    user_id=update.effective_user.id,
                    current_state="MEDIA_TYPE_SELECTION",
                    target_state=target_state,
                    user_data_context=context.user_data,
                    additional_info=f"Media back navigation fixed: editing_mode={editing_mode}, now goes to correct previous step",
                    navigation_validation="CORRECTED - Previously created a loop back to media selection",
                    step_number=9
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã –º–µ–¥–∏–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                if context.user_data.get('editing_media'):
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞
                    await self.edit_media(update, context, context.user_data.get('editing_profile'))
                else:
                    # FIXED: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É (–æ–ø–∏—Å–∞–Ω–∏–µ) –≤–º–µ—Å—Ç–æ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
                    description = context.user_data['creating_profile'].get('description')
                    if description:
                        text = (
                            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
                            "<b>–®–∞–≥ 8/9:</b> –ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (—Å—Ç–∏–ª—å –∏–≥—Ä—ã, —Ü–µ–ª–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä).\n"
                            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∂–µ:"
                        )
                    else:
                        text = (
                            "<b>–®–∞–≥ 8/9:</b> –ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (—Å—Ç–∏–ª—å –∏–≥—Ä—ã, —Ü–µ–ª–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä).\n"
                            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∂–µ:"
                        )
                    await query.edit_message_text(text, reply_markup=Keyboards.skip_description(), parse_mode='HTML')
                    return ENTERING_DESCRIPTION
                
        elif update.message:
            # –ü–æ–ª—É—á–∏–ª–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª
            logger.info(f"üî• –ü–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id}")
            logger.info(f"üî• update.message.photo: {update.message.photo is not None}")
            logger.info(f"üî• context.user_data.get('selecting_media_type'): {context.user_data.get('selecting_media_type')}")
            logger.info(f"üî• creating_profile –≤ context: {'creating_profile' in context.user_data}")
            
            if update.message.photo and context.user_data.get('selecting_media_type') == 'photo':
                # –ü–æ–ª—É—á–∏–ª–∏ —Ñ–æ—Ç–æ
                logger.info(f"üî• –£–°–õ–û–í–ò–ï –í–´–ü–û–õ–ù–ï–ù–û: —Ñ–æ—Ç–æ + selecting_media_type=photo –¥–ª—è user_id={user_id}")
                photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                logger.info(f"üî• photo.file_id: {photo.file_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã –ø—Ä–æ—Ñ–∏–ª—å
                if context.user_data.get('editing_media'):
                    logger.info(f"üî• –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–î–ò–ê –¥–ª—è user_id={user_id}")
                    return await self.save_media_edit(update, context, 'photo', photo.file_id)
                else:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                    logger.info(f"üî• –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–†–û–§–ò–õ–Ø –¥–ª—è user_id={user_id}")
                    logger.info(f"üî• creating_profile –î–û: {context.user_data.get('creating_profile', {})}")
                    
                    context.user_data['creating_profile']['media_type'] = 'photo'
                    context.user_data['creating_profile']['media_file_id'] = photo.file_id
                    
                    logger.info(f"üî• creating_profile –ü–û–°–õ–ï: {context.user_data.get('creating_profile', {})}")
                    logger.info(f"üî• –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è user_id={user_id}")
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    return await self.save_profile(update, context)
                
            elif update.message.video and context.user_data.get('selecting_media_type') == 'video':
                # –ü–æ–ª—É—á–∏–ª–∏ –≤–∏–¥–µ–æ
                video = update.message.video
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã –ø—Ä–æ—Ñ–∏–ª—å
                if context.user_data.get('editing_media'):
                    return await self.save_media_edit(update, context, 'video', video.file_id)
                else:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                    context.user_data['creating_profile']['media_type'] = 'video'
                    context.user_data['creating_profile']['media_file_id'] = video.file_id
                    
                    logger.info(f"üî• –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è user_id={update.effective_user.id}")
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    return await self.save_profile(update, context)
                
            else:
                # –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø —Ñ–∞–π–ª–∞
                logger.info(f"üî• –ù–ï–ü–û–î–•–û–î–Ø–©–ò–ô –¢–ò–ü –§–ê–ô–õ–ê –¥–ª—è user_id={user_id}")
                logger.info(f"üî• update.message.photo: {update.message.photo is not None}")
                logger.info(f"üî• update.message.video: {update.message.video is not None}")
                logger.info(f"üî• selecting_media_type: {context.user_data.get('selecting_media_type')}")
                
                expected_type = context.user_data.get('selecting_media_type', '–º–µ–¥–∏–∞')
                await update.message.reply_text(
                    f"‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è {expected_type}!\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {expected_type} –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.",
                    reply_markup=Keyboards.back_button("media_back")
                )
                return SELECTING_MEDIA
        
        logger.info(f"üî• handle_media_selection END: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º SELECTING_MEDIA –¥–ª—è user_id={user_id}")
        return SELECTING_MEDIA

    async def save_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        user_id = update.effective_user.id
        
        # –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
        logger.info(f"üî• SAVE_PROFILE START: user_id={user_id}")
        logger.info(f"üî• update.callback_query: {update.callback_query is not None}")
        logger.info(f"üî• callback_data: {update.callback_query.data if update.callback_query else 'None'}")
        logger.info(f"üî• context.user_data keys: {list(context.user_data.keys())}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback query –µ—Å–ª–∏ –µ—Å—Ç—å
        if update.callback_query:
            await update.callback_query.answer()
        
        if 'creating_profile' not in context.user_data:
            logger.error(f"üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: creating_profile –ù–ï –ù–ê–ô–î–ï–ù –≤ context.user_data!")
            logger.error(f"üî• –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(context.user_data.keys())}")
            return ConversationHandler.END
        
        profile_data = context.user_data['creating_profile']
        logger.info(f"üî• profile_data –ø–æ–ª—É—á–µ–Ω: {profile_data}")
        
        try:
            # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            logger.info(f"save_profile: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id={user_id}, nickname={profile_data['game_nickname']}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
            logger.info(f"üî• –í–´–ó–û–í create_profile –¥–ª—è user_id={user_id}")
            logger.info(f"üî• game_nickname: {profile_data.get('game_nickname', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
            logger.info(f"üî• faceit_elo: {profile_data.get('faceit_elo', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
            logger.info(f"üî• faceit_url: {profile_data.get('faceit_url', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
            logger.info(f"üî• role: {profile_data.get('role', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
            logger.info(f"üî• maps: {profile_data.get('maps', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
            logger.info(f"üî• playtime_slots: {profile_data.get('playtime_slots', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
            logger.info(f"üî• categories: {profile_data.get('categories', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
            logger.info(f"üî• description: {profile_data.get('description', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
            
            success = await self.db.create_profile(
                user_id=user_id,
                game_nickname=profile_data['game_nickname'],
                faceit_elo=profile_data['faceit_elo'],
                faceit_url=profile_data['faceit_url'],
                role=profile_data['role'],
                favorite_maps=profile_data['maps'],
                playtime_slots=profile_data['playtime_slots'],
                categories=profile_data['categories'],
                description=profile_data['description'],
                media_type=profile_data.get('media_type'),
                media_file_id=profile_data.get('media_file_id')
            )
            
            logger.info(f"üî• create_profile –†–ï–ó–£–õ–¨–¢–ê–¢: {success}")
            
            # DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            logger.info(f"save_profile: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {success}")
            
            if not success:
                logger.error(f"save_profile: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                error_text = (
                    "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                
                if update.callback_query:
                    await update.callback_query.edit_message_text(
                        error_text,
                        reply_markup=Keyboards.back_button("profile_menu"),
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text(
                        error_text,
                        reply_markup=Keyboards.back_button("profile_menu"),
                        parse_mode='HTML'
                    )
                return ConversationHandler.END
            
            # DEBUG: –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
            logger.info(f"save_profile: –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è user_id={user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
            has_profile_check = await self.db.has_profile(user_id)
            logger.info(f"save_profile: –ü—Ä–æ–≤–µ—Ä–∫–∞ has_profile –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: {has_profile_check}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            cleanup_keys = ['creating_profile', 'selecting_media_type']
            for key in cleanup_keys:
                if key in context.user_data:
                    del context.user_data[key]
            
            success_text = (
                "üéâ <b>–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                "‚è≥ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>\n"
                "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n"
                "–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ —Å–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ –ø–æ–∏—Å–∫–µ!\n\n"
                "üì¨ –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."
            )
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    success_text,
                    reply_markup=Keyboards.profile_created(),
                    parse_mode='HTML'
                )
            elif update.message:
                await update.message.reply_text(
                    success_text,
                    reply_markup=Keyboards.profile_created(),
                    parse_mode='HTML'
                )
            else:
                # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –Ω–µ—Ç –Ω–∏ callback_query –Ω–∏ message
                logger.warning(f"save_profile: –ù–µ—Ç update.callback_query –∏ update.message –¥–ª—è user_id={user_id}")
                # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
                pass
            
            logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return ConversationHandler.END  # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –∑–∞–≤–µ—Ä—à–∞–µ–º conversation
            
        except Exception as e:
            logger.error(f"save_profile: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {user_id}: {e}", exc_info=True)
            
            error_text = (
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    error_text,
                    reply_markup=Keyboards.back_button("profile_menu"),
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    error_text,
                    reply_markup=Keyboards.back_button("profile_menu"),
                    parse_mode='HTML'
                )
        
        return ConversationHandler.END

    async def cancel_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        query = update.callback_query
        await query.answer()
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'creating_profile' in context.user_data:
            del context.user_data['creating_profile']
        
        await query.edit_message_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=Keyboards.profile_menu(False),
        )
        
        return ConversationHandler.END

    # === –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK'–û–í ===
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã –≤–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        query = update.callback_query
        data = query.data
        user_id = query.from_user.id
        
                # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"Profile handler –ø–æ–ª—É—á–∏–ª callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"DEBUG: data.startswith('edit_category_') = {data.startswith('edit_category_')}")
        
        if data == "profile_menu":
            await self.profile_command(update, context)
        elif data == "profile_view":
            await self.view_full_profile(update, context)
        elif data == "profile_edit":
            await self.show_edit_menu(update, context)
        elif data == "profile_stats":
            await self.show_profile_stats(update, context)
        elif data.startswith("edit_category_"):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º edit_category_ callback: {data} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self.handle_category_toggle(update, context)
        elif data == "edit_categories_done":
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º edit_categories_done –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self.handle_categories_edit_done(update, context)
        elif data.startswith("map_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º map_ callback: {data} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self.handle_map_selection_edit(update, context)
        elif data == "maps_done":
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º maps_done –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self.handle_maps_edit_done(update, context)
        elif data == "back" and context.user_data.get('editing_field') == 'role':
            # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏
            logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self.handle_role_selection_edit(update, context)
        elif data == "back" and context.user_data.get('editing_field') == 'favorite_maps':
            # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç
            logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self.cancel_maps_edit(update, context)
        elif data.startswith("role_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º role_ callback: {data} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self.handle_role_selection_edit(update, context)
        elif data == "elo_custom":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ ELO –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º elo_custom callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self.handle_elo_selection_edit(update, context)
        elif data.startswith("time_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º time_ callback: {data} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self.handle_time_selection_edit(update, context)
        elif data == "time_done":
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º time_done –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self.handle_time_edit_done(update, context)
        elif data == "back" and context.user_data.get('editing_field') == 'playtime_slots':
            # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self.cancel_time_edit(update, context)
        elif data == "back" and context.user_data.get('editing_field'):
            # –û–±—â–∏–π –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.info(f"–û–±—â–∏–π –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self.cancel_edit(update, context)
        elif data == "edit_media_add" or data == "edit_media_replace":
            await self.start_media_edit(update, context)
        elif data == "edit_media_remove":
            await self.remove_media(update, context)
        elif data.startswith("edit_"):
            await self.handle_edit_request(update, context)
        elif data.startswith("confirm_edit_"):
            await self.confirm_edit(update, context)
        elif data.startswith("cancel_edit_"):
            await self.cancel_edit(update, context)
        elif data == "back_to_main":
            from bot.handlers.start import StartHandler
            start_handler = StartHandler(self.db)
            await start_handler.show_main_menu(query)

    async def view_full_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ–¥–∏–∞"""
        # Handle both callback_query and message contexts
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            user_id = query.from_user.id
            is_callback = True
        elif update.message:
            user_id = update.message.from_user.id
            is_callback = False
        else:
            logger.error("view_full_profile: No callback_query or message found in update")
            return
        
        # üî• –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –î–û get_profile
        has_profile_before = await self.db.has_profile(user_id)
        logger.info(f"üî• view_full_profile START: user_id={user_id}, has_profile_before={has_profile_before}")
        
        profile = await self.db.get_profile(user_id)
        logger.info(f"üî• view_full_profile: get_profile result={profile is not None}")
        
        # üî• –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ü–û–°–õ–ï get_profile
        has_profile_after = await self.db.has_profile(user_id)
        logger.info(f"üî• view_full_profile: has_profile_after={has_profile_after}")
        
        if not profile:
            logger.error(f"üî• view_full_profile: –ü—Ä–æ—Ñ–∏–ª—å –ù–ï –ù–ê–ô–î–ï–ù –¥–ª—è user_id={user_id}, has_before={has_profile_before}, has_after={has_profile_after}")
            if is_callback:
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=Keyboards.back_button("profile_menu")
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=Keyboards.back_button("profile_menu")
                )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        text = "üë§ <b>–í–∞—à –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        text += await self._format_full_profile_text(profile)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –º–µ–¥–∏–∞
        chat_id = query.message.chat.id if is_callback else update.message.chat.id
        await self.send_profile_with_media(
            chat_id=chat_id,
            profile=profile,
            text=text,
            reply_markup=Keyboards.profile_view_menu(),
            context=context
        )

    async def _format_full_profile_text(self, profile) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è"""
        from bot.utils.cs2_data import format_elo_display, format_role_display, extract_faceit_nickname, PLAYTIME_OPTIONS, CS2_MAPS, format_faceit_elo_display
        from bot.utils.faceit_analyzer import faceit_analyzer
        
        # –ü–æ–ª—É—á–∞–µ–º ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ Faceit API
        elo_stats = None
        try:
            if profile.game_nickname and profile.game_nickname.strip():
                elo_stats = await faceit_analyzer.get_elo_stats_by_nickname(profile.game_nickname)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {profile.game_nickname}: {e}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ELO —Å –º–∏–Ω/–º–∞–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –í _format_full_profile_text)
        if elo_stats:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ format_faceit_elo_display()
            lowest_elo = elo_stats.get('lowest_elo', 0)
            highest_elo = elo_stats.get('highest_elo', 0)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ELO –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø–æ–ª–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ
            try:
                if isinstance(lowest_elo, (int, float)) and isinstance(highest_elo, (int, float)):
                    lowest_elo = int(lowest_elo) if lowest_elo >= 0 else 0
                    highest_elo = int(highest_elo) if highest_elo >= 0 else 0
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω/–º–∞–∫—Å –¥–∞–∂–µ –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –Ω–æ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if lowest_elo > 0 or highest_elo > 0:
                        logger.info(f"üî• FULL PROFILE: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ELO —Å –º–∏–Ω/–º–∞–∫—Å –¥–ª—è {profile.game_nickname}: –º–∏–Ω={lowest_elo} –º–∞–∫—Å={highest_elo}")
                        text = f"üéØ <b>ELO Faceit:</b> {format_faceit_elo_display(profile.faceit_elo, lowest_elo, highest_elo, profile.game_nickname)}\n"
                    else:
                        # –ï—Å–ª–∏ –º–∏–Ω/–º–∞–∫—Å —Ä–∞–≤–Ω—ã 0, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π ELO
                        text = f"üéØ <b>ELO Faceit:</b> {format_elo_display(profile.faceit_elo)}\n"
                else:
                    logger.warning(f"‚ö†Ô∏è FULL PROFILE: ELO –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è {profile.game_nickname}: lowest={type(lowest_elo)}, highest={type(highest_elo)}")
                    # Fallback –Ω–∞ –±–∞–∑–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    text = f"üéØ <b>ELO Faceit:</b> {format_elo_display(profile.faceit_elo)}\n"
            except Exception as elo_validation_error:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ELO –≤ –ø–æ–ª–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è {profile.game_nickname}: {elo_validation_error}")
                # Fallback –Ω–∞ –±–∞–∑–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                text = f"üéØ <b>ELO Faceit:</b> {format_elo_display(profile.faceit_elo)}\n"
        else:
            # Fallback –Ω–∞ –±–∞–∑–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ELO
            text = f"üéØ <b>ELO Faceit:</b> {format_elo_display(profile.faceit_elo)}\n"
        
        text += f"üë§ <b>–†–æ–ª—å:</b> {format_role_display(profile.role)}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Faceit Analyser –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        try:
            faceit_url = getattr(profile, 'faceit_url', '')
            if faceit_url:
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ Faceit Analyser –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è {profile.user_id}")
                faceit_data = await faceit_analyzer.get_enhanced_profile_info(faceit_url)
                
                # –î–∏–∞–≥—Ä–∞–º–º—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
                    
        except Exception as faceit_error:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Faceit Analyser –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è {profile.user_id}: {faceit_error}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API
        
        text += f"üó∫Ô∏è <b>–õ—é–±–∏–º—ã–µ –∫–∞—Ä—Ç—ã:</b>\n"
        for map_name in profile.favorite_maps:
            map_data = next((m for m in CS2_MAPS if m['name'] == map_name), None)
            emoji = map_data['emoji'] if map_data else 'üìç'
            text += f"   {emoji} {map_name}\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã –∏–∑ —Å–ª–æ—Ç–æ–≤
        if profile.playtime_slots:
            playtime_names = []
            for slot_id in profile.playtime_slots:
                slot_data = next((slot for slot in PLAYTIME_OPTIONS if slot['id'] == slot_id), None)
                if slot_data:
                    playtime_names.append(f"{slot_data['emoji']} {slot_data['name']}")
            playtime_text = ", ".join(playtime_names) if playtime_names else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            text += f"\n‚è∞ <b>–í—Ä–µ–º—è –∏–≥—Ä—ã:</b> {playtime_text}\n"
        else:
            text += f"\n‚è∞ <b>–í—Ä–µ–º—è –∏–≥—Ä—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        if hasattr(profile, 'categories') and profile.categories:
            from bot.utils.cs2_data import format_categories_display
            categories_text = format_categories_display(profile.categories)
            text += f"\nüéÆ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {categories_text}\n"
        else:
            text += f"\nüéÆ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> –ù–µ —É–∫–∞–∑–∞–Ω—ã\n"
        
        if profile.description:
            text += f"\nüí¨ <b>–û —Å–µ–±–µ:</b>\n{profile.description}\n"
        
        # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        created = profile.created_at.strftime("%d.%m.%Y")
        text += f"\nüìÖ <b>–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:</b> {created}"
        
        return text

    # === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø ===
    
    async def show_edit_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        profile = await self.db.get_profile(user_id)
        
        if not profile:
            await self.safe_edit_or_send_message(
                query,
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=Keyboards.back_button("profile_menu")
            )
            return
        
        text = (
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )
        
        await self.safe_edit_or_send_message(
            query,
            text,
            reply_markup=Keyboards.profile_edit_menu(),
            parse_mode='HTML'
        )

    async def handle_edit_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π"""
        query = update.callback_query
        data = query.data
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        profile = await self.db.get_profile(user_id)
        if not profile:
            await query.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if data == "edit_elo":
            await self.edit_elo(update, context, profile)
        elif data == "edit_nickname":
            await self.edit_nickname(update, context, profile)
        elif data == "edit_faceit_url":
            await self.edit_faceit_url(update, context, profile)
        elif data == "edit_role":
            await self.edit_role(update, context, profile)
        elif data == "edit_maps":
            await self.edit_maps(update, context, profile)
        elif data == "edit_time":
            await self.edit_time(update, context, profile)
        elif data == "edit_description":
            await self.edit_description(update, context, profile)
        elif data == "edit_categories":
            await self.edit_categories(update, context, profile)
        elif data == "edit_media":
            await self.edit_media(update, context, profile)

    async def edit_elo(self, update: Update, context: ContextTypes.DEFAULT_TYPE, profile):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ELO Faceit"""
        query = update.callback_query
        await query.answer()
        
        from bot.utils.cs2_data import format_elo_display
        current_elo_display = format_elo_display(profile.faceit_elo)
        
        text = (
            f"üéØ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ ELO Faceit</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π ELO:</b> {current_elo_display}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ç–æ—á–Ω–æ–µ ELO:"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.elo_input_menu(),
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_field'] = 'faceit_elo'
        context.user_data['editing_profile'] = profile

    async def edit_nickname(self, update: Update, context: ContextTypes.DEFAULT_TYPE, profile):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –Ω–∏–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        text = (
            f"üéÆ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –Ω–∏–∫–∞</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π –Ω–∏–∫:</b> {profile.game_nickname}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:\n"
            "‚Ä¢ –û—Ç 2 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚Ä¢ –ë—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è\n\n"
            "üìä <b>–í–∞–∂–Ω–æ:</b> –ù–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ELO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å Faceit.\n"
            "–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏–Ω/–º–∞–∫—Å ELO –∑–Ω–∞—á–µ–Ω–∏–π."
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_edit")]
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        context.user_data['editing_field'] = 'game_nickname'
        context.user_data['editing_profile'] = profile
        context.user_data['awaiting_nickname'] = True

    async def edit_role(self, update: Update, context: ContextTypes.DEFAULT_TYPE, profile):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        from bot.utils.cs2_data import format_role_display
        current_role_display = format_role_display(profile.role)
        
        text = (
            f"üë§ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:</b> {current_role_display}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.role_selection(),
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
        context.user_data['editing_field'] = 'role'
        context.user_data['editing_profile'] = profile

    async def edit_maps(self, update: Update, context: ContextTypes.DEFAULT_TYPE, profile):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç"""
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
        
        current_maps = ", ".join(profile.favorite_maps[:3])
        if len(profile.favorite_maps) > 3:
            current_maps += "..."
        
        text = (
            f"üó∫Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª—é–±–∏–º—ã—Ö –∫–∞—Ä—Ç</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–µ –∫–∞—Ä—Ç—ã:</b> {current_maps}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã (–æ—Ç 1 –¥–æ 5):"
        )
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–µ–∫—É—â–∏–µ –∫–∞—Ä—Ç—ã: {profile.favorite_maps}")
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.maps_selection(profile.favorite_maps),
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_field'] = 'favorite_maps'
        context.user_data['editing_profile'] = profile
        context.user_data['selected_maps'] = profile.favorite_maps.copy()
        
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ editing_field='favorite_maps' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ selected_maps: {context.user_data['selected_maps']}")

    async def edit_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE, profile):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã"""
        query = update.callback_query
        await query.answer()
        
        from bot.utils.cs2_data import PLAYTIME_OPTIONS
        current_times = []
        for slot_id in profile.playtime_slots:
            slot_data = next((slot for slot in PLAYTIME_OPTIONS if slot['id'] == slot_id), None)
            if slot_data:
                current_times.append(f"{slot_data['emoji']} {slot_data['name']}")
        
        current_time_display = ", ".join(current_times) if current_times else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        text = (
            f"‚è∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã</b>\n\n"
            f"<b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b> {current_time_display}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã:"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.playtime_selection(profile.playtime_slots),
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_field'] = 'playtime_slots'
        context.user_data['editing_profile'] = profile
        context.user_data['selected_playtime_slots'] = profile.playtime_slots.copy()

    async def edit_categories(self, update: Update, context: ContextTypes.DEFAULT_TYPE, profile):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        query = update.callback_query
        await query.answer()
        
        from bot.utils.cs2_data import format_categories_display
        current_categories_display = format_categories_display(profile.categories)
        
        text = (
            f"üéÆ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {current_categories_display}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.categories_selection(profile.categories, edit_mode=True),
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_field'] = 'categories'
        context.user_data['editing_profile'] = profile
        context.user_data['selected_categories'] = profile.categories.copy()

    async def handle_categories_edit_done(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        query = update.callback_query
        user_id = query.from_user.id
        
        selected_categories = context.user_data.get('selected_categories', [])
        
        if len(selected_categories) == 0:
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!", show_alert=True)
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
            success = await self.db.update_profile(user_id, categories=selected_categories)
            
            if success:
                await query.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", show_alert=True)
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.clear_editing_context(context)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
                await self.view_full_profile(update, context)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def handle_category_toggle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        logger.info(f"handle_category_toggle: –ø–æ–ª—É—á–µ–Ω callback {query.data}")
        
        category_id = query.data.replace("edit_category_", "")
        selected_categories = context.user_data.get('selected_categories', [])
        
        logger.info(f"handle_category_toggle: category_id={category_id}, selected_categories={selected_categories}")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_id in selected_categories:
            selected_categories.remove(category_id)
        else:
            selected_categories.append(category_id)
        
        context.user_data['selected_categories'] = selected_categories
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∂–∏–º–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await query.edit_message_reply_markup(
            reply_markup=Keyboards.categories_selection(selected_categories, edit_mode=True)
        )

    async def edit_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE, profile):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        current_desc = profile.description or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        text = (
            f"üí¨ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
            f"<b>–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n{current_desc}\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="confirm_edit_description_empty")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_edit")]
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        context.user_data['editing_field'] = 'description'
        context.user_data['editing_profile'] = profile
        context.user_data['awaiting_description'] = True

    async def edit_faceit_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE, profile):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Faceit URL"""
        query = update.callback_query
        await query.answer()
        
        from bot.utils.cs2_data import extract_faceit_nickname
        current_nickname = extract_faceit_nickname(profile.faceit_url)
        
        text = (
            f"üîó <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ Faceit</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞:</b> <a href='{profile.faceit_url}'>{current_nickname}</a>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Faceit –ø—Ä–æ—Ñ–∏–ª—å:\n"
            "–ü—Ä–∏–º–µ—Ä: https://www.faceit.com/ru/players/nickname"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_edit")]
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è URL
        context.user_data['editing_field'] = 'faceit_url'
        context.user_data['editing_profile'] = profile
        context.user_data['awaiting_faceit_url'] = True

    async def edit_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE, profile):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞"""
        query = update.callback_query
        await query.answer()
        
        current_media = "–Ω–µ—Ç" if not profile.has_media() else f"–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ ({profile.media_type})"
        
        text = (
            f"üì∑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞</b>\n\n"
            f"<b>–¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞:</b> {current_media}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await self.safe_edit_or_send_message(
            query,
            text,
            reply_markup=Keyboards.media_edit_menu(profile.has_media()),
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_field'] = 'media'
        context.user_data['editing_profile'] = profile

    async def start_media_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞"""
        query = update.callback_query
        await query.answer()
        
        text = (
            "üì∑ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–∑–∞–º–µ–Ω–∞ –º–µ–¥–∏–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:"
        )
        
        await self.safe_edit_or_send_message(
            query,
            text,
            reply_markup=Keyboards.media_selection(),
            parse_mode='HTML'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞
        context.user_data['editing_media'] = True
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞
        return EDITING_MEDIA_TYPE

    async def remove_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª—è–µ—Ç –º–µ–¥–∏–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å, —É–¥–∞–ª—è—è –º–µ–¥–∏–∞
            success = await self.db.update_profile(
                user_id, 
                media_type=None, 
                media_file_id=None
            )
            
            if success:
                await query.answer("‚úÖ –ú–µ–¥–∏–∞ —É–¥–∞–ª–µ–Ω–æ!", show_alert=True)
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.clear_editing_context(context)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
                await self.view_full_profile(update, context)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def handle_media_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        if update.message:
            # –ü–æ–ª—É—á–∏–ª–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª
            if update.message.photo and context.user_data.get('selecting_media_type') == 'photo':
                # –ü–æ–ª—É—á–∏–ª–∏ —Ñ–æ—Ç–æ
                photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                return await self.save_media_edit(update, context, 'photo', photo.file_id)
                
            elif update.message.video and context.user_data.get('selecting_media_type') == 'video':
                # –ü–æ–ª—É—á–∏–ª–∏ –≤–∏–¥–µ–æ
                video = update.message.video
                return await self.save_media_edit(update, context, 'video', video.file_id)
                
            else:
                # –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø —Ñ–∞–π–ª–∞
                expected_type = context.user_data.get('selecting_media_type', '–º–µ–¥–∏–∞')
                await update.message.reply_text(
                    f"‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è {expected_type}!\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {expected_type} –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.",
                    reply_markup=Keyboards.back_button("media_back")
                )
                return EDITING_MEDIA_TYPE
        
        return EDITING_MEDIA_TYPE
    
    async def handle_orphan_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """FALLBACK: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –≤–Ω–µ ConversationHandler"""
        user_id = update.effective_user.id
        logger.info(f"üî•üî•üî• ORPHAN MEDIA HANDLER –í–´–ó–í–ê–ù –¥–ª—è user_id={user_id}")
        logger.info(f"üî• update.message.photo: {update.message.photo is not None}")
        logger.info(f"üî• update.message.video: {update.message.video is not None}")
        logger.info(f"üî• context.user_data: {context.user_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ creating_profile –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        if 'creating_profile' in context.user_data:
            logger.info(f"üî• –ù–ê–ô–î–ï–ù creating_profile! –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è user_id={user_id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
            if update.message.photo:
                photo = update.message.photo[-1]
                context.user_data['creating_profile']['media_type'] = 'photo'
                context.user_data['creating_profile']['media_file_id'] = photo.file_id
                logger.info(f"üî• ORPHAN: –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è user_id={user_id}")
            elif update.message.video:
                video = update.message.video
                context.user_data['creating_profile']['media_type'] = 'video'
                context.user_data['creating_profile']['media_file_id'] = video.file_id
                logger.info(f"üî• ORPHAN: –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è user_id={user_id}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
            try:
                result = await self.save_profile(update, context)
                logger.info(f"üî• ORPHAN: –†–µ–∑—É–ª—å—Ç–∞—Ç save_profile: {result}")
                return result
            except Exception as e:
                logger.error(f"üî• ORPHAN: –û—à–∏–±–∫–∞ save_profile: {e}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
        else:
            logger.info(f"üî• ORPHAN: creating_profile –ù–ï –ù–ê–ô–î–ï–ù –¥–ª—è user_id={user_id}")
            await update.message.reply_text(
                "ü§î –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
                "–ï—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /profile"
            )

    async def save_media_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE, media_type: str, file_id: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        user_id = update.effective_user.id
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–≤—ã–º –º–µ–¥–∏–∞
            success = await self.db.update_profile(
                user_id,
                media_type=media_type,
                media_file_id=file_id
            )
            
            if success:
                media_name = "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è" if media_type == 'photo' else "–≤–∏–¥–µ–æ"
                await update.message.reply_text(
                    f"‚úÖ <b>{media_name.capitalize()} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>",
                    parse_mode='HTML'
                )
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.clear_editing_context(context)
                if 'editing_media' in context.user_data:
                    del context.user_data['editing_media']
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                profile = await self.db.get_profile(user_id)
                if profile:
                    text = "üë§ <b>–í–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
                    text += await self._format_full_profile_text(profile)
                    
                    await self.send_profile_with_media(
                        chat_id=update.effective_chat.id,
                        profile=profile,
                        text=text,
                        reply_markup=Keyboards.profile_view_menu(),
                        context=context
                    )
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"
            )
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º conversation –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞
        from telegram.ext import ConversationHandler
        return ConversationHandler.END

    async def confirm_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        query = update.callback_query
        data = query.data
        user_id = query.from_user.id
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        parts = data.split('_', 3)  # confirm_edit_field_value
        if len(parts) < 3:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        field = parts[2]
        value = parts[3] if len(parts) > 3 else ""
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_data = {}
            
            if field == 'description':
                if value == 'empty':
                    update_data['description'] = None
                else:
                    update_data['description'] = context.user_data.get('new_description', '')
            elif field == 'faceit_url':
                update_data['faceit_url'] = context.user_data.get('new_faceit_url', '')
            elif field == 'faceit_elo':
                # –ü–∞—Ä—Å–∏–º ELO –∏–∑ callback_data
                update_data['faceit_elo'] = int(value)
            elif field == 'role':
                update_data['role'] = value
            elif field == 'favorite_maps':
                update_data['favorite_maps'] = context.user_data.get('selected_maps', [])
            elif field == 'playtime_slots':
                update_data['playtime_slots'] = context.user_data.get('selected_playtime_slots', [])
            elif field == 'categories':
                update_data['categories'] = context.user_data.get('selected_categories', [])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
            success = await self.db.update_profile(user_id, **update_data)
            
            if success:
                await query.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!", show_alert=True)
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.clear_editing_context(context)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
                await self.view_full_profile(update, context)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def cancel_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.clear_editing_context(context)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await self.show_edit_menu(update, context)

    async def safe_edit_or_send_message(self, query, text: str, reply_markup=None, parse_mode='HTML'):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"""
        try:
            message = query.message
            if message and (message.photo or message.video):
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.message.reply_text(
                    text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            else:
                # –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                await query.edit_message_text(
                    text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –§–æ–ª–ª–±—ç–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )

    def clear_editing_context(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        keys_to_remove = [
            'editing_field', 'editing_profile', 'selected_maps', 
            'selected_playtime_slots', 'selected_categories', 'awaiting_description', 
            'awaiting_faceit_url', 'new_description', 'new_faceit_url',
            'editing_media', 'selecting_media_type'
        ]
        
        for key in keys_to_remove:
            if key in context.user_data:
                del context.user_data[key]

    async def show_profile_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await self.db.get_user_stats(user_id)
        
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:</b>\n\n"
        text += f"üëÅÔ∏è <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:</b> {stats.get('profile_views', 0)}\n"
        text += f"‚ù§Ô∏è <b>–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏:</b> {stats.get('received_likes', 0)}\n"
        text += f"üíå <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏:</b> {stats.get('sent_likes', 0)}\n"
        text += f"ü§ù <b>–¢–∏–º–º–µ–π—Ç—ã:</b> {stats.get('matches', 0)}\n"
        text += f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª—è:</b> {stats.get('rating', 0)}/10\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π
        await self.safe_edit_or_send_message(
            query,
            text,
            reply_markup=Keyboards.back_button("profile_menu"),
            parse_mode='HTML'
        )

    async def handle_map_selection_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ä—Ç –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        profile = await self.db.get_profile(user_id)
        if not profile:
            await query.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º selected_maps –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'selected_maps' not in context.user_data:
            context.user_data['selected_maps'] = profile.favorite_maps.copy()
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ selected_maps: {context.user_data['selected_maps']}")
        
        selected_maps = context.user_data['selected_maps']
        logger.info(f"–¢–µ–∫—É—â–∏–µ selected_maps: {selected_maps}")
        
        if data.startswith("map_"):
            map_name = data.replace("map_", "")
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É: {map_name}")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã
            if map_name in selected_maps:
                selected_maps.remove(map_name)
                logger.info(f"–£–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É {map_name}, –æ—Å—Ç–∞–ª–æ—Å—å: {selected_maps}")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (–º–∞–∫—Å–∏–º—É–º 5 –∫–∞—Ä—Ç)
                if len(selected_maps) >= 5:
                    await query.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 5 –∫–∞—Ä—Ç!", show_alert=True)
                    return
                selected_maps.append(map_name)
                logger.info(f"–î–æ–±–∞–≤–∏–ª–∏ –∫–∞—Ä—Ç—É {map_name}, –≤—Å–µ–≥–æ: {selected_maps}")
            
            context.user_data['selected_maps'] = selected_maps
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await query.edit_message_reply_markup(
                reply_markup=Keyboards.maps_selection(selected_maps)
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
            count_text = f"–í—ã–±—Ä–∞–Ω–æ –∫–∞—Ä—Ç: {len(selected_maps)}/5"
            await query.answer(count_text, show_alert=False)

    async def handle_maps_edit_done(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ä—Ç –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        selected_maps = context.user_data.get('selected_maps', [])
        logger.info(f"–ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã: {selected_maps}")
        
        if len(selected_maps) == 0:
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç—É!", show_alert=True)
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
            logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –∫–∞—Ä—Ç–∞–º–∏: {selected_maps}")
            success = await self.db.update_profile(user_id, favorite_maps=selected_maps)
            
            if success:
                logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                await query.answer("‚úÖ –ö–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", show_alert=True)
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.clear_editing_context(context)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
                await self.view_full_profile(update, context)
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def cancel_maps_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç"""
        query = update.callback_query
        user_id = query.from_user.id
        logger.info(f"–û—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        await query.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.clear_editing_context(context)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await self.show_edit_menu(update, context)

    async def cancel_time_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
        query = update.callback_query
        await query.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.clear_editing_context(context)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await self.show_edit_menu(update, context)

    async def handle_role_selection_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "back":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            logger.info(f"User {user_id} pressed back button in role selection during edit - returning to edit menu")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.clear_editing_context(context)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            await self.show_edit_menu(update, context)
            return
            
        elif data.startswith("role_"):
            role_name = data.replace("role_", "")
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
                success = await self.db.update_profile(user_id, role=role_name)
                
                if success:
                    await query.answer("‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", show_alert=True)
                    
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    self.clear_editing_context(context)
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
                    await self.view_full_profile(update, context)
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
                await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def handle_elo_selection_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä ELO –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "elo_custom":
            await query.edit_message_text(
                "üìù <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ç–æ—á–Ω–æ–µ ELO –Ω–∞ Faceit</b>\n\n"
                "–ü—Ä–∏–º–µ—Ä: 1250\n"
                "–î–∏–∞–ø–∞–∑–æ–Ω: 1-6000",
                reply_markup=Keyboards.back_button("profile_edit"),
                parse_mode='HTML'
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ELO
            context.user_data['editing_field'] = 'faceit_elo'
            context.user_data['awaiting_elo_input'] = True

    async def handle_time_selection_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        profile = await self.db.get_profile(user_id)
        if not profile:
            await query.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º selected_playtime_slots –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'selected_playtime_slots' not in context.user_data:
            context.user_data['selected_playtime_slots'] = profile.playtime_slots.copy()
        
        selected_slots = context.user_data['selected_playtime_slots']
        
        if data.startswith("time_"):
            slot_id = data.replace("time_", "")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
            if slot_id in selected_slots:
                selected_slots.remove(slot_id)
            else:
                selected_slots.append(slot_id)
            
            context.user_data['selected_playtime_slots'] = selected_slots
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await query.edit_message_reply_markup(
                reply_markup=Keyboards.playtime_selection(selected_slots)
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
            count_text = f"–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º–µ–Ω: {len(selected_slots)}"
            await query.answer(count_text, show_alert=False)

    async def handle_time_edit_done(self, update: Update, context:ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        selected_slots = context.user_data.get('selected_playtime_slots', [])
        
        if len(selected_slots) == 0:
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫!", show_alert=True)
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
            success = await self.db.update_profile(user_id, playtime_slots=selected_slots)
            
            if success:
                await query.answer("‚úÖ –í—Ä–µ–º—è –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", show_alert=True)
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.clear_editing_context(context)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
                await self.view_full_profile(update, context)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def handle_profile_edit_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ELO
        if context.user_data.get('awaiting_elo_input') and context.user_data.get('editing_field') == 'faceit_elo':
            try:
                elo = int(text)
                if 1 <= elo <= 6000:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
                    success = await self.db.update_profile(user_id, faceit_elo=elo)
                    
                    if success:
                        from bot.utils.cs2_data import format_elo_display
                        await update.message.reply_text(
                            f"‚úÖ <b>ELO –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
                            f"<b>–ù–æ–≤–æ–µ ELO:</b> {format_elo_display(elo)}",
                            parse_mode='HTML'
                        )
                        
                        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        self.clear_editing_context(context)
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–ª–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é
                        await self.view_full_profile(update, context)
                    else:
                        await update.message.reply_text(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ELO. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                        )
                else:
                    await update.message.reply_text(
                        "‚ùå ELO –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 6000. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                    )
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6000. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        if context.user_data.get('awaiting_description') and context.user_data.get('editing_field') == 'description':
            if len(text) > 500:
                await update.message.reply_text(
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                    f"–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å:"
                )
                return
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
                success = await self.db.update_profile(user_id, description=text)
                
                if success:
                    await update.message.reply_text(
                        f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
                        f"<b>–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n{text[:100]}{'...' if len(text) > 100 else ''}",
                        parse_mode='HTML'
                    )
                    
                    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    self.clear_editing_context(context)
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–ª–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é
                    await self.view_full_profile(update, context)
                else:
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Faceit URL
        if context.user_data.get('awaiting_faceit_url') and context.user_data.get('editing_field') == 'faceit_url':
            from bot.utils.cs2_data import validate_faceit_url, extract_faceit_nickname
            
            if validate_faceit_url(text):
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
                    success = await self.db.update_profile(user_id, faceit_url=text)
                    
                    if success:
                        nickname = extract_faceit_nickname(text)
                        await update.message.reply_text(
                            f"‚úÖ <b>Faceit –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                            f"<b>–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å:</b> <a href='{text}'>{nickname}</a>",
                            parse_mode='HTML'
                        )
                        
                        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        self.clear_editing_context(context)
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–ª–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é
                        await self.view_full_profile(update, context)
                    else:
                        await update.message.reply_text(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Faceit –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Faceit URL: {e}")
                    await update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Faceit –ø—Ä–æ—Ñ–∏–ª—å!\n"
                    "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "https://www.faceit.com/ru/players/nickname\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –Ω–∏–∫–∞
        if context.user_data.get('awaiting_nickname') and context.user_data.get('editing_field') == 'game_nickname':
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∏–∫–∞
            if len(text) < 2 or len(text) > 32:
                await update.message.reply_text(
                    "‚ùå –ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            import re
            if not re.match(r'^[a-zA-Z0-9–∞-—è–ê-–Ø_-]+$', text):
                await update.message.reply_text(
                    "‚ùå –ù–∏–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–∏–∫ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
            if text.isdigit():
                await update.message.reply_text(
                    "‚ùå –ù–∏–∫ –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
                success = await self.db.update_profile(user_id, game_nickname=text)
                
                if success:
                    await update.message.reply_text(
                        f"‚úÖ <b>–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                        f"<b>–ù–æ–≤—ã–π –Ω–∏–∫:</b> {text}",
                        parse_mode='HTML'
                    )
                    
                    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    self.clear_editing_context(context)
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–ª–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é
                    await self.view_full_profile(update, context)
                else:
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –Ω–∏–∫–∞: {e}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            return
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ —Ñ–ª–∞–≥–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return 