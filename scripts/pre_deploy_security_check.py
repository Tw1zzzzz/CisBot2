#!/usr/bin/env python3
"""
üîí Pre-Deploy Security Check Script
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º CS2 Teammeet Bot

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
- –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ API –∫–ª—é—á–µ–π
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import os
import sys
import json
import asyncio
import logging
from pathlib import Path
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from bot.config import BOT_TOKEN, FACEIT_ANALYSER_API_KEY
    from bot.utils.security_validator import validate_token_strength, get_secure_logger
    from bot.database.operations import DatabaseManager
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class SecurityCheckResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    check_name: str
    status: str  # "PASS", "WARN", "FAIL"
    message: str
    details: Optional[Dict] = None

class PreDeploySecurityChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º"""
    
    def __init__(self):
        self.results: List[SecurityCheckResult] = []
        self.project_root = Path(__file__).parent.parent
        self.secure_logger = get_secure_logger(__name__)
    
    def add_result(self, check_name: str, status: str, message: str, details: Dict = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.results.append(SecurityCheckResult(check_name, status, message, details))
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if status == "PASS":
            self.secure_logger.info(f"‚úÖ {check_name}: {message}")
        elif status == "WARN":
            self.secure_logger.warning(f"‚ö†Ô∏è  {check_name}: {message}")
        else:
            self.secure_logger.error(f"‚ùå {check_name}: {message}")
    
    def check_environment_variables(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.secure_logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
        env_file = self.project_root / ".env"
        if not env_file.exists():
            self.add_result(
                "ENV_FILE", "FAIL", 
                "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ .env —Ñ–∞–π–ª—É
        env_perms = oct(env_file.stat().st_mode)[-3:]
        if env_perms != "600":
            self.add_result(
                "ENV_PERMISSIONS", "WARN",
                f"–§–∞–π–ª .env –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {env_perms} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 600)"
            )
        else:
            self.add_result(
                "ENV_PERMISSIONS", "PASS",
                "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ .env —Ñ–∞–π–ª—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
            )
        
        return True
    
    def check_tokens(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏ API –∫–ª—é—á–∏"""
        self.secure_logger.info("üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ API –∫–ª—é—á–∏...")
        
        all_valid = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º BOT_TOKEN
        if not BOT_TOKEN:
            self.add_result(
                "BOT_TOKEN", "FAIL",
                "BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            )
            all_valid = False
        elif len(BOT_TOKEN) < 20:
            self.add_result(
                "BOT_TOKEN", "FAIL",
                "BOT_TOKEN —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
            )
            all_valid = False
        else:
            try:
                strength = validate_token_strength(BOT_TOKEN)
                if strength >= 70:
                    self.add_result(
                        "BOT_TOKEN", "PASS",
                        f"BOT_TOKEN –≤–∞–ª–∏–¥–µ–Ω (—Å–∏–ª–∞: {strength}/100)"
                    )
                else:
                    self.add_result(
                        "BOT_TOKEN", "WARN",
                        f"BOT_TOKEN —Å–ª–∞–±—ã–π (—Å–∏–ª–∞: {strength}/100)"
                    )
            except Exception as e:
                self.add_result(
                    "BOT_TOKEN", "FAIL",
                    f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ BOT_TOKEN: {str(e)}"
                )
                all_valid = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º FACEIT_API_KEY
        if not FACEIT_ANALYSER_API_KEY:
            self.add_result(
                "FACEIT_API_KEY", "FAIL",
                "FACEIT_ANALYSER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            )
            all_valid = False
        elif len(FACEIT_ANALYSER_API_KEY) < 10:
            self.add_result(
                "FACEIT_API_KEY", "FAIL",
                "FACEIT_ANALYSER_API_KEY —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
            )
            all_valid = False
        else:
            try:
                strength = validate_token_strength(FACEIT_ANALYSER_API_KEY)
                if strength >= 70:
                    self.add_result(
                        "FACEIT_API_KEY", "PASS",
                        f"FACEIT_API_KEY –≤–∞–ª–∏–¥–µ–Ω (—Å–∏–ª–∞: {strength}/100)"
                    )
                else:
                    self.add_result(
                        "FACEIT_API_KEY", "WARN",
                        f"FACEIT_API_KEY —Å–ª–∞–±—ã–π (—Å–∏–ª–∞: {strength}/100)"
                    )
            except Exception as e:
                self.add_result(
                    "FACEIT_API_KEY", "FAIL",
                    f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ FACEIT_API_KEY: {str(e)}"
                )
                all_valid = False
        
        return all_valid
    
    def check_security_components(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.secure_logger.info("üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        all_present = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Security Validator
        security_validator = self.project_root / "bot" / "utils" / "security_validator.py"
        if security_validator.exists():
            self.add_result(
                "SECURITY_VALIDATOR", "PASS",
                "Security Validator –Ω–∞–π–¥–µ–Ω"
            )
        else:
            self.add_result(
                "SECURITY_VALIDATOR", "FAIL",
                "Security Validator –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            all_present = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Callback Security
        callback_security = self.project_root / "bot" / "utils" / "callback_security.py"
        if callback_security.exists():
            self.add_result(
                "CALLBACK_SECURITY", "PASS",
                "Callback Security –Ω–∞–π–¥–µ–Ω"
            )
        else:
            self.add_result(
                "CALLBACK_SECURITY", "FAIL",
                "Callback Security –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            all_present = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Audit Trail –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_file = self.project_root / "data" / "bot.db"
        if db_file.exists():
            self.add_result(
                "DATABASE", "PASS",
                "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞"
            )
        else:
            self.add_result(
                "DATABASE", "WARN",
                "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)"
            )
        
        return all_present
    
    async def check_database_security(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.secure_logger.info("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        db_file = self.project_root / "data" / "bot.db"
        if not db_file.exists():
            self.add_result(
                "DATABASE_SECURITY", "WARN",
                "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)"
            )
            return True
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db_perms = oct(db_file.stat().st_mode)[-3:]
            if db_perms in ["600", "644"]:
                self.add_result(
                    "DATABASE_PERMISSIONS", "PASS",
                    f"–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: {db_perms}"
                )
            else:
                self.add_result(
                    "DATABASE_PERMISSIONS", "WARN",
                    f"–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_perms} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 600 –∏–ª–∏ 644)"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = DatabaseManager(str(db_file))
            await db.initialize()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –∞—É–¥–∏—Ç–∞
            tables = await db.get_all_tables()
            audit_tables = [t for t in tables if 'audit' in t.lower()]
            
            if audit_tables:
                self.add_result(
                    "AUDIT_TABLES", "PASS",
                    f"–¢–∞–±–ª–∏—Ü—ã –∞—É–¥–∏—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(audit_tables)}"
                )
            else:
                self.add_result(
                    "AUDIT_TABLES", "WARN",
                    "–¢–∞–±–ª–∏—Ü—ã –∞—É–¥–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏)"
                )
            
            await db.close()
            return True
            
        except Exception as e:
            self.add_result(
                "DATABASE_SECURITY", "FAIL",
                f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            )
            return False
    
    def check_file_permissions(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"""
        self.secure_logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º...")
        
        critical_files = [
            (".env", "600"),
            ("data/bot.db", "600"),
            ("logs/", "755"),
            ("backups/", "755")
        ]
        
        all_correct = True
        
        for file_path, expected_perms in critical_files:
            full_path = self.project_root / file_path
            if full_path.exists():
                actual_perms = oct(full_path.stat().st_mode)[-3:]
                if actual_perms == expected_perms:
                    self.add_result(
                        f"PERMISSIONS_{file_path.replace('/', '_')}", "PASS",
                        f"–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {file_path} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: {actual_perms}"
                    )
                else:
                    self.add_result(
                        f"PERMISSIONS_{file_path.replace('/', '_')}", "WARN",
                        f"–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {file_path}: {actual_perms} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {expected_perms})"
                    )
                    all_correct = False
        
        return all_correct
    
    def check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        self.secure_logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
        
        requirements_file = self.project_root / "requirements.txt"
        if not requirements_file.exists():
            self.add_result(
                "REQUIREMENTS", "FAIL",
                "–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        critical_deps = [
            "python-telegram-bot",
            "aiosqlite",
            "aiohttp",
            "python-dotenv"
        ]
        
        try:
            with open(requirements_file, 'r') as f:
                requirements = f.read().lower()
            
            missing_deps = []
            for dep in critical_deps:
                if dep not in requirements:
                    missing_deps.append(dep)
            
            if missing_deps:
                self.add_result(
                    "CRITICAL_DEPS", "FAIL",
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_deps)}"
                )
                return False
            else:
                self.add_result(
                    "CRITICAL_DEPS", "PASS",
                    "–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã"
                )
                return True
                
        except Exception as e:
            self.add_result(
                "REQUIREMENTS", "FAIL",
                f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è requirements.txt: {str(e)}"
            )
            return False
    
    async def run_all_checks(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.secure_logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        checks = [
            ("Environment Variables", self.check_environment_variables),
            ("Tokens and API Keys", self.check_tokens),
            ("Security Components", self.check_security_components),
            ("Database Security", self.check_database_security),
            ("File Permissions", self.check_file_permissions),
            ("Dependencies", self.check_dependencies)
        ]
        
        all_passed = True
        
        for check_name, check_func in checks:
            try:
                if asyncio.iscoroutinefunction(check_func):
                    result = await check_func()
                else:
                    result = check_func()
                
                if not result:
                    all_passed = False
                    
            except Exception as e:
                self.add_result(
                    check_name.upper().replace(" ", "_"), "FAIL",
                    f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"
                )
                all_passed = False
        
        return all_passed
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        report = []
        report.append("üîí –û–¢–ß–ï–¢ –û –ü–†–û–í–ï–†–ö–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        report.append("=" * 50)
        report.append("")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
        passed = [r for r in self.results if r.status == "PASS"]
        warnings = [r for r in self.results if r.status == "WARN"]
        failures = [r for r in self.results if r.status == "FAIL"]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report.append(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        report.append(f"  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {len(passed)}")
        report.append(f"  ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(warnings)}")
        report.append(f"  ‚ùå –û—à–∏–±–∫–∏: {len(failures)}")
        report.append("")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if failures:
            report.append("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:")
            for result in failures:
                report.append(f"  ‚Ä¢ {result.check_name}: {result.message}")
            report.append("")
        
        if warnings:
            report.append("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for result in warnings:
                report.append(f"  ‚Ä¢ {result.check_name}: {result.message}")
            report.append("")
        
        if passed:
            report.append("‚úÖ –£–°–ü–ï–®–ù–´–ï –ü–†–û–í–ï–†–ö–ò:")
            for result in passed:
                report.append(f"  ‚Ä¢ {result.check_name}: {result.message}")
            report.append("")
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if failures:
            report.append("üö® –°–¢–ê–¢–£–°: –ù–ï –ü–†–û–ô–î–ï–ù–û - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            report.append("   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º!")
        elif warnings:
            report.append("‚ö†Ô∏è  –°–¢–ê–¢–£–°: –ü–†–û–ô–î–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            report.append("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
        else:
            report.append("‚úÖ –°–¢–ê–¢–£–°: –ü–†–û–ô–î–ï–ù–û - –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω—ã")
            report.append("   –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é!")
        
        return "\n".join(report)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîí Pre-Deploy Security Check –¥–ª—è CS2 Teammeet Bot")
    print("=" * 60)
    print("")
    
    checker = PreDeploySecurityChecker()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        all_passed = await checker.run_all_checks()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = checker.generate_report()
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_file = Path(__file__).parent.parent / "logs" / "security_check_report.txt"
        report_file.parent.mkdir(exist_ok=True)
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        if all_passed:
            print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
            return 0
        else:
            print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
            return 1
            
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
