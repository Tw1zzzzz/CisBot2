#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/setup_first_moderator.py <user_id> [role]
"""
import sys
import os
import asyncio
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
try:
    import aiosqlite
    from bot.database.operations import DatabaseManager
    from bot.config import Config
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("")
    print("üîß –†–µ—à–µ–Ω–∏–µ:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("   python3 -m pip install -r requirements.txt")
    print("")
    print("2. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
    print("   bash scripts/install_dependencies.sh")
    print("")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def setup_first_moderator(user_id: int, role: str = 'super_admin'):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø–µ—Ä–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_manager = DatabaseManager()
    await db_manager.init_database()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã
        existing_moderators = await db_manager.get_all_moderators()
        
        if existing_moderators:
            logger.warning(f"–í —Å–∏—Å—Ç–µ–º–µ —É–∂–µ –µ—Å—Ç—å {len(existing_moderators)} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:")
            for mod in existing_moderators:
                logger.info(f"  - User ID: {mod.user_id}, Role: {mod.role}, Active: {mod.is_active}")
            
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞? (y/N): ")
            if response.lower() != 'y':
                logger.info("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await db_manager.get_user(user_id)
        if not user:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
        existing_moderator = await db_manager.get_moderator(user_id)
        if existing_moderator:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º (—Ä–æ–ª—å: {existing_moderator.role})")
            response = input("–û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å? (y/N): ")
            if response.lower() != 'y':
                logger.info("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        success = await db_manager.add_moderator(user_id, role, appointed_by=None)
        
        if success:
            logger.info(f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω!")
            logger.info(f"   User ID: {user_id}")
            logger.info(f"   –†–æ–ª—å: {role}")
            logger.info(f"   –ò–º—è: {user.first_name}")
            if user.username:
                logger.info(f"   Username: @{user.username}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∞
            from bot.database.models import Moderator
            temp_moderator = Moderator(user_id=user_id, role=role)
            permissions = temp_moderator.get_default_permissions()
            
            logger.info("   –ü—Ä–∞–≤–∞:")
            for perm, value in permissions.items():
                status = "‚úÖ" if value else "‚ùå"
                perm_name = {
                    'moderate_profiles': '–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π',
                    'manage_moderators': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏',
                    'view_stats': '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
                    'manage_users': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
                    'access_logs': '–î–æ—Å—Ç—É–ø –∫ –ª–æ–≥–∞–º'
                }.get(perm, perm)
                logger.info(f"     {status} {perm_name}")
            
            return True
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        await db_manager.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/setup_first_moderator.py <user_id> [role]")
        print("")
        print("–†–æ–ª–∏:")
        print("  super_admin - –ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        print("  admin       - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞")
        print("  moderator   - –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        print("")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python scripts/setup_first_moderator.py 123456789")
        print("  python scripts/setup_first_moderator.py 123456789 admin")
        sys.exit(1)
    
    try:
        user_id = int(sys.argv[1])
        role = sys.argv[2] if len(sys.argv) > 2 else 'super_admin'
        
        if role not in ['moderator', 'admin', 'super_admin']:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å: {role}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: moderator, admin, super_admin")
            sys.exit(1)
        
        print(f"üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞...")
        print(f"   User ID: {user_id}")
        print(f"   –†–æ–ª—å: {role}")
        print("")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        success = asyncio.run(setup_first_moderator(user_id, role))
        
        if success:
            print("")
            print("üéâ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω!")
            print("")
            print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            print("2. –í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ 'üë®‚Äçüíº –ú–æ–¥–µ—Ä–∞—Ü–∏—è'")
            print("3. –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:")
            print("   - /add_moderator <user_id> <role> - –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            print("   - /remove_moderator <user_id> - —É–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            print("   - /list_moderators - —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")
            print("   - /security_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        else:
            print("")
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            sys.exit(1)
            
    except ValueError:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π User ID: {sys.argv[1]}")
        print("User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
