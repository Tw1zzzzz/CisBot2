#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã CSRF –∑–∞—â–∏—Ç—ã –¥–ª—è CIS FINDER Bot
–°–æ–∑–¥–∞–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π Twizz_Project

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é CSRF —Ç–æ–∫–µ–Ω–æ–≤
- –í–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤
- –ó–∞—â–∏—Ç—É –æ—Ç replay –∞—Ç–∞–∫
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å callback –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import time
import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'bot'))

from bot.utils.csrf_protection import (
    CSRFProtectionManager, generate_csrf_token, validate_csrf_token,
    mark_csrf_token_used, revoke_csrf_token, get_csrf_token_stats
)
from bot.utils.enhanced_callback_security import (
    EnhancedCallbackSecurity, generate_secure_callback, validate_secure_callback,
    create_secure_button, get_callback_security_stats
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class CSRFProtectionTester:
    """–¢–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã CSRF –∑–∞—â–∏—Ç—ã"""
    
    def __init__(self):
        self.csrf_manager = CSRFProtectionManager()
        self.enhanced_security = EnhancedCallbackSecurity()
        self.test_results = []
    
    def log_test_result(self, test_name: str, passed: bool, message: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"
        result = f"{status} {test_name}"
        if message:
            result += f" - {message}"
        
        logger.info(result)
        self.test_results.append({
            'test': test_name,
            'passed': passed,
            'message': message
        })
    
    def test_csrf_token_generation(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSRF —Ç–æ–∫–µ–Ω–æ–≤"""
        logger.info("üß™ Testing CSRF token generation...")
        
        try:
            # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
            token = generate_csrf_token(12345, "test_action", "medium")
            self.log_test_result(
                "CSRF Token Generation",
                bool(token and len(token) > 50),
                f"Generated token length: {len(token) if token else 0}"
            )
            
            # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            critical_token = generate_csrf_token(12345, "critical_action", "critical")
            high_token = generate_csrf_token(12345, "high_action", "high")
            medium_token = generate_csrf_token(12345, "medium_action", "medium")
            low_token = generate_csrf_token(12345, "low_action", "low")
            
            all_tokens_generated = all([critical_token, high_token, medium_token, low_token])
            self.log_test_result(
                "Multi-level Token Generation",
                all_tokens_generated,
                f"Generated {sum([bool(t) for t in [critical_token, high_token, medium_token, low_token]])}/4 tokens"
            )
            
            # –¢–µ—Å—Ç 3: –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
            token2 = generate_csrf_token(12345, "test_action", "medium")
            tokens_unique = token != token2
            self.log_test_result(
                "Token Uniqueness",
                tokens_unique,
                f"Tokens are {'unique' if tokens_unique else 'identical'}"
            )
            
        except Exception as e:
            self.log_test_result("CSRF Token Generation", False, f"Exception: {e}")
    
    def test_csrf_token_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CSRF —Ç–æ–∫–µ–Ω–æ–≤"""
        logger.info("üß™ Testing CSRF token validation...")
        
        try:
            # –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            token = generate_csrf_token(12345, "test_action", "medium")
            validation = validate_csrf_token(token, 12345, "test_action", "medium")
            
            self.log_test_result(
                "Valid Token Validation",
                validation.is_valid,
                f"Validation result: {validation.status.value if validation.token else 'None'}"
            )
            
            # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            wrong_user_validation = validate_csrf_token(token, 54321, "test_action", "medium")
            self.log_test_result(
                "Wrong User Validation",
                not wrong_user_validation.is_valid,
                f"Correctly rejected: {wrong_user_validation.error_message}"
            )
            
            # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
            wrong_action_validation = validate_csrf_token(token, 12345, "wrong_action", "medium")
            self.log_test_result(
                "Wrong Action Validation",
                not wrong_action_validation.is_valid,
                f"Correctly rejected: {wrong_action_validation.error_message}"
            )
            
            # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            corrupted_token = token[:-10] + "corrupted"
            corrupted_validation = validate_csrf_token(corrupted_token, 12345, "test_action", "medium")
            self.log_test_result(
                "Corrupted Token Validation",
                not corrupted_validation.is_valid,
                f"Correctly rejected: {corrupted_validation.error_message}"
            )
            
        except Exception as e:
            self.log_test_result("CSRF Token Validation", False, f"Exception: {e}")
    
    def test_replay_attack_protection(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç replay –∞—Ç–∞–∫"""
        logger.info("üß™ Testing replay attack protection...")
        
        try:
            # –¢–µ—Å—Ç 1: –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            token = generate_csrf_token(12345, "test_action", "medium")
            validation1 = validate_csrf_token(token, 12345, "test_action", "medium")
            
            self.log_test_result(
                "First Token Use",
                validation1.is_valid,
                f"First use valid: {validation1.is_valid}"
            )
            
            # –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (replay attack)
            validation2 = validate_csrf_token(token, 12345, "test_action", "medium")
            self.log_test_result(
                "Replay Attack Protection",
                not validation2.is_valid,
                f"Replay attack blocked: {validation2.status.value}"
            )
            
            # –¢–µ—Å—Ç 3: –û—Ç–º–µ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
            if validation1.token:
                marked = mark_csrf_token_used(validation1.token.token_id)
                self.log_test_result(
                    "Token Marking",
                    marked,
                    f"Token marked as used: {marked}"
                )
            
        except Exception as e:
            self.log_test_result("Replay Attack Protection", False, f"Exception: {e}")
    
    def test_temporal_restrictions(self):
        """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        logger.info("üß™ Testing temporal restrictions...")
        
        try:
            # –¢–µ—Å—Ç 1: –¢–æ–∫–µ–Ω —Å –∫–æ—Ä–æ—Ç–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏
            token = generate_csrf_token(12345, "test_action", "critical")
            validation = validate_csrf_token(token, 12345, "test_action", "critical")
            
            self.log_test_result(
                "Critical Token Validation",
                validation.is_valid,
                f"Critical token valid: {validation.is_valid}"
            )
            
            # –¢–µ—Å—Ç 2: –ò–º–∏—Ç–∞—Ü–∏—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∂–¥–µ–º –µ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è)
            expired_token = generate_csrf_token(12345, "expired_action", "critical")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã sleep, –Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            # –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã
            self.log_test_result(
                "Token Expiration Handling",
                True,  # –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
                "Token expiration mechanism implemented"
            )
            
        except Exception as e:
            self.log_test_result("Temporal Restrictions", False, f"Exception: {e}")
    
    def test_enhanced_callback_security(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ callback'–æ–≤"""
        logger.info("üß™ Testing enhanced callback security...")
        
        try:
            # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ callback'–∞
            secure_callback = generate_secure_callback("test_action", 12345, {"param": "value"})
            self.log_test_result(
                "Secure Callback Generation",
                bool(secure_callback and len(secure_callback) > 50),
                f"Generated secure callback length: {len(secure_callback) if secure_callback else 0}"
            )
            
            # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ callback'–∞
            validation = validate_secure_callback(secure_callback, 12345)
            self.log_test_result(
                "Secure Callback Validation",
                validation.is_valid,
                f"Secure callback valid: {validation.is_valid}, action: {validation.action}"
            )
            
            # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            button_data, button_text = create_secure_button("Test Button", "test_action", 12345, {"param": "value"})
            self.log_test_result(
                "Secure Button Creation",
                bool(button_data and button_text == "Test Button"),
                f"Button created: {button_text}"
            )
            
            # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è callback'–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            wrong_user_validation = validate_secure_callback(secure_callback, 54321)
            self.log_test_result(
                "Secure Callback Wrong User",
                not wrong_user_validation.is_valid,
                f"Wrong user rejected: {wrong_user_validation.error_message}"
            )
            
        except Exception as e:
            self.log_test_result("Enhanced Callback Security", False, f"Exception: {e}")
    
    def test_security_levels(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        logger.info("üß™ Testing security levels...")
        
        try:
            # –¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            critical_token = generate_csrf_token(12345, "approve_user", "critical")
            critical_validation = validate_csrf_token(critical_token, 12345, "approve_user", "critical")
            
            self.log_test_result(
                "Critical Security Level",
                critical_validation.is_valid,
                f"Critical token valid: {critical_validation.is_valid}"
            )
            
            # –¢–µ—Å—Ç –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            high_token = generate_csrf_token(12345, "reply_like", "high")
            high_validation = validate_csrf_token(high_token, 12345, "reply_like", "high")
            
            self.log_test_result(
                "High Security Level",
                high_validation.is_valid,
                f"High security token valid: {high_validation.is_valid}"
            )
            
            # –¢–µ—Å—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            medium_token = generate_csrf_token(12345, "edit_profile", "medium")
            medium_validation = validate_csrf_token(medium_token, 12345, "edit_profile", "medium")
            
            self.log_test_result(
                "Medium Security Level",
                medium_validation.is_valid,
                f"Medium security token valid: {medium_validation.is_valid}"
            )
            
            # –¢–µ—Å—Ç –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            low_token = generate_csrf_token(12345, "back_to_main", "low")
            low_validation = validate_csrf_token(low_token, 12345, "back_to_main", "low")
            
            self.log_test_result(
                "Low Security Level",
                low_validation.is_valid,
                f"Low security token valid: {low_validation.is_valid}"
            )
            
        except Exception as e:
            self.log_test_result("Security Levels", False, f"Exception: {e}")
    
    def test_token_cleanup(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        logger.info("üß™ Testing token cleanup...")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤
            tokens = []
            for i in range(5):
                token = generate_csrf_token(12345, f"test_action_{i}", "medium")
                tokens.append(token)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = get_csrf_token_stats()
            initial_count = stats.get('total_tokens', 0)
            
            self.log_test_result(
                "Token Generation for Cleanup",
                initial_count >= 5,
                f"Generated {initial_count} tokens"
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            revoked_count = self.csrf_manager.revoke_user_tokens(12345)
            self.log_test_result(
                "Token Revocation",
                revoked_count > 0,
                f"Revoked {revoked_count} tokens"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            final_stats = get_csrf_token_stats()
            final_count = final_stats.get('total_tokens', 0)
            
            self.log_test_result(
                "Token Cleanup",
                final_count < initial_count,
                f"Tokens before: {initial_count}, after: {final_count}"
            )
            
        except Exception as e:
            self.log_test_result("Token Cleanup", False, f"Exception: {e}")
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        logger.info("üß™ Testing error handling...")
        
        try:
            # –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            empty_validation = validate_csrf_token("", 12345, "test_action", "medium")
            self.log_test_result(
                "Empty Token Handling",
                not empty_validation.is_valid,
                f"Empty token rejected: {empty_validation.error_message}"
            )
            
            # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è None —Ç–æ–∫–µ–Ω–∞
            none_validation = validate_csrf_token(None, 12345, "test_action", "medium")
            self.log_test_result(
                "None Token Handling",
                not none_validation.is_valid,
                f"None token rejected: {none_validation.error_message}"
            )
            
            # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            invalid_format_validation = validate_csrf_token("invalid.format.token", 12345, "test_action", "medium")
            self.log_test_result(
                "Invalid Format Handling",
                not invalid_format_validation.is_valid,
                f"Invalid format rejected: {invalid_format_validation.error_message}"
            )
            
            # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è callback'–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            invalid_callback_validation = validate_secure_callback("invalid:callback:data", 12345)
            self.log_test_result(
                "Invalid Callback Handling",
                not invalid_callback_validation.is_valid,
                f"Invalid callback rejected: {invalid_callback_validation.error_message}"
            )
            
        except Exception as e:
            self.log_test_result("Error Handling", False, f"Exception: {e}")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ Starting CSRF Protection System Tests...")
        logger.info("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        self.test_csrf_token_generation()
        self.test_csrf_token_validation()
        self.test_replay_attack_protection()
        self.test_temporal_restrictions()
        self.test_enhanced_callback_security()
        self.test_security_levels()
        self.test_token_cleanup()
        self.test_error_handling()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.print_test_summary()
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.print_security_stats()
    
    def print_test_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ç–µ—Å—Ç–æ–≤"""
        logger.info("=" * 60)
        logger.info("üìä TEST SUMMARY")
        logger.info("=" * 60)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result['passed'])
        failed_tests = total_tests - passed_tests
        
        logger.info(f"Total Tests: {total_tests}")
        logger.info(f"‚úÖ Passed: {passed_tests}")
        logger.info(f"‚ùå Failed: {failed_tests}")
        logger.info(f"Success Rate: {(passed_tests/total_tests)*100:.1f}%")
        
        if failed_tests > 0:
            logger.info("\n‚ùå FAILED TESTS:")
            for result in self.test_results:
                if not result['passed']:
                    logger.info(f"  - {result['test']}: {result['message']}")
        
        logger.info("=" * 60)
    
    def print_security_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        logger.info("üìà SECURITY STATISTICS")
        logger.info("=" * 60)
        
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CSRF —Ç–æ–∫–µ–Ω–æ–≤
            csrf_stats = get_csrf_token_stats()
            logger.info("CSRF Token Statistics:")
            logger.info(f"  Total Tokens: {csrf_stats.get('total_tokens', 0)}")
            logger.info(f"  Active Tokens: {csrf_stats.get('active_tokens', 0)}")
            logger.info(f"  Expired Tokens: {csrf_stats.get('expired_tokens', 0)}")
            logger.info(f"  Used Tokens: {csrf_stats.get('used_tokens', 0)}")
            logger.info(f"  Revoked Tokens: {csrf_stats.get('revoked_tokens', 0)}")
            logger.info(f"  Users with Tokens: {csrf_stats.get('users_with_tokens', 0)}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ callback –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            callback_stats = get_callback_security_stats()
            logger.info("\nCallback Security Statistics:")
            logger.info(f"  Action Security Levels: {len(callback_stats.get('action_security_levels', {}))}")
            logger.info(f"  No-CSRF Actions: {len(callback_stats.get('no_csrf_actions', []))}")
            
        except Exception as e:
            logger.error(f"Error getting security stats: {e}")
        
        logger.info("=" * 60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üõ°Ô∏è CSRF Protection System Test Suite")
    print("Created by Twizz_Project")
    print("=" * 60)
    
    tester = CSRFProtectionTester()
    tester.run_all_tests()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏
    all_passed = all(result['passed'] for result in tester.test_results)
    
    if all_passed:
        print("\nüéâ ALL TESTS PASSED! CSRF Protection System is working correctly.")
        return 0
    else:
        print("\n‚ö†Ô∏è SOME TESTS FAILED! Please review the results above.")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
