#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç CS2 Teammeet Bot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
"""
import asyncio
import os
import sys
from pathlib import Path

print("üß™ === –ü–û–õ–ù–´–ô –¢–ï–°–¢ CS2 TEAMMEET BOT ===\n")

def test_imports():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        import telegram
        print("  ‚úÖ telegram imported")
        
        import aiosqlite
        print("  ‚úÖ aiosqlite imported")
        
        from dotenv import load_dotenv
        print("  ‚úÖ python-dotenv imported")
        
        # –ú–æ–¥—É–ª–∏ –±–æ—Ç–∞
        from bot.config import Config, setup_logging
        print("  ‚úÖ bot.config imported")
        
        from bot.database.operations import DatabaseManager
        print("  ‚úÖ DatabaseManager imported")
        
        from bot.utils.cs2_data import CS2_ROLES, CS2_MAPS
        print("  ‚úÖ CS2 data imported")
        
        from bot.utils.keyboards import Keyboards
        print("  ‚úÖ Keyboards imported")
        
        from bot.handlers.start import StartHandler
        print("  ‚úÖ StartHandler imported")
        
        from bot.handlers.profile import ProfileHandler
        print("  ‚úÖ ProfileHandler imported")
        
        from bot.handlers.search import SearchHandler
        print("  ‚úÖ SearchHandler imported")
        
        from bot.handlers.matches import MatchesHandler
        print("  ‚úÖ MatchesHandler imported")
        
        from bot.main import CS2TeammeetBot
        print("  ‚úÖ CS2TeammeetBot imported")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Import error: {e}")
        return False

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from bot.config import Config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if Config.BOT_TOKEN:
            print(f"  ‚úÖ BOT_TOKEN: {'*' * 10}{Config.BOT_TOKEN[-10:]}")
        else:
            print("  ‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        print(f"  ‚úÖ DATABASE_PATH: {Config.DATABASE_PATH}")
        print(f"  ‚úÖ LOG_LEVEL: {Config.LOG_LEVEL}")
        print(f"  ‚úÖ MAX_SEARCH_RESULTS: {Config.MAX_SEARCH_RESULTS}")
        print(f"  ‚úÖ COMPATIBILITY_THRESHOLD: {Config.COMPATIBILITY_THRESHOLD}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Config error: {e}")
        return False

def test_cs2_data():
    """–¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö CS2"""
    print("\nüéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö CS2...")
    
    try:
        from bot.utils.cs2_data import (
            CS2_ROLES, CS2_MAPS, PLAYTIME_OPTIONS,
            calculate_profile_compatibility
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        print(f"  ‚úÖ –†–æ–ª–µ–π: {len(CS2_ROLES)} (AWPer, Entry, Support, IGL, Lurker)")
        print(f"  ‚úÖ –ö–∞—Ä—Ç: {len(CS2_MAPS)} (Dust2, Mirage, Inferno –∏ –¥—Ä.)")
        print(f"  ‚úÖ –í—Ä–µ–º–µ–Ω –∏–≥—Ä—ã: {len(PLAYTIME_OPTIONS)}")
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–ø—É—â–µ–Ω (rank system –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
        
        # –¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞)
        print("  ‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå CS2 data error: {e}")
        return False

async def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from bot.database.operations import DatabaseManager
        from bot.config import Config
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        test_db_path = "test_bot.db"
        db = DatabaseManager(test_db_path)
        try:
            await db.connect()
            await db.init_database()
            print("  ‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω –∏ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await db.create_user(12345, "testuser", "Test User")
            if success:
                print("  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Ñ–∏–ª—è
            has_profile = await db.has_profile(12345)
            print(f"  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {has_profile}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            success = await db.create_profile(
                user_id=12345,
                game_nickname="testnick",
                faceit_elo=1200,
                faceit_url="https://faceit.com/player/test",
                role="AWPer", 
                favorite_maps=["Dust2", "Mirage"],
                playtime_slots=["evening"],
                categories=[],
                description="Test profile"
            )
            if success:
                print("  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile = await db.get_profile(12345)
            if profile:
                print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: {profile.faceit_elo} ELO {profile.role}")
        finally:
            try:
                await db.disconnect()
                print("  ‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç")
            finally:
                if os.path.exists(test_db_path):
                    os.remove(test_db_path)
                    print("  ‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ë–î –æ—á–∏—â–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Database error: {e}")
        return False

def test_keyboards():
    """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        from bot.utils.keyboards import Keyboards
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        main_menu = Keyboards.main_menu()
        print(f"  ‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {len(main_menu.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        profile_menu = Keyboards.profile_menu(True)
        print(f"  ‚úÖ –ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è: {len(profile_menu.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        rank_selection = Keyboards.rank_selection()
        print(f"  ‚úÖ –í—ã–±–æ—Ä —Ä–∞–Ω–≥–∞: {len(rank_selection.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        maps_selection = Keyboards.maps_selection([])
        print(f"  ‚úÖ –í—ã–±–æ—Ä –∫–∞—Ä—Ç: {len(maps_selection.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Keyboards error: {e}")
        return False

def test_file_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        "bot/__init__.py",
        "bot/config.py", 
        "bot/main.py",
        "bot/handlers/__init__.py",
        "bot/handlers/start.py",
        "bot/handlers/profile.py", 
        "bot/handlers/search.py",
        "bot/handlers/matches.py",
        "bot/database/__init__.py",
        "bot/database/models.py",
        "bot/database/operations.py",
        "bot/utils/__init__.py",
        "bot/utils/cs2_data.py",
        "bot/utils/keyboards.py",
        "requirements.txt",
        ".env",
        "run_bot.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
        else:
            print(f"  ‚úÖ {file_path}")
    
    if missing_files:
        print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    print("  ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config), 
        ("–î–∞–Ω–Ω—ã–µ CS2", test_cs2_data),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_file_structure),
        ("–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã", test_keyboards),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*50)
    print("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! BOT –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï! üöÄ")
        return True
    else:
        print(f"\n‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        return False

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)